/*
 * generated by Xtext 2.15.0
 */
package tu_bs.cs.isf.mapping.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import tu_bs.cs.isf.mapping.mapping.Annotation;
import tu_bs.cs.isf.mapping.mapping.Author;
import tu_bs.cs.isf.mapping.mapping.Bundle;
import tu_bs.cs.isf.mapping.mapping.CbcDiagram;
import tu_bs.cs.isf.mapping.mapping.Component;
import tu_bs.cs.isf.mapping.mapping.Date;
import tu_bs.cs.isf.mapping.mapping.Import;
import tu_bs.cs.isf.mapping.mapping.Mapping;
import tu_bs.cs.isf.mapping.mapping.MappingModel;
import tu_bs.cs.isf.mapping.mapping.MappingPackage;
import tu_bs.cs.isf.mapping.mapping.MappingPair;
import tu_bs.cs.isf.mapping.mapping.ServiceMethod;
import tu_bs.cs.isf.mapping.mapping.Version;
import tu_bs.cs.isf.mapping.services.MappingGrammarAccess;

@SuppressWarnings("all")
public class MappingSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MappingGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MappingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MappingPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case MappingPackage.AUTHOR:
				sequence_Author(context, (Author) semanticObject); 
				return; 
			case MappingPackage.BUNDLE:
				sequence_Bundle(context, (Bundle) semanticObject); 
				return; 
			case MappingPackage.CBC_DIAGRAM:
				sequence_CbcDiagram(context, (CbcDiagram) semanticObject); 
				return; 
			case MappingPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case MappingPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case MappingPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case MappingPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case MappingPackage.MAPPING_MODEL:
				sequence_MappingModel(context, (MappingModel) semanticObject); 
				return; 
			case MappingPackage.MAPPING_PAIR:
				sequence_MappingPair(context, (MappingPair) semanticObject); 
				return; 
			case MappingPackage.SERVICE_METHOD:
				sequence_ServiceMethod(context, (ServiceMethod) semanticObject); 
				return; 
			case MappingPackage.VERSION:
				sequence_Version(context, (Version) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     annotation=Version
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.ANNOTATION__ANNOTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.ANNOTATION__ANNOTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnnotationAccess().getAnnotationVersionParserRuleCall_0_1_0(), semanticObject.getAnnotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Author
	 *     Author returns Author
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Author(ISerializationContext context, Author semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.ANNOTATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.ANNOTATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAuthorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Bundle
	 *     Bundle returns Bundle
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Bundle(ISerializationContext context, Bundle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.ANNOTATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.ANNOTATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBundleAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CbcDiagram returns CbcDiagram
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_CbcDiagram(ISerializationContext context, CbcDiagram semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.CBC_DIAGRAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.CBC_DIAGRAM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCbcDiagramAccess().getNameEStringParserRuleCall_0_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (name=EString mappingPair+=MappingPair*)
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Date
	 *     Date returns Date
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Date(ISerializationContext context, Date semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.ANNOTATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.ANNOTATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.IMPORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.IMPORT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MappingModel returns MappingModel
	 *
	 * Constraint:
	 *     (annotations+=Annotation* imports+=Import* mappings+=Mapping*)
	 */
	protected void sequence_MappingModel(ISerializationContext context, MappingModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MappingPair returns MappingPair
	 *
	 * Constraint:
	 *     (port=ServiceMethod diagram=CbcDiagram)
	 */
	protected void sequence_MappingPair(ISerializationContext context, MappingPair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.MAPPING_PAIR__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.MAPPING_PAIR__PORT));
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.MAPPING_PAIR__DIAGRAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.MAPPING_PAIR__DIAGRAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMappingPairAccess().getPortServiceMethodParserRuleCall_1_0(), semanticObject.getPort());
		feeder.accept(grammarAccess.getMappingPairAccess().getDiagramCbcDiagramParserRuleCall_3_0(), semanticObject.getDiagram());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     (name=EString component=Component)
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.MAPPING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.MAPPING__NAME));
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.MAPPING__COMPONENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.MAPPING__COMPONENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMappingAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMappingAccess().getComponentComponentParserRuleCall_5_0(), semanticObject.getComponent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ServiceMethod returns ServiceMethod
	 *
	 * Constraint:
	 *     name=FQN
	 */
	protected void sequence_ServiceMethod(ISerializationContext context, ServiceMethod semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.SERVICE_METHOD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.SERVICE_METHOD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServiceMethodAccess().getNameFQNParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Version returns Version
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Version(ISerializationContext context, Version semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.VERSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.VERSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVersionAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
