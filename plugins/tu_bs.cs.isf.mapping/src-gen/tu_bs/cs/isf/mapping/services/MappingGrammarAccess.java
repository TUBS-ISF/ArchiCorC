/*
 * generated by Xtext 2.15.0
 */
package tu_bs.cs.isf.mapping.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MappingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MappingModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.MappingModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsMappingParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		
		//MappingModel:
		//	{MappingModel} annotations+=Annotation*
		//	imports+=Import*
		//	mappings+=Mapping*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MappingModel} annotations+=Annotation* imports+=Import* mappings+=Mapping*
		public Group getGroup() { return cGroup; }
		
		//{MappingModel}
		public Action getMappingModelAction_0() { return cMappingModelAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
		
		//mappings+=Mapping*
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_3_0() { return cMappingsMappingParserRuleCall_3_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.Annotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAnnotationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationVersionParserRuleCall_0_1_0 = (RuleCall)cAnnotationAssignment_0_1.eContents().get(0);
		private final RuleCall cBundleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAuthorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Annotation:
		//	{Annotation} annotation=Version | Bundle | Date | Author;
		@Override public ParserRule getRule() { return rule; }
		
		//{Annotation} annotation=Version | Bundle | Date | Author
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Annotation} annotation=Version
		public Group getGroup_0() { return cGroup_0; }
		
		//{Annotation}
		public Action getAnnotationAction_0_0() { return cAnnotationAction_0_0; }
		
		//annotation=Version
		public Assignment getAnnotationAssignment_0_1() { return cAnnotationAssignment_0_1; }
		
		//Version
		public RuleCall getAnnotationVersionParserRuleCall_0_1_0() { return cAnnotationVersionParserRuleCall_0_1_0; }
		
		//Bundle
		public RuleCall getBundleParserRuleCall_1() { return cBundleParserRuleCall_1; }
		
		//Date
		public RuleCall getDateParserRuleCall_2() { return cDateParserRuleCall_2; }
		
		//Author
		public RuleCall getAuthorParserRuleCall_3() { return cAuthorParserRuleCall_3; }
	}
	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Version:
		//	'version:' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'version:' name=EString
		public Group getGroup() { return cGroup; }
		
		//'version:'
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class BundleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.Bundle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBundleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Bundle:
		//	'bundle:' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'bundle:' name=EString
		public Group getGroup() { return cGroup; }
		
		//'bundle:'
		public Keyword getBundleKeyword_0() { return cBundleKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Date:
		//	'date:' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'date:' name=EString
		public Group getGroup() { return cGroup; }
		
		//'date:'
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class AuthorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.Author");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Author:
		//	'author:' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'author:' name=EString
		public Group getGroup() { return cGroup; }
		
		//'author:'
		public Keyword getAuthorKeyword_0() { return cAuthorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Import:
		//	{Import}
		//	'import' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Import} 'import' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cExportKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComponentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentComponentParserRuleCall_5_0 = (RuleCall)cComponentAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Mapping:
		//	{Mapping}
		//	'map' name=EString '{'
		//	'export'? component=Component
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mapping} 'map' name=EString '{' 'export'? component=Component '}'
		public Group getGroup() { return cGroup; }
		
		//{Mapping}
		public Action getMappingAction_0() { return cMappingAction_0; }
		
		//'map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'export'?
		public Keyword getExportKeyword_4() { return cExportKeyword_4; }
		
		//component=Component
		public Assignment getComponentAssignment_5() { return cComponentAssignment_5; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_5_0() { return cComponentComponentParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingPairAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingPairMappingPairParserRuleCall_3_0 = (RuleCall)cMappingPairAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Component:
		//	{Component} name=EString '{'
		//	mappingPair+=MappingPair*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Component} name=EString '{' mappingPair+=MappingPair* '}'
		public Group getGroup() { return cGroup; }
		
		//{Component}
		public Action getComponentAction_0() { return cComponentAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//mappingPair+=MappingPair*
		public Assignment getMappingPairAssignment_3() { return cMappingPairAssignment_3; }
		
		//MappingPair
		public RuleCall getMappingPairMappingPairParserRuleCall_3_0() { return cMappingPairMappingPairParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MappingPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.MappingPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingPairAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortServiceMethodParserRuleCall_1_0 = (RuleCall)cPortAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDiagramAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDiagramCbcDiagramParserRuleCall_3_0 = (RuleCall)cDiagramAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MappingPair:
		//	{MappingPair} port=ServiceMethod '->' diagram=CbcDiagram ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{MappingPair} port=ServiceMethod '->' diagram=CbcDiagram ';'
		public Group getGroup() { return cGroup; }
		
		//{MappingPair}
		public Action getMappingPairAction_0() { return cMappingPairAction_0; }
		
		//port=ServiceMethod
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }
		
		//ServiceMethod
		public RuleCall getPortServiceMethodParserRuleCall_1_0() { return cPortServiceMethodParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//diagram=CbcDiagram
		public Assignment getDiagramAssignment_3() { return cDiagramAssignment_3; }
		
		//CbcDiagram
		public RuleCall getDiagramCbcDiagramParserRuleCall_3_0() { return cDiagramCbcDiagramParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ServiceMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.ServiceMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cServiceMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ServiceMethod:
		//	{ServiceMethod} name=FQN;
		@Override public ParserRule getRule() { return rule; }
		
		//{ServiceMethod} name=FQN
		public Group getGroup() { return cGroup; }
		
		//{ServiceMethod}
		public Action getServiceMethodAction_0() { return cServiceMethodAction_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
	}
	public class CbcDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.CbcDiagram");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCbcDiagramAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CbcDiagram:
		//	{CbcDiagram} name=EString | 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{CbcDiagram} name=EString | 'null'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CbcDiagram} name=EString
		public Group getGroup_0() { return cGroup_0; }
		
		//{CbcDiagram}
		public Action getCbcDiagramAction_0_0() { return cCbcDiagramAction_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tu_bs.cs.isf.mapping.Mapping.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//EString:
		//	STRING | ID ('/' ID)* ('.' ID)* | INT ('.' INT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID ('/' ID)* ('.' ID)* | INT ('.' INT)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID ('/' ID)* ('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//('/' ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_0() { return cSolidusKeyword_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
		
		//('.' ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2_1() { return cIDTerminalRuleCall_1_2_1; }
		
		//INT ('.' INT)*
		public Group getGroup_2() { return cGroup_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//('.' INT)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1_1() { return cINTTerminalRuleCall_2_1_1; }
	}
	
	
	private final MappingModelElements pMappingModel;
	private final AnnotationElements pAnnotation;
	private final VersionElements pVersion;
	private final BundleElements pBundle;
	private final DateElements pDate;
	private final AuthorElements pAuthor;
	private final ImportElements pImport;
	private final MappingElements pMapping;
	private final ComponentElements pComponent;
	private final MappingPairElements pMappingPair;
	private final ServiceMethodElements pServiceMethod;
	private final CbcDiagramElements pCbcDiagram;
	private final FQNElements pFQN;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MappingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMappingModel = new MappingModelElements();
		this.pAnnotation = new AnnotationElements();
		this.pVersion = new VersionElements();
		this.pBundle = new BundleElements();
		this.pDate = new DateElements();
		this.pAuthor = new AuthorElements();
		this.pImport = new ImportElements();
		this.pMapping = new MappingElements();
		this.pComponent = new ComponentElements();
		this.pMappingPair = new MappingPairElements();
		this.pServiceMethod = new ServiceMethodElements();
		this.pCbcDiagram = new CbcDiagramElements();
		this.pFQN = new FQNElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tu_bs.cs.isf.mapping.Mapping".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MappingModel:
	//	{MappingModel} annotations+=Annotation*
	//	imports+=Import*
	//	mappings+=Mapping*;
	public MappingModelElements getMappingModelAccess() {
		return pMappingModel;
	}
	
	public ParserRule getMappingModelRule() {
		return getMappingModelAccess().getRule();
	}
	
	//Annotation:
	//	{Annotation} annotation=Version | Bundle | Date | Author;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//Version:
	//	'version:' name=EString;
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}
	
	//Bundle:
	//	'bundle:' name=EString;
	public BundleElements getBundleAccess() {
		return pBundle;
	}
	
	public ParserRule getBundleRule() {
		return getBundleAccess().getRule();
	}
	
	//Date:
	//	'date:' name=EString;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Author:
	//	'author:' name=EString;
	public AuthorElements getAuthorAccess() {
		return pAuthor;
	}
	
	public ParserRule getAuthorRule() {
		return getAuthorAccess().getRule();
	}
	
	//Import:
	//	{Import}
	//	'import' name=EString;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Mapping:
	//	{Mapping}
	//	'map' name=EString '{'
	//	'export'? component=Component
	//	'}';
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//Component:
	//	{Component} name=EString '{'
	//	mappingPair+=MappingPair*
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//MappingPair:
	//	{MappingPair} port=ServiceMethod '->' diagram=CbcDiagram ';';
	public MappingPairElements getMappingPairAccess() {
		return pMappingPair;
	}
	
	public ParserRule getMappingPairRule() {
		return getMappingPairAccess().getRule();
	}
	
	//ServiceMethod:
	//	{ServiceMethod} name=FQN;
	public ServiceMethodElements getServiceMethodAccess() {
		return pServiceMethod;
	}
	
	public ParserRule getServiceMethodRule() {
		return getServiceMethodAccess().getRule();
	}
	
	//CbcDiagram:
	//	{CbcDiagram} name=EString | 'null';
	public CbcDiagramElements getCbcDiagramAccess() {
		return pCbcDiagram;
	}
	
	public ParserRule getCbcDiagramRule() {
		return getCbcDiagramAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//EString:
	//	STRING | ID ('/' ID)* ('.' ID)* | INT ('.' INT)*;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
