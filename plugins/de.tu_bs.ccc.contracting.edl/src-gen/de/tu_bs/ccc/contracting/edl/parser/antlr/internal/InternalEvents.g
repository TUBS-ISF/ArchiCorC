/*
 * generated by Xtext 2.20.0
 */
grammar InternalEvents;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.tu_bs.ccc.contracting.edl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.tu_bs.ccc.contracting.edl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.tu_bs.ccc.contracting.edl.services.EventsGrammarAccess;

}

@parser::members {

 	private EventsGrammarAccess grammarAccess;

    public InternalEventsParser(TokenStream input, EventsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected EventsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelAccess().getModelAction_0(),
					$current);
			}
		)
		otherlv_1='package'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getPackageKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getNameFQNParserRuleCall_2_0());
				}
				lv_name_2_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.tu_bs.ccc.contracting.edl.Events.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0());
				}
				lv_imports_3_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"de.tu_bs.ccc.contracting.edl.Events.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getEventCollectionEventTypeParserRuleCall_4_0());
				}
				lv_eventCollection_4_0=ruleEventType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"eventCollection",
						lv_eventCollection_4_0,
						"de.tu_bs.ccc.contracting.edl.Events.EventType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEventType
entryRuleEventType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventTypeRule()); }
	iv_ruleEventType=ruleEventType
	{ $current=$iv_ruleEventType.current; }
	EOF;

// Rule EventType
ruleEventType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEventTypeAccess().getEventTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventTypeAccess().getCommentAnnotationBlockParserRuleCall_1_0());
				}
				lv_comment_1_0=ruleAnnotationBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventTypeRule());
					}
					set(
						$current,
						"comment",
						lv_comment_1_0,
						"de.tu_bs.ccc.contracting.edl.Events.AnnotationBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='EventType'
		{
			newLeafNode(otherlv_2, grammarAccess.getEventTypeAccess().getEventTypeKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getEventTypeAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getEventTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventTypeAccess().getEventsEventParserRuleCall_5_0());
				}
				lv_events_5_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventTypeRule());
					}
					add(
						$current,
						"events",
						lv_events_5_0,
						"de.tu_bs.ccc.contracting.edl.Events.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getEventTypeAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventTypeAccess().getEventsEventParserRuleCall_6_1_0());
					}
					lv_events_7_0=ruleEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventTypeRule());
						}
						add(
							$current,
							"events",
							lv_events_7_0,
							"de.tu_bs.ccc.contracting.edl.Events.Event");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getEventTypeAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_element_0_0=RULE_ID
				{
					newLeafNode(lv_element_0_0, grammarAccess.getEventAccess().getElementIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"element",
						lv_element_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getEventAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					lv_default_2_0='default'
					{
						newLeafNode(lv_default_2_0, grammarAccess.getEventAccess().getDefaultDefaultKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
						setWithLastConsumed($current, "default", true, "default");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAnnotationBlock
entryRuleAnnotationBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationBlockRule()); }
	iv_ruleAnnotationBlock=ruleAnnotationBlock
	{ $current=$iv_ruleAnnotationBlock.current; }
	EOF;

// Rule AnnotationBlock
ruleAnnotationBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='/*'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnnotationBlockAccess().getSolidusAsteriskKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotationBlockAccess().getElementsAnnotationParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotationBlockRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"de.tu_bs.ccc.contracting.edl.Events.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='*/'
		{
			newLeafNode(otherlv_2, grammarAccess.getAnnotationBlockAccess().getAsteriskSolidusKeyword_2());
		}
	)
;

// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	iv_ruleAnnotation=ruleAnnotation
	{ $current=$iv_ruleAnnotation.current; }
	EOF;

// Rule Annotation
ruleAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_rawText_0_0=RULE_ANNOTATION_STRING
			{
				newLeafNode(lv_rawText_0_0, grammarAccess.getAnnotationAccess().getRawTextANNOTATION_STRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAnnotationRule());
				}
				setWithLastConsumed(
					$current,
					"rawText",
					lv_rawText_0_0,
					"de.tu_bs.ccc.contracting.edl.Events.ANNOTATION_STRING");
			}
		)
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0_0_0());
						}
						lv_importedNamespace_1_0=ruleImportedFQN
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getImportRule());
							}
							set(
								$current,
								"importedNamespace",
								lv_importedNamespace_1_0,
								"de.tu_bs.ccc.contracting.edl.Events.ImportedFQN");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_2='from'
				{
					newLeafNode(otherlv_2, grammarAccess.getImportAccess().getFromKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='model'
			{
				newLeafNode(otherlv_3, grammarAccess.getImportAccess().getModelKeyword_1_1());
			}
		)
		(
			(
				lv_importURI_4_0=RULE_STRING
				{
					newLeafNode(lv_importURI_4_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleImportedFQN
entryRuleImportedFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportedFQNRule()); }
	iv_ruleImportedFQN=ruleImportedFQN
	{ $current=$iv_ruleImportedFQN.current.getText(); }
	EOF;

// Rule ImportedFQN
ruleImportedFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0());
		}
		this_FQN_0=ruleFQN
		{
			$current.merge(this_FQN_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImportedFQNAccess().getFullStopKeyword_1_0());
			}
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImportedFQNAccess().getAsteriskKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_ANNOTATION_STRING : '@' ('a'..'z'|'-')+ (' '|'\t')* ':' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|('\\*'|'\\@')|~(('\\'|'*'|'@')))*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
