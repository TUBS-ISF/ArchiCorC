/*
 * generated by Xtext 2.15.0
 */
grammar InternalMapping;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package tu_bs.cs.isf.mapping.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package tu_bs.cs.isf.mapping.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import tu_bs.cs.isf.mapping.services.MappingGrammarAccess;

}
@parser::members {
	private MappingGrammarAccess grammarAccess;

	public void setGrammarAccess(MappingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMappingModel
entryRuleMappingModel
:
{ before(grammarAccess.getMappingModelRule()); }
	 ruleMappingModel
{ after(grammarAccess.getMappingModelRule()); } 
	 EOF 
;

// Rule MappingModel
ruleMappingModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingModelAccess().getGroup()); }
		(rule__MappingModel__Group__0)
		{ after(grammarAccess.getMappingModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnnotation
entryRuleAnnotation
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnotationAccess().getAlternatives()); }
		(rule__Annotation__Alternatives)
		{ after(grammarAccess.getAnnotationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVersion
entryRuleVersion
:
{ before(grammarAccess.getVersionRule()); }
	 ruleVersion
{ after(grammarAccess.getVersionRule()); } 
	 EOF 
;

// Rule Version
ruleVersion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVersionAccess().getGroup()); }
		(rule__Version__Group__0)
		{ after(grammarAccess.getVersionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBundle
entryRuleBundle
:
{ before(grammarAccess.getBundleRule()); }
	 ruleBundle
{ after(grammarAccess.getBundleRule()); } 
	 EOF 
;

// Rule Bundle
ruleBundle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBundleAccess().getGroup()); }
		(rule__Bundle__Group__0)
		{ after(grammarAccess.getBundleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDate
entryRuleDate
:
{ before(grammarAccess.getDateRule()); }
	 ruleDate
{ after(grammarAccess.getDateRule()); } 
	 EOF 
;

// Rule Date
ruleDate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDateAccess().getGroup()); }
		(rule__Date__Group__0)
		{ after(grammarAccess.getDateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAuthor
entryRuleAuthor
:
{ before(grammarAccess.getAuthorRule()); }
	 ruleAuthor
{ after(grammarAccess.getAuthorRule()); } 
	 EOF 
;

// Rule Author
ruleAuthor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAuthorAccess().getGroup()); }
		(rule__Author__Group__0)
		{ after(grammarAccess.getAuthorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapping
entryRuleMapping
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingAccess().getGroup()); }
		(rule__Mapping__Group__0)
		{ after(grammarAccess.getMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponent
entryRuleComponent
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentAccess().getGroup()); }
		(rule__Component__Group__0)
		{ after(grammarAccess.getComponentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMappingPair
entryRuleMappingPair
:
{ before(grammarAccess.getMappingPairRule()); }
	 ruleMappingPair
{ after(grammarAccess.getMappingPairRule()); } 
	 EOF 
;

// Rule MappingPair
ruleMappingPair 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingPairAccess().getGroup()); }
		(rule__MappingPair__Group__0)
		{ after(grammarAccess.getMappingPairAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleServiceMethod
entryRuleServiceMethod
:
{ before(grammarAccess.getServiceMethodRule()); }
	 ruleServiceMethod
{ after(grammarAccess.getServiceMethodRule()); } 
	 EOF 
;

// Rule ServiceMethod
ruleServiceMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getServiceMethodAccess().getGroup()); }
		(rule__ServiceMethod__Group__0)
		{ after(grammarAccess.getServiceMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCbcDiagram
entryRuleCbcDiagram
:
{ before(grammarAccess.getCbcDiagramRule()); }
	 ruleCbcDiagram
{ after(grammarAccess.getCbcDiagramRule()); } 
	 EOF 
;

// Rule CbcDiagram
ruleCbcDiagram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCbcDiagramAccess().getAlternatives()); }
		(rule__CbcDiagram__Alternatives)
		{ after(grammarAccess.getCbcDiagramAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFQN
entryRuleFQN
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFQNAccess().getGroup()); }
		(rule__FQN__Group__0)
		{ after(grammarAccess.getFQNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAccess().getGroup_0()); }
		(rule__Annotation__Group_0__0)
		{ after(grammarAccess.getAnnotationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAnnotationAccess().getBundleParserRuleCall_1()); }
		ruleBundle
		{ after(grammarAccess.getAnnotationAccess().getBundleParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAnnotationAccess().getDateParserRuleCall_2()); }
		ruleDate
		{ after(grammarAccess.getAnnotationAccess().getDateParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getAnnotationAccess().getAuthorParserRuleCall_3()); }
		ruleAuthor
		{ after(grammarAccess.getAnnotationAccess().getAuthorParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CbcDiagram__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCbcDiagramAccess().getGroup_0()); }
		(rule__CbcDiagram__Group_0__0)
		{ after(grammarAccess.getCbcDiagramAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCbcDiagramAccess().getNullKeyword_1()); }
		'null'
		{ after(grammarAccess.getCbcDiagramAccess().getNullKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getGroup_1()); }
		(rule__EString__Group_1__0)
		{ after(grammarAccess.getEStringAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getGroup_2()); }
		(rule__EString__Group_2__0)
		{ after(grammarAccess.getEStringAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingModel__Group__0__Impl
	rule__MappingModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingModelAccess().getMappingModelAction_0()); }
	()
	{ after(grammarAccess.getMappingModelAccess().getMappingModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingModel__Group__1__Impl
	rule__MappingModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingModelAccess().getAnnotationsAssignment_1()); }
	(rule__MappingModel__AnnotationsAssignment_1)*
	{ after(grammarAccess.getMappingModelAccess().getAnnotationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingModel__Group__2__Impl
	rule__MappingModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingModelAccess().getImportsAssignment_2()); }
	(rule__MappingModel__ImportsAssignment_2)*
	{ after(grammarAccess.getMappingModelAccess().getImportsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingModel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingModelAccess().getMappingsAssignment_3()); }
	(rule__MappingModel__MappingsAssignment_3)*
	{ after(grammarAccess.getMappingModelAccess().getMappingsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group_0__0__Impl
	rule__Annotation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getAnnotationAction_0_0()); }
	()
	{ after(grammarAccess.getAnnotationAccess().getAnnotationAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getAnnotationAssignment_0_1()); }
	(rule__Annotation__AnnotationAssignment_0_1)
	{ after(grammarAccess.getAnnotationAccess().getAnnotationAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__0__Impl
	rule__Version__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getVersionKeyword_0()); }
	'version:'
	{ after(grammarAccess.getVersionAccess().getVersionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getNameAssignment_1()); }
	(rule__Version__NameAssignment_1)
	{ after(grammarAccess.getVersionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bundle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bundle__Group__0__Impl
	rule__Bundle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bundle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBundleAccess().getBundleKeyword_0()); }
	'bundle:'
	{ after(grammarAccess.getBundleAccess().getBundleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bundle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bundle__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bundle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBundleAccess().getNameAssignment_1()); }
	(rule__Bundle__NameAssignment_1)
	{ after(grammarAccess.getBundleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Date__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__0__Impl
	rule__Date__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getDateKeyword_0()); }
	'date:'
	{ after(grammarAccess.getDateAccess().getDateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getNameAssignment_1()); }
	(rule__Date__NameAssignment_1)
	{ after(grammarAccess.getDateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Author__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Author__Group__0__Impl
	rule__Author__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Author__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAuthorAccess().getAuthorKeyword_0()); }
	'author:'
	{ after(grammarAccess.getAuthorAccess().getAuthorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Author__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Author__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Author__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAuthorAccess().getNameAssignment_1()); }
	(rule__Author__NameAssignment_1)
	{ after(grammarAccess.getAuthorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportAction_0()); }
	()
	{ after(grammarAccess.getImportAccess().getImportAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_1()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getNameAssignment_2()); }
	(rule__Import__NameAssignment_2)
	{ after(grammarAccess.getImportAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getMappingAction_0()); }
	()
	{ after(grammarAccess.getMappingAccess().getMappingAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getMapKeyword_1()); }
	'map'
	{ after(grammarAccess.getMappingAccess().getMapKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__2__Impl
	rule__Mapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getNameAssignment_2()); }
	(rule__Mapping__NameAssignment_2)
	{ after(grammarAccess.getMappingAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__3__Impl
	rule__Mapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__4__Impl
	rule__Mapping__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getExportKeyword_4()); }
	('export')?
	{ after(grammarAccess.getMappingAccess().getExportKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__5__Impl
	rule__Mapping__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getComponentAssignment_5()); }
	(rule__Mapping__ComponentAssignment_5)
	{ after(grammarAccess.getMappingAccess().getComponentAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__0__Impl
	rule__Component__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getComponentAction_0()); }
	()
	{ after(grammarAccess.getComponentAccess().getComponentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__1__Impl
	rule__Component__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getNameAssignment_1()); }
	(rule__Component__NameAssignment_1)
	{ after(grammarAccess.getComponentAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__2__Impl
	rule__Component__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__3__Impl
	rule__Component__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getMappingPairAssignment_3()); }
	(rule__Component__MappingPairAssignment_3)*
	{ after(grammarAccess.getComponentAccess().getMappingPairAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MappingPair__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingPair__Group__0__Impl
	rule__MappingPair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingPairAccess().getMappingPairAction_0()); }
	()
	{ after(grammarAccess.getMappingPairAccess().getMappingPairAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingPair__Group__1__Impl
	rule__MappingPair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingPairAccess().getPortAssignment_1()); }
	(rule__MappingPair__PortAssignment_1)
	{ after(grammarAccess.getMappingPairAccess().getPortAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingPair__Group__2__Impl
	rule__MappingPair__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingPairAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
	'->'
	{ after(grammarAccess.getMappingPairAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingPair__Group__3__Impl
	rule__MappingPair__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingPairAccess().getDiagramAssignment_3()); }
	(rule__MappingPair__DiagramAssignment_3)
	{ after(grammarAccess.getMappingPairAccess().getDiagramAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappingPair__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingPairAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getMappingPairAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ServiceMethod__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ServiceMethod__Group__0__Impl
	rule__ServiceMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServiceMethodAccess().getServiceMethodAction_0()); }
	()
	{ after(grammarAccess.getServiceMethodAccess().getServiceMethodAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ServiceMethod__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServiceMethodAccess().getNameAssignment_1()); }
	(rule__ServiceMethod__NameAssignment_1)
	{ after(grammarAccess.getServiceMethodAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CbcDiagram__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CbcDiagram__Group_0__0__Impl
	rule__CbcDiagram__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CbcDiagram__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCbcDiagramAccess().getCbcDiagramAction_0_0()); }
	()
	{ after(grammarAccess.getCbcDiagramAccess().getCbcDiagramAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CbcDiagram__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CbcDiagram__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CbcDiagram__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCbcDiagramAccess().getNameAssignment_0_1()); }
	(rule__CbcDiagram__NameAssignment_0_1)
	{ after(grammarAccess.getCbcDiagramAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getGroup_1()); }
	(rule__FQN__Group_1__0)*
	{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EString__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_1__0__Impl
	rule__EString__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
	{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_1__1__Impl
	rule__EString__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getGroup_1_1()); }
	(rule__EString__Group_1_1__0)*
	{ after(grammarAccess.getEStringAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getGroup_1_2()); }
	(rule__EString__Group_1_2__0)*
	{ after(grammarAccess.getEStringAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EString__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_1_1__0__Impl
	rule__EString__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getSolidusKeyword_1_1_0()); }
	'/'
	{ after(grammarAccess.getEStringAccess().getSolidusKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1_1_1()); }
	RULE_ID
	{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EString__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_1_2__0__Impl
	rule__EString__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getFullStopKeyword_1_2_0()); }
	'.'
	{ after(grammarAccess.getEStringAccess().getFullStopKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1_2_1()); }
	RULE_ID
	{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EString__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_2__0__Impl
	rule__EString__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getINTTerminalRuleCall_2_0()); }
	RULE_INT
	{ after(grammarAccess.getEStringAccess().getINTTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getGroup_2_1()); }
	(rule__EString__Group_2_1__0)*
	{ after(grammarAccess.getEStringAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EString__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_2_1__0__Impl
	rule__EString__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getFullStopKeyword_2_1_0()); }
	'.'
	{ after(grammarAccess.getEStringAccess().getFullStopKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EString__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEStringAccess().getINTTerminalRuleCall_2_1_1()); }
	RULE_INT
	{ after(grammarAccess.getEStringAccess().getINTTerminalRuleCall_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModel__AnnotationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingModelAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
		ruleAnnotation
		{ after(grammarAccess.getMappingModelAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__ImportsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingModelAccess().getImportsImportParserRuleCall_2_0()); }
		ruleImport
		{ after(grammarAccess.getMappingModelAccess().getImportsImportParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__MappingsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingModelAccess().getMappingsMappingParserRuleCall_3_0()); }
		ruleMapping
		{ after(grammarAccess.getMappingModelAccess().getMappingsMappingParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AnnotationAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAccess().getAnnotationVersionParserRuleCall_0_1_0()); }
		ruleVersion
		{ after(grammarAccess.getAnnotationAccess().getAnnotationVersionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVersionAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getVersionAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bundle__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBundleAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getBundleAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDateAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getDateAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Author__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAuthorAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getAuthorAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getImportAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getMappingAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__ComponentAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingAccess().getComponentComponentParserRuleCall_5_0()); }
		ruleComponent
		{ after(grammarAccess.getMappingAccess().getComponentComponentParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getComponentAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__MappingPairAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getMappingPairMappingPairParserRuleCall_3_0()); }
		ruleMappingPair
		{ after(grammarAccess.getComponentAccess().getMappingPairMappingPairParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__PortAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingPairAccess().getPortServiceMethodParserRuleCall_1_0()); }
		ruleServiceMethod
		{ after(grammarAccess.getMappingPairAccess().getPortServiceMethodParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingPair__DiagramAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingPairAccess().getDiagramCbcDiagramParserRuleCall_3_0()); }
		ruleCbcDiagram
		{ after(grammarAccess.getMappingPairAccess().getDiagramCbcDiagramParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getServiceMethodAccess().getNameFQNParserRuleCall_1_0()); }
		ruleFQN
		{ after(grammarAccess.getServiceMethodAccess().getNameFQNParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CbcDiagram__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCbcDiagramAccess().getNameEStringParserRuleCall_0_1_0()); }
		ruleEString
		{ after(grammarAccess.getCbcDiagramAccess().getNameEStringParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
