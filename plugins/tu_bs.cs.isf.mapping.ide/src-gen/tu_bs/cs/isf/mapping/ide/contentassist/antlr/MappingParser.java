/*
 * generated by Xtext 2.15.0
 */
package tu_bs.cs.isf.mapping.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import tu_bs.cs.isf.mapping.ide.contentassist.antlr.internal.InternalMappingParser;
import tu_bs.cs.isf.mapping.services.MappingGrammarAccess;

public class MappingParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MappingGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MappingGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAnnotationAccess().getAlternatives(), "rule__Annotation__Alternatives");
			builder.put(grammarAccess.getCbcDiagramAccess().getAlternatives(), "rule__CbcDiagram__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getMappingModelAccess().getGroup(), "rule__MappingModel__Group__0");
			builder.put(grammarAccess.getAnnotationAccess().getGroup_0(), "rule__Annotation__Group_0__0");
			builder.put(grammarAccess.getVersionAccess().getGroup(), "rule__Version__Group__0");
			builder.put(grammarAccess.getBundleAccess().getGroup(), "rule__Bundle__Group__0");
			builder.put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
			builder.put(grammarAccess.getAuthorAccess().getGroup(), "rule__Author__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getMappingPairAccess().getGroup(), "rule__MappingPair__Group__0");
			builder.put(grammarAccess.getServiceMethodAccess().getGroup(), "rule__ServiceMethod__Group__0");
			builder.put(grammarAccess.getCbcDiagramAccess().getGroup_0(), "rule__CbcDiagram__Group_0__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getEStringAccess().getGroup_1(), "rule__EString__Group_1__0");
			builder.put(grammarAccess.getEStringAccess().getGroup_1_1(), "rule__EString__Group_1_1__0");
			builder.put(grammarAccess.getEStringAccess().getGroup_1_2(), "rule__EString__Group_1_2__0");
			builder.put(grammarAccess.getEStringAccess().getGroup_2(), "rule__EString__Group_2__0");
			builder.put(grammarAccess.getEStringAccess().getGroup_2_1(), "rule__EString__Group_2_1__0");
			builder.put(grammarAccess.getMappingModelAccess().getAnnotationsAssignment_1(), "rule__MappingModel__AnnotationsAssignment_1");
			builder.put(grammarAccess.getMappingModelAccess().getImportsAssignment_2(), "rule__MappingModel__ImportsAssignment_2");
			builder.put(grammarAccess.getMappingModelAccess().getMappingsAssignment_3(), "rule__MappingModel__MappingsAssignment_3");
			builder.put(grammarAccess.getAnnotationAccess().getAnnotationAssignment_0_1(), "rule__Annotation__AnnotationAssignment_0_1");
			builder.put(grammarAccess.getVersionAccess().getNameAssignment_1(), "rule__Version__NameAssignment_1");
			builder.put(grammarAccess.getBundleAccess().getNameAssignment_1(), "rule__Bundle__NameAssignment_1");
			builder.put(grammarAccess.getDateAccess().getNameAssignment_1(), "rule__Date__NameAssignment_1");
			builder.put(grammarAccess.getAuthorAccess().getNameAssignment_1(), "rule__Author__NameAssignment_1");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_2(), "rule__Import__NameAssignment_2");
			builder.put(grammarAccess.getMappingAccess().getNameAssignment_2(), "rule__Mapping__NameAssignment_2");
			builder.put(grammarAccess.getMappingAccess().getComponentAssignment_5(), "rule__Mapping__ComponentAssignment_5");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getMappingPairAssignment_3(), "rule__Component__MappingPairAssignment_3");
			builder.put(grammarAccess.getMappingPairAccess().getPortAssignment_1(), "rule__MappingPair__PortAssignment_1");
			builder.put(grammarAccess.getMappingPairAccess().getDiagramAssignment_3(), "rule__MappingPair__DiagramAssignment_3");
			builder.put(grammarAccess.getServiceMethodAccess().getNameAssignment_1(), "rule__ServiceMethod__NameAssignment_1");
			builder.put(grammarAccess.getCbcDiagramAccess().getNameAssignment_0_1(), "rule__CbcDiagram__NameAssignment_0_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MappingGrammarAccess grammarAccess;

	@Override
	protected InternalMappingParser createParser() {
		InternalMappingParser result = new InternalMappingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MappingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MappingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
