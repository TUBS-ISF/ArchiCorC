/*
 * generated by Xtext 2.20.0
 */
grammar InternalEvents;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.tu_bs.ccc.contracting.edl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.tu_bs.ccc.contracting.edl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.tu_bs.ccc.contracting.edl.services.EventsGrammarAccess;

}
@parser::members {
	private EventsGrammarAccess grammarAccess;

	public void setGrammarAccess(EventsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventType
entryRuleEventType
:
{ before(grammarAccess.getEventTypeRule()); }
	 ruleEventType
{ after(grammarAccess.getEventTypeRule()); } 
	 EOF 
;

// Rule EventType
ruleEventType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventTypeAccess().getGroup()); }
		(rule__EventType__Group__0)
		{ after(grammarAccess.getEventTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnnotationBlock
entryRuleAnnotationBlock
:
{ before(grammarAccess.getAnnotationBlockRule()); }
	 ruleAnnotationBlock
{ after(grammarAccess.getAnnotationBlockRule()); } 
	 EOF 
;

// Rule AnnotationBlock
ruleAnnotationBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnotationBlockAccess().getGroup()); }
		(rule__AnnotationBlock__Group__0)
		{ after(grammarAccess.getAnnotationBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnnotation
entryRuleAnnotation
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnotationAccess().getRawTextAssignment()); }
		(rule__Annotation__RawTextAssignment)
		{ after(grammarAccess.getAnnotationAccess().getRawTextAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportedFQN
entryRuleImportedFQN
:
{ before(grammarAccess.getImportedFQNRule()); }
	 ruleImportedFQN
{ after(grammarAccess.getImportedFQNRule()); } 
	 EOF 
;

// Rule ImportedFQN
ruleImportedFQN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportedFQNAccess().getGroup()); }
		(rule__ImportedFQN__Group__0)
		{ after(grammarAccess.getImportedFQNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFQN
entryRuleFQN
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFQNAccess().getGroup()); }
		(rule__FQN__Group__0)
		{ after(grammarAccess.getFQNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getGroup_1_0()); }
		(rule__Import__Group_1_0__0)
		{ after(grammarAccess.getImportAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getImportAccess().getModelKeyword_1_1()); }
		'model'
		{ after(grammarAccess.getImportAccess().getModelKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelAction_0()); }
	()
	{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPackageKeyword_1()); }
	'package'
	{ after(grammarAccess.getModelAccess().getPackageKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_2()); }
	(rule__Model__NameAssignment_2)
	{ after(grammarAccess.getModelAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getImportsAssignment_3()); }
	(rule__Model__ImportsAssignment_3)*
	{ after(grammarAccess.getModelAccess().getImportsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getEventCollectionAssignment_4()); }
	(rule__Model__EventCollectionAssignment_4)*
	{ after(grammarAccess.getModelAccess().getEventCollectionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EventType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group__0__Impl
	rule__EventType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getEventTypeAction_0()); }
	()
	{ after(grammarAccess.getEventTypeAccess().getEventTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group__1__Impl
	rule__EventType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getCommentAssignment_1()); }
	(rule__EventType__CommentAssignment_1)?
	{ after(grammarAccess.getEventTypeAccess().getCommentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group__2__Impl
	rule__EventType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getEventTypeKeyword_2()); }
	'EventType'
	{ after(grammarAccess.getEventTypeAccess().getEventTypeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group__3__Impl
	rule__EventType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getNameAssignment_3()); }
	(rule__EventType__NameAssignment_3)?
	{ after(grammarAccess.getEventTypeAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group__4__Impl
	rule__EventType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getEventTypeAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group__5__Impl
	rule__EventType__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getEventsAssignment_5()); }
	(rule__EventType__EventsAssignment_5)
	{ after(grammarAccess.getEventTypeAccess().getEventsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group__6__Impl
	rule__EventType__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getGroup_6()); }
	(rule__EventType__Group_6__0)*
	{ after(grammarAccess.getEventTypeAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getEventTypeAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EventType__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group_6__0__Impl
	rule__EventType__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getCommaKeyword_6_0()); }
	','
	{ after(grammarAccess.getEventTypeAccess().getCommaKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventType__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventTypeAccess().getEventsAssignment_6_1()); }
	(rule__EventType__EventsAssignment_6_1)
	{ after(grammarAccess.getEventTypeAccess().getEventsAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getElementAssignment_0()); }
	(rule__Event__ElementAssignment_0)
	{ after(grammarAccess.getEventAccess().getElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_1()); }
	(rule__Event__Group_1__0)?
	{ after(grammarAccess.getEventAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1__0__Impl
	rule__Event__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEqualsSignKeyword_1_0()); }
	'='
	{ after(grammarAccess.getEventAccess().getEqualsSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getDefaultAssignment_1_1()); }
	(rule__Event__DefaultAssignment_1_1)
	{ after(grammarAccess.getEventAccess().getDefaultAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnnotationBlock__Group__0__Impl
	rule__AnnotationBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationBlockAccess().getSolidusAsteriskKeyword_0()); }
	'/*'
	{ after(grammarAccess.getAnnotationBlockAccess().getSolidusAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnnotationBlock__Group__1__Impl
	rule__AnnotationBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAnnotationBlockAccess().getElementsAssignment_1()); }
		(rule__AnnotationBlock__ElementsAssignment_1)
		{ after(grammarAccess.getAnnotationBlockAccess().getElementsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getAnnotationBlockAccess().getElementsAssignment_1()); }
		(rule__AnnotationBlock__ElementsAssignment_1)*
		{ after(grammarAccess.getAnnotationBlockAccess().getElementsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnnotationBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationBlockAccess().getAsteriskSolidusKeyword_2()); }
	'*/'
	{ after(grammarAccess.getAnnotationBlockAccess().getAsteriskSolidusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getAlternatives_1()); }
	(rule__Import__Alternatives_1)
	{ after(grammarAccess.getImportAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportURIAssignment_2()); }
	(rule__Import__ImportURIAssignment_2)
	{ after(grammarAccess.getImportAccess().getImportURIAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0__0__Impl
	rule__Import__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1_0_0()); }
	(rule__Import__ImportedNamespaceAssignment_1_0_0)
	{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getFromKeyword_1_0_1()); }
	'from'
	{ after(grammarAccess.getImportAccess().getFromKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportedFQN__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedFQN__Group__0__Impl
	rule__ImportedFQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0()); }
	ruleFQN
	{ after(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedFQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedFQNAccess().getGroup_1()); }
	(rule__ImportedFQN__Group_1__0)?
	{ after(grammarAccess.getImportedFQNAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportedFQN__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedFQN__Group_1__0__Impl
	rule__ImportedFQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedFQNAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getImportedFQNAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedFQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedFQNAccess().getAsteriskKeyword_1_1()); }
	'*'
	{ after(grammarAccess.getImportedFQNAccess().getAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getGroup_1()); }
	(rule__FQN__Group_1__0)*
	{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameFQNParserRuleCall_2_0()); }
		ruleFQN
		{ after(grammarAccess.getModelAccess().getNameFQNParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ImportsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0()); }
		ruleImport
		{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__EventCollectionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getEventCollectionEventTypeParserRuleCall_4_0()); }
		ruleEventType
		{ after(grammarAccess.getModelAccess().getEventCollectionEventTypeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__CommentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventTypeAccess().getCommentAnnotationBlockParserRuleCall_1_0()); }
		ruleAnnotationBlock
		{ after(grammarAccess.getEventTypeAccess().getCommentAnnotationBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventTypeAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getEventTypeAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__EventsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventTypeAccess().getEventsEventParserRuleCall_5_0()); }
		ruleEvent
		{ after(grammarAccess.getEventTypeAccess().getEventsEventParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__EventsAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventTypeAccess().getEventsEventParserRuleCall_6_1_0()); }
		ruleEvent
		{ after(grammarAccess.getEventTypeAccess().getEventsEventParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getElementIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEventAccess().getElementIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__DefaultAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getDefaultDefaultKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getEventAccess().getDefaultDefaultKeyword_1_1_0()); }
			'default'
			{ after(grammarAccess.getEventAccess().getDefaultDefaultKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getEventAccess().getDefaultDefaultKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationBlock__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationBlockAccess().getElementsAnnotationParserRuleCall_1_0()); }
		ruleAnnotation
		{ after(grammarAccess.getAnnotationBlockAccess().getElementsAnnotationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__RawTextAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAccess().getRawTextANNOTATION_STRINGTerminalRuleCall_0()); }
		RULE_ANNOTATION_STRING
		{ after(grammarAccess.getAnnotationAccess().getRawTextANNOTATION_STRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0_0_0()); }
		ruleImportedFQN
		{ after(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ANNOTATION_STRING : '@' ('a'..'z'|'-')+ (' '|'\t')* ':' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|('\\*'|'\\@')|~(('\\'|'*'|'@')))*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
