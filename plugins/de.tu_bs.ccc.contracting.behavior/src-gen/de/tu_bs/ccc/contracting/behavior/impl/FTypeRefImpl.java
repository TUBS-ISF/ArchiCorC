/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.impl;

import de.tu_bs.ccc.contracting.behavior.BehaviorPackage;
import de.tu_bs.ccc.contracting.behavior.FBasicTypeId;
import de.tu_bs.ccc.contracting.behavior.FIntegerInterval;
import de.tu_bs.ccc.contracting.behavior.FType;
import de.tu_bs.ccc.contracting.behavior.FTypeRef;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>FType Ref</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FTypeRefImpl#getPredefined <em>Predefined</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FTypeRefImpl#getDerived <em>Derived</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FTypeRefImpl#getInterval <em>Interval</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FTypeRefImpl extends MinimalEObjectImpl.Container implements FTypeRef
{
  /**
   * The default value of the '{@link #getPredefined() <em>Predefined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefined()
   * @generated
   * @ordered
   */
  protected static final FBasicTypeId PREDEFINED_EDEFAULT = FBasicTypeId.UNDEFINED;

  /**
   * The cached value of the '{@link #getPredefined() <em>Predefined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefined()
   * @generated
   * @ordered
   */
  protected FBasicTypeId predefined = PREDEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getDerived() <em>Derived</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDerived()
   * @generated
   * @ordered
   */
  protected FType derived;

  /**
   * The cached value of the '{@link #getInterval() <em>Interval</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterval()
   * @generated
   * @ordered
   */
  protected FIntegerInterval interval;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FTypeRefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BehaviorPackage.Literals.FTYPE_REF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FBasicTypeId getPredefined()
  {
    return predefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredefined(FBasicTypeId newPredefined)
  {
    FBasicTypeId oldPredefined = predefined;
    predefined = newPredefined == null ? PREDEFINED_EDEFAULT : newPredefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FTYPE_REF__PREDEFINED, oldPredefined, predefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FType getDerived()
  {
    if (derived != null && derived.eIsProxy())
    {
      InternalEObject oldDerived = (InternalEObject)derived;
      derived = (FType)eResolveProxy(oldDerived);
      if (derived != oldDerived)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BehaviorPackage.FTYPE_REF__DERIVED, oldDerived, derived));
      }
    }
    return derived;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FType basicGetDerived()
  {
    return derived;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDerived(FType newDerived)
  {
    FType oldDerived = derived;
    derived = newDerived;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FTYPE_REF__DERIVED, oldDerived, derived));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FIntegerInterval getInterval()
  {
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInterval(FIntegerInterval newInterval, NotificationChain msgs)
  {
    FIntegerInterval oldInterval = interval;
    interval = newInterval;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.FTYPE_REF__INTERVAL, oldInterval, newInterval);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInterval(FIntegerInterval newInterval)
  {
    if (newInterval != interval)
    {
      NotificationChain msgs = null;
      if (interval != null)
        msgs = ((InternalEObject)interval).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FTYPE_REF__INTERVAL, null, msgs);
      if (newInterval != null)
        msgs = ((InternalEObject)newInterval).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FTYPE_REF__INTERVAL, null, msgs);
      msgs = basicSetInterval(newInterval, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FTYPE_REF__INTERVAL, newInterval, newInterval));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BehaviorPackage.FTYPE_REF__INTERVAL:
        return basicSetInterval(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BehaviorPackage.FTYPE_REF__PREDEFINED:
        return getPredefined();
      case BehaviorPackage.FTYPE_REF__DERIVED:
        if (resolve) return getDerived();
        return basicGetDerived();
      case BehaviorPackage.FTYPE_REF__INTERVAL:
        return getInterval();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BehaviorPackage.FTYPE_REF__PREDEFINED:
        setPredefined((FBasicTypeId)newValue);
        return;
      case BehaviorPackage.FTYPE_REF__DERIVED:
        setDerived((FType)newValue);
        return;
      case BehaviorPackage.FTYPE_REF__INTERVAL:
        setInterval((FIntegerInterval)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.FTYPE_REF__PREDEFINED:
        setPredefined(PREDEFINED_EDEFAULT);
        return;
      case BehaviorPackage.FTYPE_REF__DERIVED:
        setDerived((FType)null);
        return;
      case BehaviorPackage.FTYPE_REF__INTERVAL:
        setInterval((FIntegerInterval)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.FTYPE_REF__PREDEFINED:
        return predefined != PREDEFINED_EDEFAULT;
      case BehaviorPackage.FTYPE_REF__DERIVED:
        return derived != null;
      case BehaviorPackage.FTYPE_REF__INTERVAL:
        return interval != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (predefined: ");
    result.append(predefined);
    result.append(')');
    return result.toString();
  }

} //FTypeRefImpl
