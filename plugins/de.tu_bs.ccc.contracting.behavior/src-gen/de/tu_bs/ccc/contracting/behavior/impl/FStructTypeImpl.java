/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.impl;

import de.tu_bs.ccc.contracting.behavior.BehaviorPackage;
import de.tu_bs.ccc.contracting.behavior.FField;
import de.tu_bs.ccc.contracting.behavior.FStructType;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>FStruct Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStructTypeImpl#getBase <em>Base</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStructTypeImpl#isPolymorphic <em>Polymorphic</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStructTypeImpl#getElements <em>Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FStructTypeImpl extends FTypeImpl implements FStructType
{
  /**
   * The cached value of the '{@link #getBase() <em>Base</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBase()
   * @generated
   * @ordered
   */
  protected FStructType base;

  /**
   * The default value of the '{@link #isPolymorphic() <em>Polymorphic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPolymorphic()
   * @generated
   * @ordered
   */
  protected static final boolean POLYMORPHIC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPolymorphic() <em>Polymorphic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPolymorphic()
   * @generated
   * @ordered
   */
  protected boolean polymorphic = POLYMORPHIC_EDEFAULT;

  /**
   * The cached value of the '{@link #getElements() <em>Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElements()
   * @generated
   * @ordered
   */
  protected EList<FField> elements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FStructTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BehaviorPackage.Literals.FSTRUCT_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FStructType getBase()
  {
    if (base != null && base.eIsProxy())
    {
      InternalEObject oldBase = (InternalEObject)base;
      base = (FStructType)eResolveProxy(oldBase);
      if (base != oldBase)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BehaviorPackage.FSTRUCT_TYPE__BASE, oldBase, base));
      }
    }
    return base;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FStructType basicGetBase()
  {
    return base;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBase(FStructType newBase)
  {
    FStructType oldBase = base;
    base = newBase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTRUCT_TYPE__BASE, oldBase, base));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPolymorphic()
  {
    return polymorphic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPolymorphic(boolean newPolymorphic)
  {
    boolean oldPolymorphic = polymorphic;
    polymorphic = newPolymorphic;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTRUCT_TYPE__POLYMORPHIC, oldPolymorphic, polymorphic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FField> getElements()
  {
    if (elements == null)
    {
      elements = new EObjectContainmentEList<FField>(FField.class, this, BehaviorPackage.FSTRUCT_TYPE__ELEMENTS);
    }
    return elements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTRUCT_TYPE__ELEMENTS:
        return ((InternalEList<?>)getElements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTRUCT_TYPE__BASE:
        if (resolve) return getBase();
        return basicGetBase();
      case BehaviorPackage.FSTRUCT_TYPE__POLYMORPHIC:
        return isPolymorphic();
      case BehaviorPackage.FSTRUCT_TYPE__ELEMENTS:
        return getElements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTRUCT_TYPE__BASE:
        setBase((FStructType)newValue);
        return;
      case BehaviorPackage.FSTRUCT_TYPE__POLYMORPHIC:
        setPolymorphic((Boolean)newValue);
        return;
      case BehaviorPackage.FSTRUCT_TYPE__ELEMENTS:
        getElements().clear();
        getElements().addAll((Collection<? extends FField>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTRUCT_TYPE__BASE:
        setBase((FStructType)null);
        return;
      case BehaviorPackage.FSTRUCT_TYPE__POLYMORPHIC:
        setPolymorphic(POLYMORPHIC_EDEFAULT);
        return;
      case BehaviorPackage.FSTRUCT_TYPE__ELEMENTS:
        getElements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTRUCT_TYPE__BASE:
        return base != null;
      case BehaviorPackage.FSTRUCT_TYPE__POLYMORPHIC:
        return polymorphic != POLYMORPHIC_EDEFAULT;
      case BehaviorPackage.FSTRUCT_TYPE__ELEMENTS:
        return elements != null && !elements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (polymorphic: ");
    result.append(polymorphic);
    result.append(')');
    return result.toString();
  }

} //FStructTypeImpl
