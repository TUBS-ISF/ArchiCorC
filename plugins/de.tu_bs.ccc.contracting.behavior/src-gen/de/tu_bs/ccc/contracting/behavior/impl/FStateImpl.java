/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.impl;

import de.tu_bs.ccc.contracting.behavior.AnnotationBlock;
import de.tu_bs.ccc.contracting.behavior.BehaviorPackage;
import de.tu_bs.ccc.contracting.behavior.Broadcast;
import de.tu_bs.ccc.contracting.behavior.FState;
import de.tu_bs.ccc.contracting.behavior.FTransition;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>FState</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getComment <em>Comment</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getEntryAction <em>Entry Action</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getBroadcastEntry <em>Broadcast Entry</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getExitAction <em>Exit Action</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getBroadcastExit <em>Broadcast Exit</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getDoAction <em>Do Action</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getBoradcastDo <em>Boradcast Do</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.FStateImpl#getTransitions <em>Transitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FStateImpl extends MinimalEObjectImpl.Container implements FState
{
  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected AnnotationBlock comment;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getEntryAction() <em>Entry Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntryAction()
   * @generated
   * @ordered
   */
  protected static final String ENTRY_ACTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEntryAction() <em>Entry Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntryAction()
   * @generated
   * @ordered
   */
  protected String entryAction = ENTRY_ACTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getBroadcastEntry() <em>Broadcast Entry</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastEntry()
   * @generated
   * @ordered
   */
  protected Broadcast broadcastEntry;

  /**
   * The default value of the '{@link #getExitAction() <em>Exit Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExitAction()
   * @generated
   * @ordered
   */
  protected static final String EXIT_ACTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExitAction() <em>Exit Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExitAction()
   * @generated
   * @ordered
   */
  protected String exitAction = EXIT_ACTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getBroadcastExit() <em>Broadcast Exit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastExit()
   * @generated
   * @ordered
   */
  protected Broadcast broadcastExit;

  /**
   * The default value of the '{@link #getDoAction() <em>Do Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDoAction()
   * @generated
   * @ordered
   */
  protected static final String DO_ACTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDoAction() <em>Do Action</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDoAction()
   * @generated
   * @ordered
   */
  protected String doAction = DO_ACTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getBoradcastDo() <em>Boradcast Do</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoradcastDo()
   * @generated
   * @ordered
   */
  protected Broadcast boradcastDo;

  /**
   * The cached value of the '{@link #getTransitions() <em>Transitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitions()
   * @generated
   * @ordered
   */
  protected EList<FTransition> transitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FStateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BehaviorPackage.Literals.FSTATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnnotationBlock getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComment(AnnotationBlock newComment, NotificationChain msgs)
  {
    AnnotationBlock oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__COMMENT, oldComment, newComment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(AnnotationBlock newComment)
  {
    if (newComment != comment)
    {
      NotificationChain msgs = null;
      if (comment != null)
        msgs = ((InternalEObject)comment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FSTATE__COMMENT, null, msgs);
      if (newComment != null)
        msgs = ((InternalEObject)newComment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FSTATE__COMMENT, null, msgs);
      msgs = basicSetComment(newComment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__COMMENT, newComment, newComment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEntryAction()
  {
    return entryAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEntryAction(String newEntryAction)
  {
    String oldEntryAction = entryAction;
    entryAction = newEntryAction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__ENTRY_ACTION, oldEntryAction, entryAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Broadcast getBroadcastEntry()
  {
    return broadcastEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBroadcastEntry(Broadcast newBroadcastEntry, NotificationChain msgs)
  {
    Broadcast oldBroadcastEntry = broadcastEntry;
    broadcastEntry = newBroadcastEntry;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__BROADCAST_ENTRY, oldBroadcastEntry, newBroadcastEntry);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroadcastEntry(Broadcast newBroadcastEntry)
  {
    if (newBroadcastEntry != broadcastEntry)
    {
      NotificationChain msgs = null;
      if (broadcastEntry != null)
        msgs = ((InternalEObject)broadcastEntry).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FSTATE__BROADCAST_ENTRY, null, msgs);
      if (newBroadcastEntry != null)
        msgs = ((InternalEObject)newBroadcastEntry).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FSTATE__BROADCAST_ENTRY, null, msgs);
      msgs = basicSetBroadcastEntry(newBroadcastEntry, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__BROADCAST_ENTRY, newBroadcastEntry, newBroadcastEntry));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExitAction()
  {
    return exitAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExitAction(String newExitAction)
  {
    String oldExitAction = exitAction;
    exitAction = newExitAction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__EXIT_ACTION, oldExitAction, exitAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Broadcast getBroadcastExit()
  {
    return broadcastExit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBroadcastExit(Broadcast newBroadcastExit, NotificationChain msgs)
  {
    Broadcast oldBroadcastExit = broadcastExit;
    broadcastExit = newBroadcastExit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__BROADCAST_EXIT, oldBroadcastExit, newBroadcastExit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroadcastExit(Broadcast newBroadcastExit)
  {
    if (newBroadcastExit != broadcastExit)
    {
      NotificationChain msgs = null;
      if (broadcastExit != null)
        msgs = ((InternalEObject)broadcastExit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FSTATE__BROADCAST_EXIT, null, msgs);
      if (newBroadcastExit != null)
        msgs = ((InternalEObject)newBroadcastExit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FSTATE__BROADCAST_EXIT, null, msgs);
      msgs = basicSetBroadcastExit(newBroadcastExit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__BROADCAST_EXIT, newBroadcastExit, newBroadcastExit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDoAction()
  {
    return doAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDoAction(String newDoAction)
  {
    String oldDoAction = doAction;
    doAction = newDoAction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__DO_ACTION, oldDoAction, doAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Broadcast getBoradcastDo()
  {
    return boradcastDo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBoradcastDo(Broadcast newBoradcastDo, NotificationChain msgs)
  {
    Broadcast oldBoradcastDo = boradcastDo;
    boradcastDo = newBoradcastDo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__BORADCAST_DO, oldBoradcastDo, newBoradcastDo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBoradcastDo(Broadcast newBoradcastDo)
  {
    if (newBoradcastDo != boradcastDo)
    {
      NotificationChain msgs = null;
      if (boradcastDo != null)
        msgs = ((InternalEObject)boradcastDo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FSTATE__BORADCAST_DO, null, msgs);
      if (newBoradcastDo != null)
        msgs = ((InternalEObject)newBoradcastDo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.FSTATE__BORADCAST_DO, null, msgs);
      msgs = basicSetBoradcastDo(newBoradcastDo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.FSTATE__BORADCAST_DO, newBoradcastDo, newBoradcastDo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FTransition> getTransitions()
  {
    if (transitions == null)
    {
      transitions = new EObjectContainmentEList<FTransition>(FTransition.class, this, BehaviorPackage.FSTATE__TRANSITIONS);
    }
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTATE__COMMENT:
        return basicSetComment(null, msgs);
      case BehaviorPackage.FSTATE__BROADCAST_ENTRY:
        return basicSetBroadcastEntry(null, msgs);
      case BehaviorPackage.FSTATE__BROADCAST_EXIT:
        return basicSetBroadcastExit(null, msgs);
      case BehaviorPackage.FSTATE__BORADCAST_DO:
        return basicSetBoradcastDo(null, msgs);
      case BehaviorPackage.FSTATE__TRANSITIONS:
        return ((InternalEList<?>)getTransitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTATE__COMMENT:
        return getComment();
      case BehaviorPackage.FSTATE__NAME:
        return getName();
      case BehaviorPackage.FSTATE__ENTRY_ACTION:
        return getEntryAction();
      case BehaviorPackage.FSTATE__BROADCAST_ENTRY:
        return getBroadcastEntry();
      case BehaviorPackage.FSTATE__EXIT_ACTION:
        return getExitAction();
      case BehaviorPackage.FSTATE__BROADCAST_EXIT:
        return getBroadcastExit();
      case BehaviorPackage.FSTATE__DO_ACTION:
        return getDoAction();
      case BehaviorPackage.FSTATE__BORADCAST_DO:
        return getBoradcastDo();
      case BehaviorPackage.FSTATE__TRANSITIONS:
        return getTransitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTATE__COMMENT:
        setComment((AnnotationBlock)newValue);
        return;
      case BehaviorPackage.FSTATE__NAME:
        setName((String)newValue);
        return;
      case BehaviorPackage.FSTATE__ENTRY_ACTION:
        setEntryAction((String)newValue);
        return;
      case BehaviorPackage.FSTATE__BROADCAST_ENTRY:
        setBroadcastEntry((Broadcast)newValue);
        return;
      case BehaviorPackage.FSTATE__EXIT_ACTION:
        setExitAction((String)newValue);
        return;
      case BehaviorPackage.FSTATE__BROADCAST_EXIT:
        setBroadcastExit((Broadcast)newValue);
        return;
      case BehaviorPackage.FSTATE__DO_ACTION:
        setDoAction((String)newValue);
        return;
      case BehaviorPackage.FSTATE__BORADCAST_DO:
        setBoradcastDo((Broadcast)newValue);
        return;
      case BehaviorPackage.FSTATE__TRANSITIONS:
        getTransitions().clear();
        getTransitions().addAll((Collection<? extends FTransition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTATE__COMMENT:
        setComment((AnnotationBlock)null);
        return;
      case BehaviorPackage.FSTATE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BehaviorPackage.FSTATE__ENTRY_ACTION:
        setEntryAction(ENTRY_ACTION_EDEFAULT);
        return;
      case BehaviorPackage.FSTATE__BROADCAST_ENTRY:
        setBroadcastEntry((Broadcast)null);
        return;
      case BehaviorPackage.FSTATE__EXIT_ACTION:
        setExitAction(EXIT_ACTION_EDEFAULT);
        return;
      case BehaviorPackage.FSTATE__BROADCAST_EXIT:
        setBroadcastExit((Broadcast)null);
        return;
      case BehaviorPackage.FSTATE__DO_ACTION:
        setDoAction(DO_ACTION_EDEFAULT);
        return;
      case BehaviorPackage.FSTATE__BORADCAST_DO:
        setBoradcastDo((Broadcast)null);
        return;
      case BehaviorPackage.FSTATE__TRANSITIONS:
        getTransitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.FSTATE__COMMENT:
        return comment != null;
      case BehaviorPackage.FSTATE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BehaviorPackage.FSTATE__ENTRY_ACTION:
        return ENTRY_ACTION_EDEFAULT == null ? entryAction != null : !ENTRY_ACTION_EDEFAULT.equals(entryAction);
      case BehaviorPackage.FSTATE__BROADCAST_ENTRY:
        return broadcastEntry != null;
      case BehaviorPackage.FSTATE__EXIT_ACTION:
        return EXIT_ACTION_EDEFAULT == null ? exitAction != null : !EXIT_ACTION_EDEFAULT.equals(exitAction);
      case BehaviorPackage.FSTATE__BROADCAST_EXIT:
        return broadcastExit != null;
      case BehaviorPackage.FSTATE__DO_ACTION:
        return DO_ACTION_EDEFAULT == null ? doAction != null : !DO_ACTION_EDEFAULT.equals(doAction);
      case BehaviorPackage.FSTATE__BORADCAST_DO:
        return boradcastDo != null;
      case BehaviorPackage.FSTATE__TRANSITIONS:
        return transitions != null && !transitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", entryAction: ");
    result.append(entryAction);
    result.append(", exitAction: ");
    result.append(exitAction);
    result.append(", doAction: ");
    result.append(doAction);
    result.append(')');
    return result.toString();
  }

} //FStateImpl
