/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.impl;

import de.tu_bs.ccc.contracting.behavior.AnnotationBlock;
import de.tu_bs.ccc.contracting.behavior.Behavior;
import de.tu_bs.ccc.contracting.behavior.BehaviorPackage;
import de.tu_bs.ccc.contracting.behavior.EventBinding;
import de.tu_bs.ccc.contracting.behavior.FDeclaration;
import de.tu_bs.ccc.contracting.behavior.FStateGraph;
import de.tu_bs.ccc.contracting.behavior.Signal;
import de.tu_bs.ccc.contracting.behavior.StandardOperation;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Behavior</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.BehaviorImpl#getComment <em>Comment</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.BehaviorImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.BehaviorImpl#getComponentName <em>Component Name</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.BehaviorImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.BehaviorImpl#getEvents <em>Events</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.BehaviorImpl#getSignals <em>Signals</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.BehaviorImpl#getOperations <em>Operations</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.BehaviorImpl#getStateGraphs <em>State Graphs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BehaviorImpl extends MinimalEObjectImpl.Container implements Behavior
{
  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected AnnotationBlock comment;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getComponentName() <em>Component Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentName()
   * @generated
   * @ordered
   */
  protected static final String COMPONENT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComponentName() <em>Component Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentName()
   * @generated
   * @ordered
   */
  protected String componentName = COMPONENT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<FDeclaration> variables;

  /**
   * The cached value of the '{@link #getEvents() <em>Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvents()
   * @generated
   * @ordered
   */
  protected EList<EventBinding> events;

  /**
   * The cached value of the '{@link #getSignals() <em>Signals</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignals()
   * @generated
   * @ordered
   */
  protected EList<Signal> signals;

  /**
   * The cached value of the '{@link #getOperations() <em>Operations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperations()
   * @generated
   * @ordered
   */
  protected EList<StandardOperation> operations;

  /**
   * The cached value of the '{@link #getStateGraphs() <em>State Graphs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateGraphs()
   * @generated
   * @ordered
   */
  protected EList<FStateGraph> stateGraphs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BehaviorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BehaviorPackage.Literals.BEHAVIOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnnotationBlock getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComment(AnnotationBlock newComment, NotificationChain msgs)
  {
    AnnotationBlock oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.BEHAVIOR__COMMENT, oldComment, newComment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(AnnotationBlock newComment)
  {
    if (newComment != comment)
    {
      NotificationChain msgs = null;
      if (comment != null)
        msgs = ((InternalEObject)comment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.BEHAVIOR__COMMENT, null, msgs);
      if (newComment != null)
        msgs = ((InternalEObject)newComment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.BEHAVIOR__COMMENT, null, msgs);
      msgs = basicSetComment(newComment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.BEHAVIOR__COMMENT, newComment, newComment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.BEHAVIOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComponentName()
  {
    return componentName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComponentName(String newComponentName)
  {
    String oldComponentName = componentName;
    componentName = newComponentName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.BEHAVIOR__COMPONENT_NAME, oldComponentName, componentName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FDeclaration> getVariables()
  {
    if (variables == null)
    {
      variables = new EObjectContainmentEList<FDeclaration>(FDeclaration.class, this, BehaviorPackage.BEHAVIOR__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EventBinding> getEvents()
  {
    if (events == null)
    {
      events = new EObjectContainmentEList<EventBinding>(EventBinding.class, this, BehaviorPackage.BEHAVIOR__EVENTS);
    }
    return events;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Signal> getSignals()
  {
    if (signals == null)
    {
      signals = new EObjectContainmentEList<Signal>(Signal.class, this, BehaviorPackage.BEHAVIOR__SIGNALS);
    }
    return signals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StandardOperation> getOperations()
  {
    if (operations == null)
    {
      operations = new EObjectContainmentEList<StandardOperation>(StandardOperation.class, this, BehaviorPackage.BEHAVIOR__OPERATIONS);
    }
    return operations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FStateGraph> getStateGraphs()
  {
    if (stateGraphs == null)
    {
      stateGraphs = new EObjectContainmentEList<FStateGraph>(FStateGraph.class, this, BehaviorPackage.BEHAVIOR__STATE_GRAPHS);
    }
    return stateGraphs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BehaviorPackage.BEHAVIOR__COMMENT:
        return basicSetComment(null, msgs);
      case BehaviorPackage.BEHAVIOR__VARIABLES:
        return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
      case BehaviorPackage.BEHAVIOR__EVENTS:
        return ((InternalEList<?>)getEvents()).basicRemove(otherEnd, msgs);
      case BehaviorPackage.BEHAVIOR__SIGNALS:
        return ((InternalEList<?>)getSignals()).basicRemove(otherEnd, msgs);
      case BehaviorPackage.BEHAVIOR__OPERATIONS:
        return ((InternalEList<?>)getOperations()).basicRemove(otherEnd, msgs);
      case BehaviorPackage.BEHAVIOR__STATE_GRAPHS:
        return ((InternalEList<?>)getStateGraphs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BehaviorPackage.BEHAVIOR__COMMENT:
        return getComment();
      case BehaviorPackage.BEHAVIOR__NAME:
        return getName();
      case BehaviorPackage.BEHAVIOR__COMPONENT_NAME:
        return getComponentName();
      case BehaviorPackage.BEHAVIOR__VARIABLES:
        return getVariables();
      case BehaviorPackage.BEHAVIOR__EVENTS:
        return getEvents();
      case BehaviorPackage.BEHAVIOR__SIGNALS:
        return getSignals();
      case BehaviorPackage.BEHAVIOR__OPERATIONS:
        return getOperations();
      case BehaviorPackage.BEHAVIOR__STATE_GRAPHS:
        return getStateGraphs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BehaviorPackage.BEHAVIOR__COMMENT:
        setComment((AnnotationBlock)newValue);
        return;
      case BehaviorPackage.BEHAVIOR__NAME:
        setName((String)newValue);
        return;
      case BehaviorPackage.BEHAVIOR__COMPONENT_NAME:
        setComponentName((String)newValue);
        return;
      case BehaviorPackage.BEHAVIOR__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends FDeclaration>)newValue);
        return;
      case BehaviorPackage.BEHAVIOR__EVENTS:
        getEvents().clear();
        getEvents().addAll((Collection<? extends EventBinding>)newValue);
        return;
      case BehaviorPackage.BEHAVIOR__SIGNALS:
        getSignals().clear();
        getSignals().addAll((Collection<? extends Signal>)newValue);
        return;
      case BehaviorPackage.BEHAVIOR__OPERATIONS:
        getOperations().clear();
        getOperations().addAll((Collection<? extends StandardOperation>)newValue);
        return;
      case BehaviorPackage.BEHAVIOR__STATE_GRAPHS:
        getStateGraphs().clear();
        getStateGraphs().addAll((Collection<? extends FStateGraph>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.BEHAVIOR__COMMENT:
        setComment((AnnotationBlock)null);
        return;
      case BehaviorPackage.BEHAVIOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BehaviorPackage.BEHAVIOR__COMPONENT_NAME:
        setComponentName(COMPONENT_NAME_EDEFAULT);
        return;
      case BehaviorPackage.BEHAVIOR__VARIABLES:
        getVariables().clear();
        return;
      case BehaviorPackage.BEHAVIOR__EVENTS:
        getEvents().clear();
        return;
      case BehaviorPackage.BEHAVIOR__SIGNALS:
        getSignals().clear();
        return;
      case BehaviorPackage.BEHAVIOR__OPERATIONS:
        getOperations().clear();
        return;
      case BehaviorPackage.BEHAVIOR__STATE_GRAPHS:
        getStateGraphs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.BEHAVIOR__COMMENT:
        return comment != null;
      case BehaviorPackage.BEHAVIOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BehaviorPackage.BEHAVIOR__COMPONENT_NAME:
        return COMPONENT_NAME_EDEFAULT == null ? componentName != null : !COMPONENT_NAME_EDEFAULT.equals(componentName);
      case BehaviorPackage.BEHAVIOR__VARIABLES:
        return variables != null && !variables.isEmpty();
      case BehaviorPackage.BEHAVIOR__EVENTS:
        return events != null && !events.isEmpty();
      case BehaviorPackage.BEHAVIOR__SIGNALS:
        return signals != null && !signals.isEmpty();
      case BehaviorPackage.BEHAVIOR__OPERATIONS:
        return operations != null && !operations.isEmpty();
      case BehaviorPackage.BEHAVIOR__STATE_GRAPHS:
        return stateGraphs != null && !stateGraphs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", componentName: ");
    result.append(componentName);
    result.append(')');
    return result.toString();
  }

} //BehaviorImpl
