/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.impl;

import de.tu_bs.ccc.contracting.behavior.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviorFactoryImpl extends EFactoryImpl implements BehaviorFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BehaviorFactory init()
  {
    try
    {
      BehaviorFactory theBehaviorFactory = (BehaviorFactory)EPackage.Registry.INSTANCE.getEFactory(BehaviorPackage.eNS_URI);
      if (theBehaviorFactory != null)
      {
        return theBehaviorFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BehaviorFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BehaviorFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BehaviorPackage.BEHAVIOR_MODEL: return createBehaviorModel();
      case BehaviorPackage.BEHAVIOR: return createBehavior();
      case BehaviorPackage.SIGNAL: return createSignal();
      case BehaviorPackage.SIGNAL_SIGNATURE: return createSignalSignature();
      case BehaviorPackage.EVENT_BINDING: return createEventBinding();
      case BehaviorPackage.EVENT_TRIGGER: return createEventTrigger();
      case BehaviorPackage.EVENT_ON_IF: return createEventOnIf();
      case BehaviorPackage.METHOD_SIGNATURE: return createMethodSignature();
      case BehaviorPackage.EVENT: return createEvent();
      case BehaviorPackage.OPERATION: return createOperation();
      case BehaviorPackage.STANDARD_OPERATION: return createStandardOperation();
      case BehaviorPackage.VAR_DECL: return createVarDecl();
      case BehaviorPackage.REFABLE_TYPE: return createRefableType();
      case BehaviorPackage.SPECIFICATION_BLOCK: return createSpecificationBlock();
      case BehaviorPackage.CONTRACT_PAIR: return createContractPair();
      case BehaviorPackage.REQUIRES: return createRequires();
      case BehaviorPackage.ENSURES: return createEnsures();
      case BehaviorPackage.FSTATE_GRAPH: return createFStateGraph();
      case BehaviorPackage.FSTATE: return createFState();
      case BehaviorPackage.FTRANSITION: return createFTransition();
      case BehaviorPackage.FTRIGGER: return createFTrigger();
      case BehaviorPackage.FEVENT_ON_IF: return createFEventOnIf();
      case BehaviorPackage.BROADCAST: return createBroadcast();
      case BehaviorPackage.FGUARD: return createFGuard();
      case BehaviorPackage.FTYPE_REF: return createFTypeRef();
      case BehaviorPackage.FINTEGER_INTERVAL: return createFIntegerInterval();
      case BehaviorPackage.FTYPE: return createFType();
      case BehaviorPackage.FARRAY_TYPE: return createFArrayType();
      case BehaviorPackage.FTYPE_DEF: return createFTypeDef();
      case BehaviorPackage.FSTRUCT_TYPE: return createFStructType();
      case BehaviorPackage.FUNION_TYPE: return createFUnionType();
      case BehaviorPackage.FEXPRESSION: return createFExpression();
      case BehaviorPackage.FQUALIFIED_ELEMENT_REF: return createFQualifiedElementRef();
      case BehaviorPackage.FDOUBLE_CONSTANT: return createFDoubleConstant();
      case BehaviorPackage.FFLOAT_CONSTANT: return createFFloatConstant();
      case BehaviorPackage.FINTEGER_CONSTANT: return createFIntegerConstant();
      case BehaviorPackage.FBOOLEAN_CONSTANT: return createFBooleanConstant();
      case BehaviorPackage.FSTRING_CONSTANT: return createFStringConstant();
      case BehaviorPackage.FMAP_TYPE: return createFMapType();
      case BehaviorPackage.FFIELD: return createFField();
      case BehaviorPackage.FDECLARATION: return createFDeclaration();
      case BehaviorPackage.FTYPED_ELEMENT: return createFTypedElement();
      case BehaviorPackage.FARGUMENT: return createFArgument();
      case BehaviorPackage.FCONSTANT_DEF: return createFConstantDef();
      case BehaviorPackage.FINITIALIZER_EXPRESSION: return createFInitializerExpression();
      case BehaviorPackage.FINITIALIZER: return createFInitializer();
      case BehaviorPackage.FCOMPOUND_INITIALIZER: return createFCompoundInitializer();
      case BehaviorPackage.FFIELD_INITIALIZER: return createFFieldInitializer();
      case BehaviorPackage.FBRACKET_INITIALIZER: return createFBracketInitializer();
      case BehaviorPackage.FELEMENT_INITIALIZER: return createFElementInitializer();
      case BehaviorPackage.DETAIL_CODE: return createDetailCode();
      case BehaviorPackage.ANNOTATION_BLOCK: return createAnnotationBlock();
      case BehaviorPackage.ANNOTATION: return createAnnotation();
      case BehaviorPackage.IMPORT: return createImport();
      case BehaviorPackage.FBINARY_OPERATION: return createFBinaryOperation();
      case BehaviorPackage.FUNARY_OPERATION: return createFUnaryOperation();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case BehaviorPackage.FBASIC_TYPE_ID:
        return createFBasicTypeIdFromString(eDataType, initialValue);
      case BehaviorPackage.FOPERATOR:
        return createFOperatorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case BehaviorPackage.FBASIC_TYPE_ID:
        return convertFBasicTypeIdToString(eDataType, instanceValue);
      case BehaviorPackage.FOPERATOR:
        return convertFOperatorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorModel createBehaviorModel()
  {
    BehaviorModelImpl behaviorModel = new BehaviorModelImpl();
    return behaviorModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Behavior createBehavior()
  {
    BehaviorImpl behavior = new BehaviorImpl();
    return behavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal createSignal()
  {
    SignalImpl signal = new SignalImpl();
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignalSignature createSignalSignature()
  {
    SignalSignatureImpl signalSignature = new SignalSignatureImpl();
    return signalSignature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventBinding createEventBinding()
  {
    EventBindingImpl eventBinding = new EventBindingImpl();
    return eventBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventTrigger createEventTrigger()
  {
    EventTriggerImpl eventTrigger = new EventTriggerImpl();
    return eventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventOnIf createEventOnIf()
  {
    EventOnIfImpl eventOnIf = new EventOnIfImpl();
    return eventOnIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodSignature createMethodSignature()
  {
    MethodSignatureImpl methodSignature = new MethodSignatureImpl();
    return methodSignature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardOperation createStandardOperation()
  {
    StandardOperationImpl standardOperation = new StandardOperationImpl();
    return standardOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDecl createVarDecl()
  {
    VarDeclImpl varDecl = new VarDeclImpl();
    return varDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RefableType createRefableType()
  {
    RefableTypeImpl refableType = new RefableTypeImpl();
    return refableType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecificationBlock createSpecificationBlock()
  {
    SpecificationBlockImpl specificationBlock = new SpecificationBlockImpl();
    return specificationBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractPair createContractPair()
  {
    ContractPairImpl contractPair = new ContractPairImpl();
    return contractPair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requires createRequires()
  {
    RequiresImpl requires = new RequiresImpl();
    return requires;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ensures createEnsures()
  {
    EnsuresImpl ensures = new EnsuresImpl();
    return ensures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FStateGraph createFStateGraph()
  {
    FStateGraphImpl fStateGraph = new FStateGraphImpl();
    return fStateGraph;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FState createFState()
  {
    FStateImpl fState = new FStateImpl();
    return fState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FTransition createFTransition()
  {
    FTransitionImpl fTransition = new FTransitionImpl();
    return fTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FTrigger createFTrigger()
  {
    FTriggerImpl fTrigger = new FTriggerImpl();
    return fTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FEventOnIf createFEventOnIf()
  {
    FEventOnIfImpl fEventOnIf = new FEventOnIfImpl();
    return fEventOnIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Broadcast createBroadcast()
  {
    BroadcastImpl broadcast = new BroadcastImpl();
    return broadcast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FGuard createFGuard()
  {
    FGuardImpl fGuard = new FGuardImpl();
    return fGuard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FTypeRef createFTypeRef()
  {
    FTypeRefImpl fTypeRef = new FTypeRefImpl();
    return fTypeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FIntegerInterval createFIntegerInterval()
  {
    FIntegerIntervalImpl fIntegerInterval = new FIntegerIntervalImpl();
    return fIntegerInterval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FType createFType()
  {
    FTypeImpl fType = new FTypeImpl();
    return fType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FArrayType createFArrayType()
  {
    FArrayTypeImpl fArrayType = new FArrayTypeImpl();
    return fArrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FTypeDef createFTypeDef()
  {
    FTypeDefImpl fTypeDef = new FTypeDefImpl();
    return fTypeDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FStructType createFStructType()
  {
    FStructTypeImpl fStructType = new FStructTypeImpl();
    return fStructType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FUnionType createFUnionType()
  {
    FUnionTypeImpl fUnionType = new FUnionTypeImpl();
    return fUnionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FExpression createFExpression()
  {
    FExpressionImpl fExpression = new FExpressionImpl();
    return fExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FQualifiedElementRef createFQualifiedElementRef()
  {
    FQualifiedElementRefImpl fQualifiedElementRef = new FQualifiedElementRefImpl();
    return fQualifiedElementRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FDoubleConstant createFDoubleConstant()
  {
    FDoubleConstantImpl fDoubleConstant = new FDoubleConstantImpl();
    return fDoubleConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FFloatConstant createFFloatConstant()
  {
    FFloatConstantImpl fFloatConstant = new FFloatConstantImpl();
    return fFloatConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FIntegerConstant createFIntegerConstant()
  {
    FIntegerConstantImpl fIntegerConstant = new FIntegerConstantImpl();
    return fIntegerConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FBooleanConstant createFBooleanConstant()
  {
    FBooleanConstantImpl fBooleanConstant = new FBooleanConstantImpl();
    return fBooleanConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FStringConstant createFStringConstant()
  {
    FStringConstantImpl fStringConstant = new FStringConstantImpl();
    return fStringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FMapType createFMapType()
  {
    FMapTypeImpl fMapType = new FMapTypeImpl();
    return fMapType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FField createFField()
  {
    FFieldImpl fField = new FFieldImpl();
    return fField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FDeclaration createFDeclaration()
  {
    FDeclarationImpl fDeclaration = new FDeclarationImpl();
    return fDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FTypedElement createFTypedElement()
  {
    FTypedElementImpl fTypedElement = new FTypedElementImpl();
    return fTypedElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FArgument createFArgument()
  {
    FArgumentImpl fArgument = new FArgumentImpl();
    return fArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FConstantDef createFConstantDef()
  {
    FConstantDefImpl fConstantDef = new FConstantDefImpl();
    return fConstantDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FInitializerExpression createFInitializerExpression()
  {
    FInitializerExpressionImpl fInitializerExpression = new FInitializerExpressionImpl();
    return fInitializerExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FInitializer createFInitializer()
  {
    FInitializerImpl fInitializer = new FInitializerImpl();
    return fInitializer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FCompoundInitializer createFCompoundInitializer()
  {
    FCompoundInitializerImpl fCompoundInitializer = new FCompoundInitializerImpl();
    return fCompoundInitializer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FFieldInitializer createFFieldInitializer()
  {
    FFieldInitializerImpl fFieldInitializer = new FFieldInitializerImpl();
    return fFieldInitializer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FBracketInitializer createFBracketInitializer()
  {
    FBracketInitializerImpl fBracketInitializer = new FBracketInitializerImpl();
    return fBracketInitializer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FElementInitializer createFElementInitializer()
  {
    FElementInitializerImpl fElementInitializer = new FElementInitializerImpl();
    return fElementInitializer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DetailCode createDetailCode()
  {
    DetailCodeImpl detailCode = new DetailCodeImpl();
    return detailCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnnotationBlock createAnnotationBlock()
  {
    AnnotationBlockImpl annotationBlock = new AnnotationBlockImpl();
    return annotationBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Annotation createAnnotation()
  {
    AnnotationImpl annotation = new AnnotationImpl();
    return annotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FBinaryOperation createFBinaryOperation()
  {
    FBinaryOperationImpl fBinaryOperation = new FBinaryOperationImpl();
    return fBinaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FUnaryOperation createFUnaryOperation()
  {
    FUnaryOperationImpl fUnaryOperation = new FUnaryOperationImpl();
    return fUnaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FBasicTypeId createFBasicTypeIdFromString(EDataType eDataType, String initialValue)
  {
    FBasicTypeId result = FBasicTypeId.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFBasicTypeIdToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FOperator createFOperatorFromString(EDataType eDataType, String initialValue)
  {
    FOperator result = FOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorPackage getBehaviorPackage()
  {
    return (BehaviorPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BehaviorPackage getPackage()
  {
    return BehaviorPackage.eINSTANCE;
  }

} //BehaviorFactoryImpl
