/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>FOperator</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see de.tu_bs.ccc.contracting.behavior.BehaviorPackage#getFOperator()
 * @model
 * @generated
 */
public enum FOperator implements Enumerator
{
  /**
   * The '<em><b>Or</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OR_VALUE
   * @generated
   * @ordered
   */
  OR(0, "Or", "||"),

  /**
   * The '<em><b>And</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AND_VALUE
   * @generated
   * @ordered
   */
  AND(1, "And", "&&"),

  /**
   * The '<em><b>Equal</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #EQUAL_VALUE
   * @generated
   * @ordered
   */
  EQUAL(2, "Equal", "=="),

  /**
   * The '<em><b>Unequal</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #UNEQUAL_VALUE
   * @generated
   * @ordered
   */
  UNEQUAL(3, "Unequal", "!="),

  /**
   * The '<em><b>Smaller</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SMALLER_VALUE
   * @generated
   * @ordered
   */
  SMALLER(4, "Smaller", "<"),

  /**
   * The '<em><b>Smaller Or Equal</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SMALLER_OR_EQUAL_VALUE
   * @generated
   * @ordered
   */
  SMALLER_OR_EQUAL(5, "SmallerOrEqual", "<="),

  /**
   * The '<em><b>Greater Or Equal</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GREATER_OR_EQUAL_VALUE
   * @generated
   * @ordered
   */
  GREATER_OR_EQUAL(6, "GreaterOrEqual", ">="),

  /**
   * The '<em><b>Greater</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GREATER_VALUE
   * @generated
   * @ordered
   */
  GREATER(7, "Greater", ">"),

  /**
   * The '<em><b>Addition</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ADDITION_VALUE
   * @generated
   * @ordered
   */
  ADDITION(8, "addition", "+"),

  /**
   * The '<em><b>Subtraction</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SUBTRACTION_VALUE
   * @generated
   * @ordered
   */
  SUBTRACTION(9, "subtraction", "-"),

  /**
   * The '<em><b>Multiplication</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MULTIPLICATION_VALUE
   * @generated
   * @ordered
   */
  MULTIPLICATION(10, "multiplication", "*"),

  /**
   * The '<em><b>Division</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIVISION_VALUE
   * @generated
   * @ordered
   */
  DIVISION(11, "division", "/"),

  /**
   * The '<em><b>Negation</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEGATION_VALUE
   * @generated
   * @ordered
   */
  NEGATION(12, "negation", "!");

  /**
   * The '<em><b>Or</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OR
   * @model name="Or" literal="||"
   * @generated
   * @ordered
   */
  public static final int OR_VALUE = 0;

  /**
   * The '<em><b>And</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AND
   * @model name="And" literal="&amp;&amp;"
   * @generated
   * @ordered
   */
  public static final int AND_VALUE = 1;

  /**
   * The '<em><b>Equal</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #EQUAL
   * @model name="Equal" literal="=="
   * @generated
   * @ordered
   */
  public static final int EQUAL_VALUE = 2;

  /**
   * The '<em><b>Unequal</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #UNEQUAL
   * @model name="Unequal" literal="!="
   * @generated
   * @ordered
   */
  public static final int UNEQUAL_VALUE = 3;

  /**
   * The '<em><b>Smaller</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SMALLER
   * @model name="Smaller" literal="&lt;"
   * @generated
   * @ordered
   */
  public static final int SMALLER_VALUE = 4;

  /**
   * The '<em><b>Smaller Or Equal</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SMALLER_OR_EQUAL
   * @model name="SmallerOrEqual" literal="&lt;="
   * @generated
   * @ordered
   */
  public static final int SMALLER_OR_EQUAL_VALUE = 5;

  /**
   * The '<em><b>Greater Or Equal</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GREATER_OR_EQUAL
   * @model name="GreaterOrEqual" literal="&gt;="
   * @generated
   * @ordered
   */
  public static final int GREATER_OR_EQUAL_VALUE = 6;

  /**
   * The '<em><b>Greater</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GREATER
   * @model name="Greater" literal="&gt;"
   * @generated
   * @ordered
   */
  public static final int GREATER_VALUE = 7;

  /**
   * The '<em><b>Addition</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ADDITION
   * @model name="addition" literal="+"
   * @generated
   * @ordered
   */
  public static final int ADDITION_VALUE = 8;

  /**
   * The '<em><b>Subtraction</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SUBTRACTION
   * @model name="subtraction" literal="-"
   * @generated
   * @ordered
   */
  public static final int SUBTRACTION_VALUE = 9;

  /**
   * The '<em><b>Multiplication</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MULTIPLICATION
   * @model name="multiplication" literal="*"
   * @generated
   * @ordered
   */
  public static final int MULTIPLICATION_VALUE = 10;

  /**
   * The '<em><b>Division</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIVISION
   * @model name="division" literal="/"
   * @generated
   * @ordered
   */
  public static final int DIVISION_VALUE = 11;

  /**
   * The '<em><b>Negation</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEGATION
   * @model name="negation" literal="!"
   * @generated
   * @ordered
   */
  public static final int NEGATION_VALUE = 12;

  /**
   * An array of all the '<em><b>FOperator</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final FOperator[] VALUES_ARRAY =
    new FOperator[]
    {
      OR,
      AND,
      EQUAL,
      UNEQUAL,
      SMALLER,
      SMALLER_OR_EQUAL,
      GREATER_OR_EQUAL,
      GREATER,
      ADDITION,
      SUBTRACTION,
      MULTIPLICATION,
      DIVISION,
      NEGATION,
    };

  /**
   * A public read-only list of all the '<em><b>FOperator</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<FOperator> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>FOperator</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static FOperator get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      FOperator result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>FOperator</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static FOperator getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      FOperator result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>FOperator</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static FOperator get(int value)
  {
    switch (value)
    {
      case OR_VALUE: return OR;
      case AND_VALUE: return AND;
      case EQUAL_VALUE: return EQUAL;
      case UNEQUAL_VALUE: return UNEQUAL;
      case SMALLER_VALUE: return SMALLER;
      case SMALLER_OR_EQUAL_VALUE: return SMALLER_OR_EQUAL;
      case GREATER_OR_EQUAL_VALUE: return GREATER_OR_EQUAL;
      case GREATER_VALUE: return GREATER;
      case ADDITION_VALUE: return ADDITION;
      case SUBTRACTION_VALUE: return SUBTRACTION;
      case MULTIPLICATION_VALUE: return MULTIPLICATION;
      case DIVISION_VALUE: return DIVISION;
      case NEGATION_VALUE: return NEGATION;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private FOperator(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //FOperator
