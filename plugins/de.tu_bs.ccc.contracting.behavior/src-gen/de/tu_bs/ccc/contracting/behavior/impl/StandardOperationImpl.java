/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.impl;

import de.tu_bs.ccc.contracting.behavior.AnnotationBlock;
import de.tu_bs.ccc.contracting.behavior.BehaviorPackage;
import de.tu_bs.ccc.contracting.behavior.DetailCode;
import de.tu_bs.ccc.contracting.behavior.FTypeRef;
import de.tu_bs.ccc.contracting.behavior.SpecificationBlock;
import de.tu_bs.ccc.contracting.behavior.StandardOperation;
import de.tu_bs.ccc.contracting.behavior.VarDecl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Standard Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.StandardOperationImpl#getComment <em>Comment</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.StandardOperationImpl#isOverride <em>Override</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.StandardOperationImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.StandardOperationImpl#getArguments <em>Arguments</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.StandardOperationImpl#getReturnType <em>Return Type</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.StandardOperationImpl#isArray <em>Array</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.StandardOperationImpl#getContract <em>Contract</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.StandardOperationImpl#getDetailCode <em>Detail Code</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StandardOperationImpl extends OperationImpl implements StandardOperation
{
  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected AnnotationBlock comment;

  /**
   * The default value of the '{@link #isOverride() <em>Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOverride()
   * @generated
   * @ordered
   */
  protected static final boolean OVERRIDE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOverride() <em>Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOverride()
   * @generated
   * @ordered
   */
  protected boolean override = OVERRIDE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected EList<VarDecl> arguments;

  /**
   * The cached value of the '{@link #getReturnType() <em>Return Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnType()
   * @generated
   * @ordered
   */
  protected FTypeRef returnType;

  /**
   * The default value of the '{@link #isArray() <em>Array</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isArray()
   * @generated
   * @ordered
   */
  protected static final boolean ARRAY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isArray() <em>Array</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isArray()
   * @generated
   * @ordered
   */
  protected boolean array = ARRAY_EDEFAULT;

  /**
   * The cached value of the '{@link #getContract() <em>Contract</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContract()
   * @generated
   * @ordered
   */
  protected SpecificationBlock contract;

  /**
   * The cached value of the '{@link #getDetailCode() <em>Detail Code</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDetailCode()
   * @generated
   * @ordered
   */
  protected DetailCode detailCode;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StandardOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BehaviorPackage.Literals.STANDARD_OPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnnotationBlock getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComment(AnnotationBlock newComment, NotificationChain msgs)
  {
    AnnotationBlock oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__COMMENT, oldComment, newComment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(AnnotationBlock newComment)
  {
    if (newComment != comment)
    {
      NotificationChain msgs = null;
      if (comment != null)
        msgs = ((InternalEObject)comment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.STANDARD_OPERATION__COMMENT, null, msgs);
      if (newComment != null)
        msgs = ((InternalEObject)newComment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.STANDARD_OPERATION__COMMENT, null, msgs);
      msgs = basicSetComment(newComment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__COMMENT, newComment, newComment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOverride()
  {
    return override;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOverride(boolean newOverride)
  {
    boolean oldOverride = override;
    override = newOverride;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__OVERRIDE, oldOverride, override));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarDecl> getArguments()
  {
    if (arguments == null)
    {
      arguments = new EObjectContainmentEList<VarDecl>(VarDecl.class, this, BehaviorPackage.STANDARD_OPERATION__ARGUMENTS);
    }
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FTypeRef getReturnType()
  {
    return returnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnType(FTypeRef newReturnType, NotificationChain msgs)
  {
    FTypeRef oldReturnType = returnType;
    returnType = newReturnType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE, oldReturnType, newReturnType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReturnType(FTypeRef newReturnType)
  {
    if (newReturnType != returnType)
    {
      NotificationChain msgs = null;
      if (returnType != null)
        msgs = ((InternalEObject)returnType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE, null, msgs);
      if (newReturnType != null)
        msgs = ((InternalEObject)newReturnType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE, null, msgs);
      msgs = basicSetReturnType(newReturnType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE, newReturnType, newReturnType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isArray()
  {
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArray(boolean newArray)
  {
    boolean oldArray = array;
    array = newArray;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__ARRAY, oldArray, array));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecificationBlock getContract()
  {
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContract(SpecificationBlock newContract, NotificationChain msgs)
  {
    SpecificationBlock oldContract = contract;
    contract = newContract;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__CONTRACT, oldContract, newContract);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContract(SpecificationBlock newContract)
  {
    if (newContract != contract)
    {
      NotificationChain msgs = null;
      if (contract != null)
        msgs = ((InternalEObject)contract).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.STANDARD_OPERATION__CONTRACT, null, msgs);
      if (newContract != null)
        msgs = ((InternalEObject)newContract).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.STANDARD_OPERATION__CONTRACT, null, msgs);
      msgs = basicSetContract(newContract, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__CONTRACT, newContract, newContract));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DetailCode getDetailCode()
  {
    return detailCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDetailCode(DetailCode newDetailCode, NotificationChain msgs)
  {
    DetailCode oldDetailCode = detailCode;
    detailCode = newDetailCode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE, oldDetailCode, newDetailCode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDetailCode(DetailCode newDetailCode)
  {
    if (newDetailCode != detailCode)
    {
      NotificationChain msgs = null;
      if (detailCode != null)
        msgs = ((InternalEObject)detailCode).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE, null, msgs);
      if (newDetailCode != null)
        msgs = ((InternalEObject)newDetailCode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE, null, msgs);
      msgs = basicSetDetailCode(newDetailCode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE, newDetailCode, newDetailCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BehaviorPackage.STANDARD_OPERATION__COMMENT:
        return basicSetComment(null, msgs);
      case BehaviorPackage.STANDARD_OPERATION__ARGUMENTS:
        return ((InternalEList<?>)getArguments()).basicRemove(otherEnd, msgs);
      case BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE:
        return basicSetReturnType(null, msgs);
      case BehaviorPackage.STANDARD_OPERATION__CONTRACT:
        return basicSetContract(null, msgs);
      case BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE:
        return basicSetDetailCode(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BehaviorPackage.STANDARD_OPERATION__COMMENT:
        return getComment();
      case BehaviorPackage.STANDARD_OPERATION__OVERRIDE:
        return isOverride();
      case BehaviorPackage.STANDARD_OPERATION__NAME:
        return getName();
      case BehaviorPackage.STANDARD_OPERATION__ARGUMENTS:
        return getArguments();
      case BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE:
        return getReturnType();
      case BehaviorPackage.STANDARD_OPERATION__ARRAY:
        return isArray();
      case BehaviorPackage.STANDARD_OPERATION__CONTRACT:
        return getContract();
      case BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE:
        return getDetailCode();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BehaviorPackage.STANDARD_OPERATION__COMMENT:
        setComment((AnnotationBlock)newValue);
        return;
      case BehaviorPackage.STANDARD_OPERATION__OVERRIDE:
        setOverride((Boolean)newValue);
        return;
      case BehaviorPackage.STANDARD_OPERATION__NAME:
        setName((String)newValue);
        return;
      case BehaviorPackage.STANDARD_OPERATION__ARGUMENTS:
        getArguments().clear();
        getArguments().addAll((Collection<? extends VarDecl>)newValue);
        return;
      case BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE:
        setReturnType((FTypeRef)newValue);
        return;
      case BehaviorPackage.STANDARD_OPERATION__ARRAY:
        setArray((Boolean)newValue);
        return;
      case BehaviorPackage.STANDARD_OPERATION__CONTRACT:
        setContract((SpecificationBlock)newValue);
        return;
      case BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE:
        setDetailCode((DetailCode)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.STANDARD_OPERATION__COMMENT:
        setComment((AnnotationBlock)null);
        return;
      case BehaviorPackage.STANDARD_OPERATION__OVERRIDE:
        setOverride(OVERRIDE_EDEFAULT);
        return;
      case BehaviorPackage.STANDARD_OPERATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BehaviorPackage.STANDARD_OPERATION__ARGUMENTS:
        getArguments().clear();
        return;
      case BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE:
        setReturnType((FTypeRef)null);
        return;
      case BehaviorPackage.STANDARD_OPERATION__ARRAY:
        setArray(ARRAY_EDEFAULT);
        return;
      case BehaviorPackage.STANDARD_OPERATION__CONTRACT:
        setContract((SpecificationBlock)null);
        return;
      case BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE:
        setDetailCode((DetailCode)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.STANDARD_OPERATION__COMMENT:
        return comment != null;
      case BehaviorPackage.STANDARD_OPERATION__OVERRIDE:
        return override != OVERRIDE_EDEFAULT;
      case BehaviorPackage.STANDARD_OPERATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BehaviorPackage.STANDARD_OPERATION__ARGUMENTS:
        return arguments != null && !arguments.isEmpty();
      case BehaviorPackage.STANDARD_OPERATION__RETURN_TYPE:
        return returnType != null;
      case BehaviorPackage.STANDARD_OPERATION__ARRAY:
        return array != ARRAY_EDEFAULT;
      case BehaviorPackage.STANDARD_OPERATION__CONTRACT:
        return contract != null;
      case BehaviorPackage.STANDARD_OPERATION__DETAIL_CODE:
        return detailCode != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (override: ");
    result.append(override);
    result.append(", name: ");
    result.append(name);
    result.append(", array: ");
    result.append(array);
    result.append(')');
    return result.toString();
  }

} //StandardOperationImpl
