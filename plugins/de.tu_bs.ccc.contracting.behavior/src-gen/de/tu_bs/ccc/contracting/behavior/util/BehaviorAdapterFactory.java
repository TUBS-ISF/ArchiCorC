/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.util;

import de.tu_bs.ccc.contracting.behavior.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.tu_bs.ccc.contracting.behavior.BehaviorPackage
 * @generated
 */
public class BehaviorAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BehaviorPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BehaviorAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BehaviorPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BehaviorSwitch<Adapter> modelSwitch =
    new BehaviorSwitch<Adapter>()
    {
      @Override
      public Adapter caseBehaviorModel(BehaviorModel object)
      {
        return createBehaviorModelAdapter();
      }
      @Override
      public Adapter caseBehavior(Behavior object)
      {
        return createBehaviorAdapter();
      }
      @Override
      public Adapter caseSignal(Signal object)
      {
        return createSignalAdapter();
      }
      @Override
      public Adapter caseSignalSignature(SignalSignature object)
      {
        return createSignalSignatureAdapter();
      }
      @Override
      public Adapter caseEventBinding(EventBinding object)
      {
        return createEventBindingAdapter();
      }
      @Override
      public Adapter caseEventTrigger(EventTrigger object)
      {
        return createEventTriggerAdapter();
      }
      @Override
      public Adapter caseEventOnIf(EventOnIf object)
      {
        return createEventOnIfAdapter();
      }
      @Override
      public Adapter caseMethodSignature(MethodSignature object)
      {
        return createMethodSignatureAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseStandardOperation(StandardOperation object)
      {
        return createStandardOperationAdapter();
      }
      @Override
      public Adapter caseVarDecl(VarDecl object)
      {
        return createVarDeclAdapter();
      }
      @Override
      public Adapter caseRefableType(RefableType object)
      {
        return createRefableTypeAdapter();
      }
      @Override
      public Adapter caseSpecificationBlock(SpecificationBlock object)
      {
        return createSpecificationBlockAdapter();
      }
      @Override
      public Adapter caseContractPair(ContractPair object)
      {
        return createContractPairAdapter();
      }
      @Override
      public Adapter caseRequires(Requires object)
      {
        return createRequiresAdapter();
      }
      @Override
      public Adapter caseEnsures(Ensures object)
      {
        return createEnsuresAdapter();
      }
      @Override
      public Adapter caseFStateGraph(FStateGraph object)
      {
        return createFStateGraphAdapter();
      }
      @Override
      public Adapter caseFState(FState object)
      {
        return createFStateAdapter();
      }
      @Override
      public Adapter caseFTransition(FTransition object)
      {
        return createFTransitionAdapter();
      }
      @Override
      public Adapter caseFTrigger(FTrigger object)
      {
        return createFTriggerAdapter();
      }
      @Override
      public Adapter caseFEventOnIf(FEventOnIf object)
      {
        return createFEventOnIfAdapter();
      }
      @Override
      public Adapter caseBroadcast(Broadcast object)
      {
        return createBroadcastAdapter();
      }
      @Override
      public Adapter caseFGuard(FGuard object)
      {
        return createFGuardAdapter();
      }
      @Override
      public Adapter caseFTypeRef(FTypeRef object)
      {
        return createFTypeRefAdapter();
      }
      @Override
      public Adapter caseFIntegerInterval(FIntegerInterval object)
      {
        return createFIntegerIntervalAdapter();
      }
      @Override
      public Adapter caseFType(FType object)
      {
        return createFTypeAdapter();
      }
      @Override
      public Adapter caseFArrayType(FArrayType object)
      {
        return createFArrayTypeAdapter();
      }
      @Override
      public Adapter caseFTypeDef(FTypeDef object)
      {
        return createFTypeDefAdapter();
      }
      @Override
      public Adapter caseFStructType(FStructType object)
      {
        return createFStructTypeAdapter();
      }
      @Override
      public Adapter caseFUnionType(FUnionType object)
      {
        return createFUnionTypeAdapter();
      }
      @Override
      public Adapter caseFExpression(FExpression object)
      {
        return createFExpressionAdapter();
      }
      @Override
      public Adapter caseFQualifiedElementRef(FQualifiedElementRef object)
      {
        return createFQualifiedElementRefAdapter();
      }
      @Override
      public Adapter caseFDoubleConstant(FDoubleConstant object)
      {
        return createFDoubleConstantAdapter();
      }
      @Override
      public Adapter caseFFloatConstant(FFloatConstant object)
      {
        return createFFloatConstantAdapter();
      }
      @Override
      public Adapter caseFIntegerConstant(FIntegerConstant object)
      {
        return createFIntegerConstantAdapter();
      }
      @Override
      public Adapter caseFBooleanConstant(FBooleanConstant object)
      {
        return createFBooleanConstantAdapter();
      }
      @Override
      public Adapter caseFStringConstant(FStringConstant object)
      {
        return createFStringConstantAdapter();
      }
      @Override
      public Adapter caseFMapType(FMapType object)
      {
        return createFMapTypeAdapter();
      }
      @Override
      public Adapter caseFField(FField object)
      {
        return createFFieldAdapter();
      }
      @Override
      public Adapter caseFDeclaration(FDeclaration object)
      {
        return createFDeclarationAdapter();
      }
      @Override
      public Adapter caseFTypedElement(FTypedElement object)
      {
        return createFTypedElementAdapter();
      }
      @Override
      public Adapter caseFArgument(FArgument object)
      {
        return createFArgumentAdapter();
      }
      @Override
      public Adapter caseFConstantDef(FConstantDef object)
      {
        return createFConstantDefAdapter();
      }
      @Override
      public Adapter caseFInitializerExpression(FInitializerExpression object)
      {
        return createFInitializerExpressionAdapter();
      }
      @Override
      public Adapter caseFInitializer(FInitializer object)
      {
        return createFInitializerAdapter();
      }
      @Override
      public Adapter caseFCompoundInitializer(FCompoundInitializer object)
      {
        return createFCompoundInitializerAdapter();
      }
      @Override
      public Adapter caseFFieldInitializer(FFieldInitializer object)
      {
        return createFFieldInitializerAdapter();
      }
      @Override
      public Adapter caseFBracketInitializer(FBracketInitializer object)
      {
        return createFBracketInitializerAdapter();
      }
      @Override
      public Adapter caseFElementInitializer(FElementInitializer object)
      {
        return createFElementInitializerAdapter();
      }
      @Override
      public Adapter caseDetailCode(DetailCode object)
      {
        return createDetailCodeAdapter();
      }
      @Override
      public Adapter caseAnnotationBlock(AnnotationBlock object)
      {
        return createAnnotationBlockAdapter();
      }
      @Override
      public Adapter caseAnnotation(Annotation object)
      {
        return createAnnotationAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseFBinaryOperation(FBinaryOperation object)
      {
        return createFBinaryOperationAdapter();
      }
      @Override
      public Adapter caseFUnaryOperation(FUnaryOperation object)
      {
        return createFUnaryOperationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.BehaviorModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.BehaviorModel
   * @generated
   */
  public Adapter createBehaviorModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Behavior <em>Behavior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Behavior
   * @generated
   */
  public Adapter createBehaviorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Signal <em>Signal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Signal
   * @generated
   */
  public Adapter createSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.SignalSignature <em>Signal Signature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.SignalSignature
   * @generated
   */
  public Adapter createSignalSignatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.EventBinding <em>Event Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.EventBinding
   * @generated
   */
  public Adapter createEventBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.EventTrigger <em>Event Trigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.EventTrigger
   * @generated
   */
  public Adapter createEventTriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.EventOnIf <em>Event On If</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.EventOnIf
   * @generated
   */
  public Adapter createEventOnIfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.MethodSignature <em>Method Signature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.MethodSignature
   * @generated
   */
  public Adapter createMethodSignatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.StandardOperation <em>Standard Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.StandardOperation
   * @generated
   */
  public Adapter createStandardOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.VarDecl <em>Var Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.VarDecl
   * @generated
   */
  public Adapter createVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.RefableType <em>Refable Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.RefableType
   * @generated
   */
  public Adapter createRefableTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.SpecificationBlock <em>Specification Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.SpecificationBlock
   * @generated
   */
  public Adapter createSpecificationBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.ContractPair <em>Contract Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.ContractPair
   * @generated
   */
  public Adapter createContractPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Requires <em>Requires</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Requires
   * @generated
   */
  public Adapter createRequiresAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Ensures <em>Ensures</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Ensures
   * @generated
   */
  public Adapter createEnsuresAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FStateGraph <em>FState Graph</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FStateGraph
   * @generated
   */
  public Adapter createFStateGraphAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FState <em>FState</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FState
   * @generated
   */
  public Adapter createFStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FTransition <em>FTransition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FTransition
   * @generated
   */
  public Adapter createFTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FTrigger <em>FTrigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FTrigger
   * @generated
   */
  public Adapter createFTriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FEventOnIf <em>FEvent On If</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FEventOnIf
   * @generated
   */
  public Adapter createFEventOnIfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Broadcast <em>Broadcast</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Broadcast
   * @generated
   */
  public Adapter createBroadcastAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FGuard <em>FGuard</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FGuard
   * @generated
   */
  public Adapter createFGuardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FTypeRef <em>FType Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FTypeRef
   * @generated
   */
  public Adapter createFTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FIntegerInterval <em>FInteger Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FIntegerInterval
   * @generated
   */
  public Adapter createFIntegerIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FType <em>FType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FType
   * @generated
   */
  public Adapter createFTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FArrayType <em>FArray Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FArrayType
   * @generated
   */
  public Adapter createFArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FTypeDef <em>FType Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FTypeDef
   * @generated
   */
  public Adapter createFTypeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FStructType <em>FStruct Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FStructType
   * @generated
   */
  public Adapter createFStructTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FUnionType <em>FUnion Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FUnionType
   * @generated
   */
  public Adapter createFUnionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FExpression <em>FExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FExpression
   * @generated
   */
  public Adapter createFExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FQualifiedElementRef <em>FQualified Element Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FQualifiedElementRef
   * @generated
   */
  public Adapter createFQualifiedElementRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FDoubleConstant <em>FDouble Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FDoubleConstant
   * @generated
   */
  public Adapter createFDoubleConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FFloatConstant <em>FFloat Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FFloatConstant
   * @generated
   */
  public Adapter createFFloatConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FIntegerConstant <em>FInteger Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FIntegerConstant
   * @generated
   */
  public Adapter createFIntegerConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FBooleanConstant <em>FBoolean Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FBooleanConstant
   * @generated
   */
  public Adapter createFBooleanConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FStringConstant <em>FString Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FStringConstant
   * @generated
   */
  public Adapter createFStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FMapType <em>FMap Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FMapType
   * @generated
   */
  public Adapter createFMapTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FField <em>FField</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FField
   * @generated
   */
  public Adapter createFFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FDeclaration <em>FDeclaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FDeclaration
   * @generated
   */
  public Adapter createFDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FTypedElement <em>FTyped Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FTypedElement
   * @generated
   */
  public Adapter createFTypedElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FArgument <em>FArgument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FArgument
   * @generated
   */
  public Adapter createFArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FConstantDef <em>FConstant Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FConstantDef
   * @generated
   */
  public Adapter createFConstantDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FInitializerExpression <em>FInitializer Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FInitializerExpression
   * @generated
   */
  public Adapter createFInitializerExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FInitializer <em>FInitializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FInitializer
   * @generated
   */
  public Adapter createFInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FCompoundInitializer <em>FCompound Initializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FCompoundInitializer
   * @generated
   */
  public Adapter createFCompoundInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FFieldInitializer <em>FField Initializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FFieldInitializer
   * @generated
   */
  public Adapter createFFieldInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FBracketInitializer <em>FBracket Initializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FBracketInitializer
   * @generated
   */
  public Adapter createFBracketInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FElementInitializer <em>FElement Initializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FElementInitializer
   * @generated
   */
  public Adapter createFElementInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.DetailCode <em>Detail Code</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.DetailCode
   * @generated
   */
  public Adapter createDetailCodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.AnnotationBlock <em>Annotation Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.AnnotationBlock
   * @generated
   */
  public Adapter createAnnotationBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Annotation <em>Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Annotation
   * @generated
   */
  public Adapter createAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FBinaryOperation <em>FBinary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FBinaryOperation
   * @generated
   */
  public Adapter createFBinaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.tu_bs.ccc.contracting.behavior.FUnaryOperation <em>FUnary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.tu_bs.ccc.contracting.behavior.FUnaryOperation
   * @generated
   */
  public Adapter createFUnaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BehaviorAdapterFactory
