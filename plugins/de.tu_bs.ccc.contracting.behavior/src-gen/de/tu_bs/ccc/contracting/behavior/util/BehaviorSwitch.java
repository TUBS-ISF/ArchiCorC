/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.util;

import de.tu_bs.ccc.contracting.behavior.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.tu_bs.ccc.contracting.behavior.BehaviorPackage
 * @generated
 */
public class BehaviorSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BehaviorPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BehaviorSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = BehaviorPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case BehaviorPackage.BEHAVIOR_MODEL:
      {
        BehaviorModel behaviorModel = (BehaviorModel)theEObject;
        T result = caseBehaviorModel(behaviorModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.BEHAVIOR:
      {
        Behavior behavior = (Behavior)theEObject;
        T result = caseBehavior(behavior);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.SIGNAL:
      {
        Signal signal = (Signal)theEObject;
        T result = caseSignal(signal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.SIGNAL_SIGNATURE:
      {
        SignalSignature signalSignature = (SignalSignature)theEObject;
        T result = caseSignalSignature(signalSignature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.EVENT_BINDING:
      {
        EventBinding eventBinding = (EventBinding)theEObject;
        T result = caseEventBinding(eventBinding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.EVENT_TRIGGER:
      {
        EventTrigger eventTrigger = (EventTrigger)theEObject;
        T result = caseEventTrigger(eventTrigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.EVENT_ON_IF:
      {
        EventOnIf eventOnIf = (EventOnIf)theEObject;
        T result = caseEventOnIf(eventOnIf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.METHOD_SIGNATURE:
      {
        MethodSignature methodSignature = (MethodSignature)theEObject;
        T result = caseMethodSignature(methodSignature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.STANDARD_OPERATION:
      {
        StandardOperation standardOperation = (StandardOperation)theEObject;
        T result = caseStandardOperation(standardOperation);
        if (result == null) result = caseOperation(standardOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.VAR_DECL:
      {
        VarDecl varDecl = (VarDecl)theEObject;
        T result = caseVarDecl(varDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.REFABLE_TYPE:
      {
        RefableType refableType = (RefableType)theEObject;
        T result = caseRefableType(refableType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.SPECIFICATION_BLOCK:
      {
        SpecificationBlock specificationBlock = (SpecificationBlock)theEObject;
        T result = caseSpecificationBlock(specificationBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.CONTRACT_PAIR:
      {
        ContractPair contractPair = (ContractPair)theEObject;
        T result = caseContractPair(contractPair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.REQUIRES:
      {
        Requires requires = (Requires)theEObject;
        T result = caseRequires(requires);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.ENSURES:
      {
        Ensures ensures = (Ensures)theEObject;
        T result = caseEnsures(ensures);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FSTATE_GRAPH:
      {
        FStateGraph fStateGraph = (FStateGraph)theEObject;
        T result = caseFStateGraph(fStateGraph);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FSTATE:
      {
        FState fState = (FState)theEObject;
        T result = caseFState(fState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FTRANSITION:
      {
        FTransition fTransition = (FTransition)theEObject;
        T result = caseFTransition(fTransition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FTRIGGER:
      {
        FTrigger fTrigger = (FTrigger)theEObject;
        T result = caseFTrigger(fTrigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FEVENT_ON_IF:
      {
        FEventOnIf fEventOnIf = (FEventOnIf)theEObject;
        T result = caseFEventOnIf(fEventOnIf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.BROADCAST:
      {
        Broadcast broadcast = (Broadcast)theEObject;
        T result = caseBroadcast(broadcast);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FGUARD:
      {
        FGuard fGuard = (FGuard)theEObject;
        T result = caseFGuard(fGuard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FTYPE_REF:
      {
        FTypeRef fTypeRef = (FTypeRef)theEObject;
        T result = caseFTypeRef(fTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FINTEGER_INTERVAL:
      {
        FIntegerInterval fIntegerInterval = (FIntegerInterval)theEObject;
        T result = caseFIntegerInterval(fIntegerInterval);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FTYPE:
      {
        FType fType = (FType)theEObject;
        T result = caseFType(fType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FARRAY_TYPE:
      {
        FArrayType fArrayType = (FArrayType)theEObject;
        T result = caseFArrayType(fArrayType);
        if (result == null) result = caseFType(fArrayType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FTYPE_DEF:
      {
        FTypeDef fTypeDef = (FTypeDef)theEObject;
        T result = caseFTypeDef(fTypeDef);
        if (result == null) result = caseFType(fTypeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FSTRUCT_TYPE:
      {
        FStructType fStructType = (FStructType)theEObject;
        T result = caseFStructType(fStructType);
        if (result == null) result = caseFType(fStructType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FUNION_TYPE:
      {
        FUnionType fUnionType = (FUnionType)theEObject;
        T result = caseFUnionType(fUnionType);
        if (result == null) result = caseFType(fUnionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FEXPRESSION:
      {
        FExpression fExpression = (FExpression)theEObject;
        T result = caseFExpression(fExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FQUALIFIED_ELEMENT_REF:
      {
        FQualifiedElementRef fQualifiedElementRef = (FQualifiedElementRef)theEObject;
        T result = caseFQualifiedElementRef(fQualifiedElementRef);
        if (result == null) result = caseFExpression(fQualifiedElementRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FDOUBLE_CONSTANT:
      {
        FDoubleConstant fDoubleConstant = (FDoubleConstant)theEObject;
        T result = caseFDoubleConstant(fDoubleConstant);
        if (result == null) result = caseFExpression(fDoubleConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FFLOAT_CONSTANT:
      {
        FFloatConstant fFloatConstant = (FFloatConstant)theEObject;
        T result = caseFFloatConstant(fFloatConstant);
        if (result == null) result = caseFExpression(fFloatConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FINTEGER_CONSTANT:
      {
        FIntegerConstant fIntegerConstant = (FIntegerConstant)theEObject;
        T result = caseFIntegerConstant(fIntegerConstant);
        if (result == null) result = caseFExpression(fIntegerConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FBOOLEAN_CONSTANT:
      {
        FBooleanConstant fBooleanConstant = (FBooleanConstant)theEObject;
        T result = caseFBooleanConstant(fBooleanConstant);
        if (result == null) result = caseFExpression(fBooleanConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FSTRING_CONSTANT:
      {
        FStringConstant fStringConstant = (FStringConstant)theEObject;
        T result = caseFStringConstant(fStringConstant);
        if (result == null) result = caseFExpression(fStringConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FMAP_TYPE:
      {
        FMapType fMapType = (FMapType)theEObject;
        T result = caseFMapType(fMapType);
        if (result == null) result = caseFType(fMapType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FFIELD:
      {
        FField fField = (FField)theEObject;
        T result = caseFField(fField);
        if (result == null) result = caseFTypedElement(fField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FDECLARATION:
      {
        FDeclaration fDeclaration = (FDeclaration)theEObject;
        T result = caseFDeclaration(fDeclaration);
        if (result == null) result = caseFTypedElement(fDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FTYPED_ELEMENT:
      {
        FTypedElement fTypedElement = (FTypedElement)theEObject;
        T result = caseFTypedElement(fTypedElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FARGUMENT:
      {
        FArgument fArgument = (FArgument)theEObject;
        T result = caseFArgument(fArgument);
        if (result == null) result = caseFTypedElement(fArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FCONSTANT_DEF:
      {
        FConstantDef fConstantDef = (FConstantDef)theEObject;
        T result = caseFConstantDef(fConstantDef);
        if (result == null) result = caseFTypedElement(fConstantDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FINITIALIZER_EXPRESSION:
      {
        FInitializerExpression fInitializerExpression = (FInitializerExpression)theEObject;
        T result = caseFInitializerExpression(fInitializerExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FINITIALIZER:
      {
        FInitializer fInitializer = (FInitializer)theEObject;
        T result = caseFInitializer(fInitializer);
        if (result == null) result = caseFInitializerExpression(fInitializer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FCOMPOUND_INITIALIZER:
      {
        FCompoundInitializer fCompoundInitializer = (FCompoundInitializer)theEObject;
        T result = caseFCompoundInitializer(fCompoundInitializer);
        if (result == null) result = caseFInitializer(fCompoundInitializer);
        if (result == null) result = caseFInitializerExpression(fCompoundInitializer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FFIELD_INITIALIZER:
      {
        FFieldInitializer fFieldInitializer = (FFieldInitializer)theEObject;
        T result = caseFFieldInitializer(fFieldInitializer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FBRACKET_INITIALIZER:
      {
        FBracketInitializer fBracketInitializer = (FBracketInitializer)theEObject;
        T result = caseFBracketInitializer(fBracketInitializer);
        if (result == null) result = caseFInitializer(fBracketInitializer);
        if (result == null) result = caseFInitializerExpression(fBracketInitializer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FELEMENT_INITIALIZER:
      {
        FElementInitializer fElementInitializer = (FElementInitializer)theEObject;
        T result = caseFElementInitializer(fElementInitializer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.DETAIL_CODE:
      {
        DetailCode detailCode = (DetailCode)theEObject;
        T result = caseDetailCode(detailCode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.ANNOTATION_BLOCK:
      {
        AnnotationBlock annotationBlock = (AnnotationBlock)theEObject;
        T result = caseAnnotationBlock(annotationBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.ANNOTATION:
      {
        Annotation annotation = (Annotation)theEObject;
        T result = caseAnnotation(annotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FBINARY_OPERATION:
      {
        FBinaryOperation fBinaryOperation = (FBinaryOperation)theEObject;
        T result = caseFBinaryOperation(fBinaryOperation);
        if (result == null) result = caseFExpression(fBinaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BehaviorPackage.FUNARY_OPERATION:
      {
        FUnaryOperation fUnaryOperation = (FUnaryOperation)theEObject;
        T result = caseFUnaryOperation(fUnaryOperation);
        if (result == null) result = caseFExpression(fUnaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorModel(BehaviorModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehavior(Behavior object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignal(Signal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal Signature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal Signature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignalSignature(SignalSignature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Binding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Binding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventBinding(EventBinding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventTrigger(EventTrigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event On If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event On If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventOnIf(EventOnIf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Signature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Signature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodSignature(MethodSignature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Standard Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Standard Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStandardOperation(StandardOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDecl(VarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Refable Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Refable Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefableType(RefableType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Specification Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Specification Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecificationBlock(SpecificationBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractPair(ContractPair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Requires</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Requires</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequires(Requires object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ensures</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ensures</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnsures(Ensures object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FState Graph</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FState Graph</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFStateGraph(FStateGraph object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FState</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FState</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFState(FState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FTransition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FTransition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFTransition(FTransition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FTrigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FTrigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFTrigger(FTrigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FEvent On If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FEvent On If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFEventOnIf(FEventOnIf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Broadcast</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Broadcast</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBroadcast(Broadcast object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FGuard</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FGuard</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFGuard(FGuard object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FType Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FType Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFTypeRef(FTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FInteger Interval</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FInteger Interval</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFIntegerInterval(FIntegerInterval object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FType</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FType</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFType(FType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FArray Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FArray Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFArrayType(FArrayType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FType Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FType Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFTypeDef(FTypeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FStruct Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FStruct Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFStructType(FStructType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FUnion Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FUnion Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFUnionType(FUnionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FExpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FExpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFExpression(FExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FQualified Element Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FQualified Element Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFQualifiedElementRef(FQualifiedElementRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FDouble Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FDouble Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFDoubleConstant(FDoubleConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FFloat Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FFloat Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFFloatConstant(FFloatConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FInteger Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FInteger Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFIntegerConstant(FIntegerConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FBoolean Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FBoolean Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFBooleanConstant(FBooleanConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FString Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FString Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFStringConstant(FStringConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FMap Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FMap Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFMapType(FMapType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FField</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FField</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFField(FField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FDeclaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FDeclaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFDeclaration(FDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FTyped Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FTyped Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFTypedElement(FTypedElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FArgument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FArgument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFArgument(FArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FConstant Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FConstant Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFConstantDef(FConstantDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FInitializer Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FInitializer Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFInitializerExpression(FInitializerExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FInitializer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FInitializer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFInitializer(FInitializer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FCompound Initializer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FCompound Initializer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFCompoundInitializer(FCompoundInitializer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FField Initializer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FField Initializer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFFieldInitializer(FFieldInitializer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FBracket Initializer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FBracket Initializer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFBracketInitializer(FBracketInitializer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FElement Initializer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FElement Initializer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFElementInitializer(FElementInitializer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Detail Code</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Detail Code</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDetailCode(DetailCode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationBlock(AnnotationBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotation(Annotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FBinary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FBinary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFBinaryOperation(FBinaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FUnary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FUnary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFUnaryOperation(FUnaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //BehaviorSwitch
