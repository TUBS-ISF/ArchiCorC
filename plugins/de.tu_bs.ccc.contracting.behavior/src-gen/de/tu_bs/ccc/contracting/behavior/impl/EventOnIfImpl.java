/**
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.behavior.impl;

import de.tu_bs.ccc.contracting.behavior.BehaviorPackage;
import de.tu_bs.ccc.contracting.behavior.EventOnIf;
import de.tu_bs.ccc.contracting.behavior.FExpression;
import de.tu_bs.ccc.contracting.behavior.MethodSignature;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event On If</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.EventOnIfImpl#getFreq <em>Freq</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.EventOnIfImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.EventOnIfImpl#getCall <em>Call</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.EventOnIfImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link de.tu_bs.ccc.contracting.behavior.impl.EventOnIfImpl#getSignal <em>Signal</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventOnIfImpl extends MinimalEObjectImpl.Container implements EventOnIf
{
  /**
   * The default value of the '{@link #getFreq() <em>Freq</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFreq()
   * @generated
   * @ordered
   */
  protected static final int FREQ_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getFreq() <em>Freq</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFreq()
   * @generated
   * @ordered
   */
  protected int freq = FREQ_EDEFAULT;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected FExpression condition;

  /**
   * The cached value of the '{@link #getCall() <em>Call</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCall()
   * @generated
   * @ordered
   */
  protected MethodSignature call;

  /**
   * The default value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected static final String EVENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected String event = EVENT_EDEFAULT;

  /**
   * The default value of the '{@link #getSignal() <em>Signal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignal()
   * @generated
   * @ordered
   */
  protected static final String SIGNAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSignal() <em>Signal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignal()
   * @generated
   * @ordered
   */
  protected String signal = SIGNAL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventOnIfImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BehaviorPackage.Literals.EVENT_ON_IF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getFreq()
  {
    return freq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFreq(int newFreq)
  {
    int oldFreq = freq;
    freq = newFreq;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.EVENT_ON_IF__FREQ, oldFreq, freq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FExpression getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(FExpression newCondition, NotificationChain msgs)
  {
    FExpression oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.EVENT_ON_IF__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(FExpression newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.EVENT_ON_IF__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.EVENT_ON_IF__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.EVENT_ON_IF__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodSignature getCall()
  {
    return call;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCall(MethodSignature newCall, NotificationChain msgs)
  {
    MethodSignature oldCall = call;
    call = newCall;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.EVENT_ON_IF__CALL, oldCall, newCall);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCall(MethodSignature newCall)
  {
    if (newCall != call)
    {
      NotificationChain msgs = null;
      if (call != null)
        msgs = ((InternalEObject)call).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.EVENT_ON_IF__CALL, null, msgs);
      if (newCall != null)
        msgs = ((InternalEObject)newCall).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.EVENT_ON_IF__CALL, null, msgs);
      msgs = basicSetCall(newCall, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.EVENT_ON_IF__CALL, newCall, newCall));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvent(String newEvent)
  {
    String oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.EVENT_ON_IF__EVENT, oldEvent, event));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSignal()
  {
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignal(String newSignal)
  {
    String oldSignal = signal;
    signal = newSignal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.EVENT_ON_IF__SIGNAL, oldSignal, signal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BehaviorPackage.EVENT_ON_IF__CONDITION:
        return basicSetCondition(null, msgs);
      case BehaviorPackage.EVENT_ON_IF__CALL:
        return basicSetCall(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BehaviorPackage.EVENT_ON_IF__FREQ:
        return getFreq();
      case BehaviorPackage.EVENT_ON_IF__CONDITION:
        return getCondition();
      case BehaviorPackage.EVENT_ON_IF__CALL:
        return getCall();
      case BehaviorPackage.EVENT_ON_IF__EVENT:
        return getEvent();
      case BehaviorPackage.EVENT_ON_IF__SIGNAL:
        return getSignal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BehaviorPackage.EVENT_ON_IF__FREQ:
        setFreq((Integer)newValue);
        return;
      case BehaviorPackage.EVENT_ON_IF__CONDITION:
        setCondition((FExpression)newValue);
        return;
      case BehaviorPackage.EVENT_ON_IF__CALL:
        setCall((MethodSignature)newValue);
        return;
      case BehaviorPackage.EVENT_ON_IF__EVENT:
        setEvent((String)newValue);
        return;
      case BehaviorPackage.EVENT_ON_IF__SIGNAL:
        setSignal((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.EVENT_ON_IF__FREQ:
        setFreq(FREQ_EDEFAULT);
        return;
      case BehaviorPackage.EVENT_ON_IF__CONDITION:
        setCondition((FExpression)null);
        return;
      case BehaviorPackage.EVENT_ON_IF__CALL:
        setCall((MethodSignature)null);
        return;
      case BehaviorPackage.EVENT_ON_IF__EVENT:
        setEvent(EVENT_EDEFAULT);
        return;
      case BehaviorPackage.EVENT_ON_IF__SIGNAL:
        setSignal(SIGNAL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BehaviorPackage.EVENT_ON_IF__FREQ:
        return freq != FREQ_EDEFAULT;
      case BehaviorPackage.EVENT_ON_IF__CONDITION:
        return condition != null;
      case BehaviorPackage.EVENT_ON_IF__CALL:
        return call != null;
      case BehaviorPackage.EVENT_ON_IF__EVENT:
        return EVENT_EDEFAULT == null ? event != null : !EVENT_EDEFAULT.equals(event);
      case BehaviorPackage.EVENT_ON_IF__SIGNAL:
        return SIGNAL_EDEFAULT == null ? signal != null : !SIGNAL_EDEFAULT.equals(signal);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (freq: ");
    result.append(freq);
    result.append(", event: ");
    result.append(event);
    result.append(", signal: ");
    result.append(signal);
    result.append(')');
    return result.toString();
  }

} //EventOnIfImpl
