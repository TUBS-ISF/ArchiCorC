/*
 * generated by Xtext 2.20.0
 */
package de.tu_bs.ccc.contracting.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BehaviorGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BehaviorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.BehaviorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFQNParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cBehaviorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_4_0 = (RuleCall)cBehaviorsAssignment_4.eContents().get(0);
		
		//BehaviorModel:
		//	{BehaviorModel}
		//	'package' name=FQN
		//	imports+=Import*
		//	behaviors+=Behavior*;
		@Override public ParserRule getRule() { return rule; }
		
		//{BehaviorModel} 'package' name=FQN imports+=Import* behaviors+=Behavior*
		public Group getGroup() { return cGroup; }
		
		//{BehaviorModel}
		public Action getBehaviorModelAction_0() { return cBehaviorModelAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=FQN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_2_0() { return cNameFQNParserRuleCall_2_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//behaviors+=Behavior*
		public Assignment getBehaviorsAssignment_4() { return cBehaviorsAssignment_4; }
		
		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_4_0() { return cBehaviorsBehaviorParserRuleCall_4_0; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Keyword cBehaviorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cComponentNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cComponentNameIDTerminalRuleCall_4_1_0 = (RuleCall)cComponentNameAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVarsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Assignment cVariablesAssignment_6_2_0 = (Assignment)cGroup_6_2.eContents().get(0);
		private final RuleCall cVariablesFDeclarationParserRuleCall_6_2_0_0 = (RuleCall)cVariablesAssignment_6_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2_1 = (Keyword)cGroup_6_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEventsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Assignment cEventsAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final RuleCall cEventsEventBindingParserRuleCall_7_2_0_0 = (RuleCall)cEventsAssignment_7_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_2_1 = (Keyword)cGroup_7_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cSignalsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Assignment cSignalsAssignment_8_2_0 = (Assignment)cGroup_8_2.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_8_2_0_0 = (RuleCall)cSignalsAssignment_8_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_2_1 = (Keyword)cGroup_8_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cOperationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOperationsStandardOperationParserRuleCall_9_0 = (RuleCall)cOperationsAssignment_9.eContents().get(0);
		private final Keyword cFSMKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNameAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNameIDTerminalRuleCall_11_0 = (RuleCall)cNameAssignment_11.eContents().get(0);
		private final Assignment cStateGraphsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cStateGraphsFStateGraphParserRuleCall_12_0 = (RuleCall)cStateGraphsAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Behavior:
		//	{Behavior} comment=AnnotationBlock?
		//	'Behavior' name=ID? ('implements' componentName=ID)?
		//	'{' ('vars' '{' (variables+=FDeclaration ';'?)* '}')? ('events' '{' (events+=EventBinding ';'?)* '}')? ('signals' '{'
		//	(signals+=Signal ';'?)* '}')?
		//	operations+=StandardOperation*
		//	'FSM' name=ID? stateGraphs+=FStateGraph*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Behavior} comment=AnnotationBlock? 'Behavior' name=ID? ('implements' componentName=ID)? '{' ('vars' '{'
		//(variables+=FDeclaration ';'?)* '}')? ('events' '{' (events+=EventBinding ';'?)* '}')? ('signals' '{' (signals+=Signal
		//';'?)* '}')? operations+=StandardOperation* 'FSM' name=ID? stateGraphs+=FStateGraph* '}'
		public Group getGroup() { return cGroup; }
		
		//{Behavior}
		public Action getBehaviorAction_0() { return cBehaviorAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//'Behavior'
		public Keyword getBehaviorKeyword_2() { return cBehaviorKeyword_2; }
		
		//name=ID?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('implements' componentName=ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'implements'
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }
		
		//componentName=ID
		public Assignment getComponentNameAssignment_4_1() { return cComponentNameAssignment_4_1; }
		
		//ID
		public RuleCall getComponentNameIDTerminalRuleCall_4_1_0() { return cComponentNameIDTerminalRuleCall_4_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('vars' '{' (variables+=FDeclaration ';'?)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'vars'
		public Keyword getVarsKeyword_6_0() { return cVarsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//(variables+=FDeclaration ';'?)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//variables+=FDeclaration
		public Assignment getVariablesAssignment_6_2_0() { return cVariablesAssignment_6_2_0; }
		
		//FDeclaration
		public RuleCall getVariablesFDeclarationParserRuleCall_6_2_0_0() { return cVariablesFDeclarationParserRuleCall_6_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_6_2_1() { return cSemicolonKeyword_6_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('events' '{' (events+=EventBinding ';'?)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'events'
		public Keyword getEventsKeyword_7_0() { return cEventsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//(events+=EventBinding ';'?)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//events+=EventBinding
		public Assignment getEventsAssignment_7_2_0() { return cEventsAssignment_7_2_0; }
		
		//EventBinding
		public RuleCall getEventsEventBindingParserRuleCall_7_2_0_0() { return cEventsEventBindingParserRuleCall_7_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7_2_1() { return cSemicolonKeyword_7_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//('signals' '{' (signals+=Signal ';'?)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'signals'
		public Keyword getSignalsKeyword_8_0() { return cSignalsKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//(signals+=Signal ';'?)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//signals+=Signal
		public Assignment getSignalsAssignment_8_2_0() { return cSignalsAssignment_8_2_0; }
		
		//Signal
		public RuleCall getSignalsSignalParserRuleCall_8_2_0_0() { return cSignalsSignalParserRuleCall_8_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_8_2_1() { return cSemicolonKeyword_8_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//operations+=StandardOperation*
		public Assignment getOperationsAssignment_9() { return cOperationsAssignment_9; }
		
		//StandardOperation
		public RuleCall getOperationsStandardOperationParserRuleCall_9_0() { return cOperationsStandardOperationParserRuleCall_9_0; }
		
		//'FSM'
		public Keyword getFSMKeyword_10() { return cFSMKeyword_10; }
		
		//name=ID?
		public Assignment getNameAssignment_11() { return cNameAssignment_11; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_11_0() { return cNameIDTerminalRuleCall_11_0; }
		
		//stateGraphs+=FStateGraph*
		public Assignment getStateGraphsAssignment_12() { return cStateGraphsAssignment_12; }
		
		//FStateGraph
		public RuleCall getStateGraphsFStateGraphParserRuleCall_12_0() { return cStateGraphsFStateGraphParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignalSignalSignatureParserRuleCall_2_0 = (RuleCall)cSignalAssignment_2.eContents().get(0);
		
		//Signal:
		//	{Signal} comment=AnnotationBlock?
		//	signal=SignalSignature;
		@Override public ParserRule getRule() { return rule; }
		
		//{Signal} comment=AnnotationBlock? signal=SignalSignature
		public Group getGroup() { return cGroup; }
		
		//{Signal}
		public Action getSignalAction_0() { return cSignalAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//signal=SignalSignature
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }
		
		//SignalSignature
		public RuleCall getSignalSignalSignatureParserRuleCall_2_0() { return cSignalSignalSignatureParserRuleCall_2_0; }
	}
	public class SignalSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.SignalSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cArgumentsVarDeclParserRuleCall_1_1_0_0 = (RuleCall)cArgumentsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cArgumentsVarDeclParserRuleCall_1_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SignalSignature:
		//	name=ID ('(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(arguments+=VarDecl (',' arguments+=VarDecl)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//arguments+=VarDecl
		public Assignment getArgumentsAssignment_1_1_0() { return cArgumentsAssignment_1_1_0; }
		
		//VarDecl
		public RuleCall getArgumentsVarDeclParserRuleCall_1_1_0_0() { return cArgumentsVarDeclParserRuleCall_1_1_0_0; }
		
		//(',' arguments+=VarDecl)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//arguments+=VarDecl
		public Assignment getArgumentsAssignment_1_1_1_1() { return cArgumentsAssignment_1_1_1_1; }
		
		//VarDecl
		public RuleCall getArgumentsVarDeclParserRuleCall_1_1_1_1_0() { return cArgumentsVarDeclParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class EventBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.EventBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventBindingAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerEventTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToEventParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		
		//EventBinding:
		//	{EventBinding} comment=AnnotationBlock?
		//	'on' trigger=EventTrigger
		//	'->' to=Event;
		@Override public ParserRule getRule() { return rule; }
		
		//{EventBinding} comment=AnnotationBlock? 'on' trigger=EventTrigger '->' to=Event
		public Group getGroup() { return cGroup; }
		
		//{EventBinding}
		public Action getEventBindingAction_0() { return cEventBindingAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//trigger=EventTrigger
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }
		
		//EventTrigger
		public RuleCall getTriggerEventTriggerParserRuleCall_3_0() { return cTriggerEventTriggerParserRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//to=Event
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//Event
		public RuleCall getToEventParserRuleCall_5_0() { return cToEventParserRuleCall_5_0; }
	}
	public class EventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.EventTrigger");
		private final Assignment cEventAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventEventOnIfParserRuleCall_0 = (RuleCall)cEventAssignment.eContents().get(0);
		
		//EventTrigger:
		//	event=EventOnIf;
		@Override public ParserRule getRule() { return rule; }
		
		//event=EventOnIf
		public Assignment getEventAssignment() { return cEventAssignment; }
		
		//EventOnIf
		public RuleCall getEventEventOnIfParserRuleCall_0() { return cEventEventOnIfParserRuleCall_0; }
	}
	public class EventOnIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.EventOnIf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTimeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFreqAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFreqINTTerminalRuleCall_0_1_0 = (RuleCall)cFreqAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConditionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionLogicalOrExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCallKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCallAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCallMethodSignatureParserRuleCall_2_1_0 = (RuleCall)cCallAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cEventKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEventAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEventFQNParserRuleCall_3_1_0 = (RuleCall)cEventAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cSignalKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSignalAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSignalIDTerminalRuleCall_4_1_0 = (RuleCall)cSignalAssignment_4_1.eContents().get(0);
		
		//EventOnIf:
		//	'time' freq=INT | 'condition' condition=LogicalOrExpression | 'call' call=MethodSignature | 'event' event=FQN |
		//	'signal' signal=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'time' freq=INT | 'condition' condition=LogicalOrExpression | 'call' call=MethodSignature | 'event' event=FQN | 'signal'
		//signal=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'time' freq=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'time'
		public Keyword getTimeKeyword_0_0() { return cTimeKeyword_0_0; }
		
		//freq=INT
		public Assignment getFreqAssignment_0_1() { return cFreqAssignment_0_1; }
		
		//INT
		public RuleCall getFreqINTTerminalRuleCall_0_1_0() { return cFreqINTTerminalRuleCall_0_1_0; }
		
		//'condition' condition=LogicalOrExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//'condition'
		public Keyword getConditionKeyword_1_0() { return cConditionKeyword_1_0; }
		
		//condition=LogicalOrExpression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//LogicalOrExpression
		public RuleCall getConditionLogicalOrExpressionParserRuleCall_1_1_0() { return cConditionLogicalOrExpressionParserRuleCall_1_1_0; }
		
		//'call' call=MethodSignature
		public Group getGroup_2() { return cGroup_2; }
		
		//'call'
		public Keyword getCallKeyword_2_0() { return cCallKeyword_2_0; }
		
		//call=MethodSignature
		public Assignment getCallAssignment_2_1() { return cCallAssignment_2_1; }
		
		//MethodSignature
		public RuleCall getCallMethodSignatureParserRuleCall_2_1_0() { return cCallMethodSignatureParserRuleCall_2_1_0; }
		
		//'event' event=FQN
		public Group getGroup_3() { return cGroup_3; }
		
		//'event'
		public Keyword getEventKeyword_3_0() { return cEventKeyword_3_0; }
		
		//event=FQN
		public Assignment getEventAssignment_3_1() { return cEventAssignment_3_1; }
		
		//FQN
		public RuleCall getEventFQNParserRuleCall_3_1_0() { return cEventFQNParserRuleCall_3_1_0; }
		
		//'signal' signal=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//'signal'
		public Keyword getSignalKeyword_4_0() { return cSignalKeyword_4_0; }
		
		//signal=ID
		public Assignment getSignalAssignment_4_1() { return cSignalAssignment_4_1; }
		
		//ID
		public RuleCall getSignalIDTerminalRuleCall_4_1_0() { return cSignalIDTerminalRuleCall_4_1_0; }
	}
	public class MethodSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.MethodSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFQNParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsVarDeclParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsVarDeclParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cVoidKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cReturnTypeRefableTypeParserRuleCall_4_1_1_0 = (RuleCall)cReturnTypeAssignment_4_1_1.eContents().get(0);
		
		//MethodSignature:
		//	name=FQN '(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')' (':' ('void' | returnType=RefableType))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=FQN '(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')' (':' ('void' | returnType=RefableType))?
		public Group getGroup() { return cGroup; }
		
		//name=FQN
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_0_0() { return cNameFQNParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(arguments+=VarDecl (',' arguments+=VarDecl)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=VarDecl
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//VarDecl
		public RuleCall getArgumentsVarDeclParserRuleCall_2_0_0() { return cArgumentsVarDeclParserRuleCall_2_0_0; }
		
		//(',' arguments+=VarDecl)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=VarDecl
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//VarDecl
		public RuleCall getArgumentsVarDeclParserRuleCall_2_1_1_0() { return cArgumentsVarDeclParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(':' ('void' | returnType=RefableType))?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//('void' | returnType=RefableType)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//'void'
		public Keyword getVoidKeyword_4_1_0() { return cVoidKeyword_4_1_0; }
		
		//returnType=RefableType
		public Assignment getReturnTypeAssignment_4_1_1() { return cReturnTypeAssignment_4_1_1; }
		
		//RefableType
		public RuleCall getReturnTypeRefableTypeParserRuleCall_4_1_1_0() { return cReturnTypeRefableTypeParserRuleCall_4_1_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsIDTerminalRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsIDTerminalRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Event:
		//	name=ID ('(' arguments+=ID (',' arguments+=ID)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' arguments+=ID (',' arguments+=ID)* ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' arguments+=ID (',' arguments+=ID)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//arguments+=ID
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }
		
		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_1_1_0() { return cArgumentsIDTerminalRuleCall_1_1_0; }
		
		//(',' arguments+=ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//arguments+=ID
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }
		
		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_1_2_1_0() { return cArgumentsIDTerminalRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Operation");
		private final RuleCall cStandardOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Operation:
		//	StandardOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardOperation
		public RuleCall getStandardOperationParserRuleCall() { return cStandardOperationParserRuleCall; }
	}
	public class StandardOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.StandardOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cOverrideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_1_0 = (Keyword)cOverrideAssignment_1.eContents().get(0);
		private final Keyword cOperationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArgumentsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cArgumentsVarDeclParserRuleCall_5_0_0 = (RuleCall)cArgumentsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cArgumentsVarDeclParserRuleCall_5_1_1_0 = (RuleCall)cArgumentsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Keyword cVoidKeyword_7_1_0 = (Keyword)cAlternatives_7_1.eContents().get(0);
		private final Group cGroup_7_1_1 = (Group)cAlternatives_7_1.eContents().get(1);
		private final Assignment cReturnTypeAssignment_7_1_1_0 = (Assignment)cGroup_7_1_1.eContents().get(0);
		private final RuleCall cReturnTypeFTypeRefParserRuleCall_7_1_1_0_0 = (RuleCall)cReturnTypeAssignment_7_1_1_0.eContents().get(0);
		private final Group cGroup_7_1_1_1 = (Group)cGroup_7_1_1.eContents().get(1);
		private final Assignment cArrayAssignment_7_1_1_1_0 = (Assignment)cGroup_7_1_1_1.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_7_1_1_1_0_0 = (Keyword)cArrayAssignment_7_1_1_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_1_1_1_1 = (Keyword)cGroup_7_1_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cContractAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cContractSpecificationBlockParserRuleCall_9_0 = (RuleCall)cContractAssignment_9.eContents().get(0);
		private final Assignment cDetailCodeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDetailCodeDetailCodeParserRuleCall_10_0 = (RuleCall)cDetailCodeAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		////| PortOperation;
		//StandardOperation:
		//	comment=AnnotationBlock?
		//	override?='override'? 'Operation' name=ID '(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')' (':' ('void' |
		//	returnType=FTypeRef (array?='[' ']')?))?
		//	'{' contract=SpecificationBlock detailCode=DetailCode '}';
		@Override public ParserRule getRule() { return rule; }
		
		//comment=AnnotationBlock? override?='override'? 'Operation' name=ID '(' (arguments+=VarDecl (',' arguments+=VarDecl)*)?
		//')' (':' ('void' | returnType=FTypeRef (array?='[' ']')?))? '{' contract=SpecificationBlock detailCode=DetailCode '}'
		public Group getGroup() { return cGroup; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_0_0() { return cCommentAnnotationBlockParserRuleCall_0_0; }
		
		//override?='override'?
		public Assignment getOverrideAssignment_1() { return cOverrideAssignment_1; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_1_0() { return cOverrideOverrideKeyword_1_0; }
		
		//'Operation'
		public Keyword getOperationKeyword_2() { return cOperationKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(arguments+=VarDecl (',' arguments+=VarDecl)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//arguments+=VarDecl
		public Assignment getArgumentsAssignment_5_0() { return cArgumentsAssignment_5_0; }
		
		//VarDecl
		public RuleCall getArgumentsVarDeclParserRuleCall_5_0_0() { return cArgumentsVarDeclParserRuleCall_5_0_0; }
		
		//(',' arguments+=VarDecl)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//arguments+=VarDecl
		public Assignment getArgumentsAssignment_5_1_1() { return cArgumentsAssignment_5_1_1; }
		
		//VarDecl
		public RuleCall getArgumentsVarDeclParserRuleCall_5_1_1_0() { return cArgumentsVarDeclParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//(':' ('void' | returnType=FTypeRef (array?='[' ']')?))?
		public Group getGroup_7() { return cGroup_7; }
		
		//':'
		public Keyword getColonKeyword_7_0() { return cColonKeyword_7_0; }
		
		//('void' | returnType=FTypeRef (array?='[' ']')?)
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }
		
		//'void'
		public Keyword getVoidKeyword_7_1_0() { return cVoidKeyword_7_1_0; }
		
		//returnType=FTypeRef (array?='[' ']')?
		public Group getGroup_7_1_1() { return cGroup_7_1_1; }
		
		//returnType=FTypeRef
		public Assignment getReturnTypeAssignment_7_1_1_0() { return cReturnTypeAssignment_7_1_1_0; }
		
		//FTypeRef
		public RuleCall getReturnTypeFTypeRefParserRuleCall_7_1_1_0_0() { return cReturnTypeFTypeRefParserRuleCall_7_1_1_0_0; }
		
		//(array?='[' ']')?
		public Group getGroup_7_1_1_1() { return cGroup_7_1_1_1; }
		
		//array?='['
		public Assignment getArrayAssignment_7_1_1_1_0() { return cArrayAssignment_7_1_1_1_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_7_1_1_1_0_0() { return cArrayLeftSquareBracketKeyword_7_1_1_1_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_1_1_1_1() { return cRightSquareBracketKeyword_7_1_1_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//contract=SpecificationBlock
		public Assignment getContractAssignment_9() { return cContractAssignment_9; }
		
		//SpecificationBlock
		public RuleCall getContractSpecificationBlockParserRuleCall_9_0() { return cContractSpecificationBlockParserRuleCall_9_0; }
		
		//detailCode=DetailCode
		public Assignment getDetailCodeAssignment_10() { return cDetailCodeAssignment_10; }
		
		//DetailCode
		public RuleCall getDetailCodeDetailCodeParserRuleCall_10_0() { return cDetailCodeDetailCodeParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefTypeFTypeRefParserRuleCall_2_0 = (RuleCall)cRefTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_3_0_0 = (Keyword)cArrayAssignment_3_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cVarargsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cVarargsVarargsKeyword_4_0 = (Keyword)cVarargsAssignment_4.eContents().get(0);
		
		//VarDecl:
		//	name=ID ':' refType=FTypeRef (array?='[' ']')? varargs?='varargs'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' refType=FTypeRef (array?='[' ']')? varargs?='varargs'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//refType=FTypeRef
		public Assignment getRefTypeAssignment_2() { return cRefTypeAssignment_2; }
		
		//FTypeRef
		public RuleCall getRefTypeFTypeRefParserRuleCall_2_0() { return cRefTypeFTypeRefParserRuleCall_2_0; }
		
		//(array?='[' ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//array?='['
		public Assignment getArrayAssignment_3_0() { return cArrayAssignment_3_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_3_0_0() { return cArrayLeftSquareBracketKeyword_3_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1() { return cRightSquareBracketKeyword_3_1; }
		
		//varargs?='varargs'?
		public Assignment getVarargsAssignment_4() { return cVarargsAssignment_4; }
		
		//'varargs'
		public Keyword getVarargsVarargsKeyword_4_0() { return cVarargsVarargsKeyword_4_0; }
	}
	public class RefableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.RefableType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeFTypeRefCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeFTypeRefFQNParserRuleCall_0_0_1 = (RuleCall)cTypeFTypeRefCrossReference_0_0.eContents().get(1);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRefRefKeyword_1_0 = (Keyword)cRefAssignment_1.eContents().get(0);
		
		//RefableType:
		//	type=[FTypeRef|FQN] ref?='ref'?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[FTypeRef|FQN] ref?='ref'?
		public Group getGroup() { return cGroup; }
		
		//type=[FTypeRef|FQN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[FTypeRef|FQN]
		public CrossReference getTypeFTypeRefCrossReference_0_0() { return cTypeFTypeRefCrossReference_0_0; }
		
		//FQN
		public RuleCall getTypeFTypeRefFQNParserRuleCall_0_0_1() { return cTypeFTypeRefFQNParserRuleCall_0_0_1; }
		
		//ref?='ref'?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//'ref'
		public Keyword getRefRefKeyword_1_0() { return cRefRefKeyword_1_0; }
	}
	public class SpecificationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.SpecificationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Keyword cContractKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContractsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContractsContractPairParserRuleCall_4_0 = (RuleCall)cContractsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAlsoKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cContractsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cContractsContractPairParserRuleCall_5_1_0 = (RuleCall)cContractsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// specifications
		//SpecificationBlock:
		//	{SpecificationBlock} comment=AnnotationBlock?
		//	'contract' '{'
		//	contracts+=ContractPair ('also'
		//	contracts+=ContractPair)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SpecificationBlock} comment=AnnotationBlock? 'contract' '{' contracts+=ContractPair ('also' contracts+=ContractPair)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{SpecificationBlock}
		public Action getSpecificationBlockAction_0() { return cSpecificationBlockAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//'contract'
		public Keyword getContractKeyword_2() { return cContractKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//contracts+=ContractPair
		public Assignment getContractsAssignment_4() { return cContractsAssignment_4; }
		
		//ContractPair
		public RuleCall getContractsContractPairParserRuleCall_4_0() { return cContractsContractPairParserRuleCall_4_0; }
		
		//('also' contracts+=ContractPair)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'also'
		public Keyword getAlsoKeyword_5_0() { return cAlsoKeyword_5_0; }
		
		//contracts+=ContractPair
		public Assignment getContractsAssignment_5_1() { return cContractsAssignment_5_1; }
		
		//ContractPair
		public RuleCall getContractsContractPairParserRuleCall_5_1_0() { return cContractsContractPairParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ContractPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.ContractPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContractPairAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReqRequiresParserRuleCall_1_0 = (RuleCall)cReqAssignment_1.eContents().get(0);
		private final Assignment cEnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnsEnsuresParserRuleCall_2_0 = (RuleCall)cEnsAssignment_2.eContents().get(0);
		
		//ContractPair:
		//	{ContractPair} req+=Requires*
		//	ens+=Ensures*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ContractPair} req+=Requires* ens+=Ensures*
		public Group getGroup() { return cGroup; }
		
		//{ContractPair}
		public Action getContractPairAction_0() { return cContractPairAction_0; }
		
		//req+=Requires*
		public Assignment getReqAssignment_1() { return cReqAssignment_1; }
		
		//Requires
		public RuleCall getReqRequiresParserRuleCall_1_0() { return cReqRequiresParserRuleCall_1_0; }
		
		//ens+=Ensures*
		public Assignment getEnsAssignment_2() { return cEnsAssignment_2; }
		
		//Ensures
		public RuleCall getEnsEnsuresParserRuleCall_2_0() { return cEnsEnsuresParserRuleCall_2_0; }
	}
	public class RequiresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Requires");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprContractExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Requires:
		//	'requires' ':' expr=ContractExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'requires' ':' expr=ContractExpression ';'
		public Group getGroup() { return cGroup; }
		
		//'requires'
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//expr=ContractExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//ContractExpression
		public RuleCall getExprContractExpressionParserRuleCall_2_0() { return cExprContractExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EnsuresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Ensures");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnsuresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprContractExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ensures:
		//	'ensures' ':' expr=ContractExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ensures' ':' expr=ContractExpression ';'
		public Group getGroup() { return cGroup; }
		
		//'ensures'
		public Keyword getEnsuresKeyword_0() { return cEnsuresKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//expr=ContractExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//ContractExpression
		public RuleCall getExprContractExpressionParserRuleCall_2_0() { return cExprContractExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ContractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.ContractExpression");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ContractExpression:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class FStateGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FStateGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFStateGraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInitialKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInitialFStateCrossReference_3_0 = (CrossReference)cInitialAssignment_3.eContents().get(0);
		private final RuleCall cInitialFStateIDTerminalRuleCall_3_0_1 = (RuleCall)cInitialFStateCrossReference_3_0.eContents().get(1);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesFStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////PortOperation:
		////    'Operation' name=ID '(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')' ( (':' ('void' | (returnType=RefableType))) | ('sends' sendsMsg=[Message|ID]) )?
		////            detailCode=DetailCode
		////;
		//FStateGraph:
		//	{FStateGraph} '{'
		//	'initial' initial=[FState] states+=FState*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FStateGraph} '{' 'initial' initial=[FState] states+=FState* '}'
		public Group getGroup() { return cGroup; }
		
		//{FStateGraph}
		public Action getFStateGraphAction_0() { return cFStateGraphAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'initial'
		public Keyword getInitialKeyword_2() { return cInitialKeyword_2; }
		
		//initial=[FState]
		public Assignment getInitialAssignment_3() { return cInitialAssignment_3; }
		
		//[FState]
		public CrossReference getInitialFStateCrossReference_3_0() { return cInitialFStateCrossReference_3_0; }
		
		//ID
		public RuleCall getInitialFStateIDTerminalRuleCall_3_0_1() { return cInitialFStateIDTerminalRuleCall_3_0_1; }
		
		//states+=FState*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//FState
		public RuleCall getStatesFStateParserRuleCall_4_0() { return cStatesFStateParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEntryKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEntryActionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEntryActionCC_STRINGTerminalRuleCall_5_2_0 = (RuleCall)cEntryActionAssignment_5_2.eContents().get(0);
		private final Assignment cBroadcastEntryAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cBroadcastEntryBroadcastParserRuleCall_5_3_0 = (RuleCall)cBroadcastEntryAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExitKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExitActionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cExitActionCC_STRINGTerminalRuleCall_6_2_0 = (RuleCall)cExitActionAssignment_6_2.eContents().get(0);
		private final Assignment cBroadcastExitAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cBroadcastExitBroadcastParserRuleCall_6_3_0 = (RuleCall)cBroadcastExitAssignment_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDoKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDoActionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDoActionCC_STRINGTerminalRuleCall_7_2_0 = (RuleCall)cDoActionAssignment_7_2.eContents().get(0);
		private final Assignment cBoradcastDoAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cBoradcastDoBroadcastParserRuleCall_7_3_0 = (RuleCall)cBoradcastDoAssignment_7_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cTransitionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTransitionsFTransitionParserRuleCall_8_0 = (RuleCall)cTransitionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//FState:
		//	{FState} comment=AnnotationBlock?
		//	'state' name=ID '{' ('entry' '{' entryAction=CC_STRING broadcastEntry=Broadcast? '}')? ('exit' '{'
		//	exitAction=CC_STRING broadcastExit=Broadcast? '}')? ('do' '{' doAction=CC_STRING boradcastDo=Broadcast? '}')?
		//	transitions+=FTransition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FState} comment=AnnotationBlock? 'state' name=ID '{' ('entry' '{' entryAction=CC_STRING broadcastEntry=Broadcast? '}')?
		//('exit' '{' exitAction=CC_STRING broadcastExit=Broadcast? '}')? ('do' '{' doAction=CC_STRING boradcastDo=Broadcast?
		//'}')? transitions+=FTransition* '}'
		public Group getGroup() { return cGroup; }
		
		//{FState}
		public Action getFStateAction_0() { return cFStateAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//'state'
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('entry' '{' entryAction=CC_STRING broadcastEntry=Broadcast? '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'entry'
		public Keyword getEntryKeyword_5_0() { return cEntryKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//entryAction=CC_STRING
		public Assignment getEntryActionAssignment_5_2() { return cEntryActionAssignment_5_2; }
		
		//CC_STRING
		public RuleCall getEntryActionCC_STRINGTerminalRuleCall_5_2_0() { return cEntryActionCC_STRINGTerminalRuleCall_5_2_0; }
		
		//broadcastEntry=Broadcast?
		public Assignment getBroadcastEntryAssignment_5_3() { return cBroadcastEntryAssignment_5_3; }
		
		//Broadcast
		public RuleCall getBroadcastEntryBroadcastParserRuleCall_5_3_0() { return cBroadcastEntryBroadcastParserRuleCall_5_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('exit' '{' exitAction=CC_STRING broadcastExit=Broadcast? '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'exit'
		public Keyword getExitKeyword_6_0() { return cExitKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//exitAction=CC_STRING
		public Assignment getExitActionAssignment_6_2() { return cExitActionAssignment_6_2; }
		
		//CC_STRING
		public RuleCall getExitActionCC_STRINGTerminalRuleCall_6_2_0() { return cExitActionCC_STRINGTerminalRuleCall_6_2_0; }
		
		//broadcastExit=Broadcast?
		public Assignment getBroadcastExitAssignment_6_3() { return cBroadcastExitAssignment_6_3; }
		
		//Broadcast
		public RuleCall getBroadcastExitBroadcastParserRuleCall_6_3_0() { return cBroadcastExitBroadcastParserRuleCall_6_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('do' '{' doAction=CC_STRING boradcastDo=Broadcast? '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'do'
		public Keyword getDoKeyword_7_0() { return cDoKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//doAction=CC_STRING
		public Assignment getDoActionAssignment_7_2() { return cDoActionAssignment_7_2; }
		
		//CC_STRING
		public RuleCall getDoActionCC_STRINGTerminalRuleCall_7_2_0() { return cDoActionCC_STRINGTerminalRuleCall_7_2_0; }
		
		//boradcastDo=Broadcast?
		public Assignment getBoradcastDoAssignment_7_3() { return cBoradcastDoAssignment_7_3; }
		
		//Broadcast
		public RuleCall getBoradcastDoBroadcastParserRuleCall_7_3_0() { return cBoradcastDoBroadcastParserRuleCall_7_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//transitions+=FTransition*
		public Assignment getTransitionsAssignment_8() { return cTransitionsAssignment_8; }
		
		//FTransition
		public RuleCall getTransitionsFTransitionParserRuleCall_8_0() { return cTransitionsFTransitionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class FTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerFTriggerParserRuleCall_1_0 = (RuleCall)cTriggerAssignment_1.eContents().get(0);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardFGuardParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cToFStateCrossReference_4_0 = (CrossReference)cToAssignment_4.eContents().get(0);
		private final RuleCall cToFStateIDTerminalRuleCall_4_0_1 = (RuleCall)cToFStateCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionCC_STRINGTerminalRuleCall_5_1_0 = (RuleCall)cActionAssignment_5_1.eContents().get(0);
		private final Assignment cBroadcastAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBroadcastBroadcastParserRuleCall_5_2_0 = (RuleCall)cBroadcastAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//FTransition:
		//	'on' trigger=FTrigger
		//	guard=FGuard?
		//	'->' to=[FState] ('{' action=CC_STRING broadcast=Broadcast? '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' trigger=FTrigger guard=FGuard? '->' to=[FState] ('{' action=CC_STRING broadcast=Broadcast? '}')?
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//trigger=FTrigger
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }
		
		//FTrigger
		public RuleCall getTriggerFTriggerParserRuleCall_1_0() { return cTriggerFTriggerParserRuleCall_1_0; }
		
		//guard=FGuard?
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }
		
		//FGuard
		public RuleCall getGuardFGuardParserRuleCall_2_0() { return cGuardFGuardParserRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//to=[FState]
		public Assignment getToAssignment_4() { return cToAssignment_4; }
		
		//[FState]
		public CrossReference getToFStateCrossReference_4_0() { return cToFStateCrossReference_4_0; }
		
		//ID
		public RuleCall getToFStateIDTerminalRuleCall_4_0_1() { return cToFStateIDTerminalRuleCall_4_0_1; }
		
		//('{' action=CC_STRING broadcast=Broadcast? '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//action=CC_STRING
		public Assignment getActionAssignment_5_1() { return cActionAssignment_5_1; }
		
		//CC_STRING
		public RuleCall getActionCC_STRINGTerminalRuleCall_5_1_0() { return cActionCC_STRINGTerminalRuleCall_5_1_0; }
		
		//broadcast=Broadcast?
		public Assignment getBroadcastAssignment_5_2() { return cBroadcastAssignment_5_2; }
		
		//Broadcast
		public RuleCall getBroadcastBroadcastParserRuleCall_5_2_0() { return cBroadcastBroadcastParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class FTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FTrigger");
		private final Assignment cEventAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventFEventOnIfParserRuleCall_0 = (RuleCall)cEventAssignment.eContents().get(0);
		
		//FTrigger:
		//	event=FEventOnIf;
		@Override public ParserRule getRule() { return rule; }
		
		//event=FEventOnIf
		public Assignment getEventAssignment() { return cEventAssignment; }
		
		//FEventOnIf
		public RuleCall getEventFEventOnIfParserRuleCall_0() { return cEventFEventOnIfParserRuleCall_0; }
	}
	public class FEventOnIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FEventOnIf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFEventOnIfAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTickKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEventKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEventParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//FEventOnIf:
		//	{FEventOnIf} 'tick' | 'event' name=Event;
		@Override public ParserRule getRule() { return rule; }
		
		//{FEventOnIf} 'tick' | 'event' name=Event
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FEventOnIf} 'tick'
		public Group getGroup_0() { return cGroup_0; }
		
		//{FEventOnIf}
		public Action getFEventOnIfAction_0_0() { return cFEventOnIfAction_0_0; }
		
		//'tick'
		public Keyword getTickKeyword_0_1() { return cTickKeyword_0_1; }
		
		////	('condition'    condition=LogicalOrExpression     ) |
		////	('call'    call=ID_WITH_SELECTOR      ) |
		////	('respond' respond=ID_WITH_SELECTOR   ) |
		////	('error'   error=ID_WITH_SELECTOR     ) |
		////	('signal'  signal=ID_WITH_SELECTOR ) |
		////	('set'     set=ID) |
		////	('update'  update=ID )
		//'event' name=Event
		public Group getGroup_1() { return cGroup_1; }
		
		//'event'
		public Keyword getEventKeyword_1_0() { return cEventKeyword_1_0; }
		
		//name=Event
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//Event
		public RuleCall getNameEventParserRuleCall_1_1_0() { return cNameEventParserRuleCall_1_1_0; }
	}
	public class BroadcastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Broadcast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalIDTerminalRuleCall_1_0 = (RuleCall)cSignalAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsIDTerminalRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsIDTerminalRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Broadcast:
		//	'emit' signal=ID ('(' arguments+=ID (',' arguments+=ID)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'emit' signal=ID ('(' arguments+=ID (',' arguments+=ID)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'emit'
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }
		
		//signal=ID
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }
		
		//ID
		public RuleCall getSignalIDTerminalRuleCall_1_0() { return cSignalIDTerminalRuleCall_1_0; }
		
		//('(' arguments+=ID (',' arguments+=ID)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//arguments+=ID
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_2_1_0() { return cArgumentsIDTerminalRuleCall_2_1_0; }
		
		//(',' arguments+=ID)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//arguments+=ID
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }
		
		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_2_2_1_0() { return cArgumentsIDTerminalRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class FGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionLogicalOrExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FGuard:
		//	'[' condition=LogicalOrExpression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' condition=LogicalOrExpression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//condition=LogicalOrExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//LogicalOrExpression
		public RuleCall getConditionLogicalOrExpressionParserRuleCall_1_0() { return cConditionLogicalOrExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class FTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPredefinedAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPredefinedFBasicTypeIdEnumRuleCall_0_0 = (RuleCall)cPredefinedAssignment_0.eContents().get(0);
		private final Assignment cDerivedAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cDerivedFTypeCrossReference_1_0 = (CrossReference)cDerivedAssignment_1.eContents().get(0);
		private final RuleCall cDerivedFTypeFQNParserRuleCall_1_0_1 = (RuleCall)cDerivedFTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIntervalFIntegerIntervalParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		
		//FTypeRef:
		//	predefined=FBasicTypeId | derived=[FType|FQN] | interval=FIntegerInterval;
		@Override public ParserRule getRule() { return rule; }
		
		//predefined=FBasicTypeId | derived=[FType|FQN] | interval=FIntegerInterval
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//predefined=FBasicTypeId
		public Assignment getPredefinedAssignment_0() { return cPredefinedAssignment_0; }
		
		//FBasicTypeId
		public RuleCall getPredefinedFBasicTypeIdEnumRuleCall_0_0() { return cPredefinedFBasicTypeIdEnumRuleCall_0_0; }
		
		//derived=[FType|FQN]
		public Assignment getDerivedAssignment_1() { return cDerivedAssignment_1; }
		
		//[FType|FQN]
		public CrossReference getDerivedFTypeCrossReference_1_0() { return cDerivedFTypeCrossReference_1_0; }
		
		//FQN
		public RuleCall getDerivedFTypeFQNParserRuleCall_1_0_1() { return cDerivedFTypeFQNParserRuleCall_1_0_1; }
		
		//interval=FIntegerInterval
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }
		
		//FIntegerInterval
		public RuleCall getIntervalFIntegerIntervalParserRuleCall_2_0() { return cIntervalFIntegerIntervalParserRuleCall_2_0; }
	}
	public class FIntegerIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FIntegerInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFIntegerIntervalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cLowerBoundAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cLowerBoundINTERVAL_BOUNDParserRuleCall_2_1_0_0 = (RuleCall)cLowerBoundAssignment_2_1_0.eContents().get(0);
		private final Keyword cMinIntKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Assignment cUpperBoundAssignment_2_3_0 = (Assignment)cAlternatives_2_3.eContents().get(0);
		private final RuleCall cUpperBoundINTERVAL_BOUNDParserRuleCall_2_3_0_0 = (RuleCall)cUpperBoundAssignment_2_3_0.eContents().get(0);
		private final Keyword cMaxIntKeyword_2_3_1 = (Keyword)cAlternatives_2_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//FIntegerInterval:
		//	{FIntegerInterval}
		//	'Integer' ('(' (lowerBound=INTERVAL_BOUND | 'minInt') ',' (upperBound=INTERVAL_BOUND | 'maxInt') ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FIntegerInterval} 'Integer' ('(' (lowerBound=INTERVAL_BOUND | 'minInt') ',' (upperBound=INTERVAL_BOUND | 'maxInt')
		//')')?
		public Group getGroup() { return cGroup; }
		
		//{FIntegerInterval}
		public Action getFIntegerIntervalAction_0() { return cFIntegerIntervalAction_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//('(' (lowerBound=INTERVAL_BOUND | 'minInt') ',' (upperBound=INTERVAL_BOUND | 'maxInt') ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(lowerBound=INTERVAL_BOUND | 'minInt')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//lowerBound=INTERVAL_BOUND
		public Assignment getLowerBoundAssignment_2_1_0() { return cLowerBoundAssignment_2_1_0; }
		
		//INTERVAL_BOUND
		public RuleCall getLowerBoundINTERVAL_BOUNDParserRuleCall_2_1_0_0() { return cLowerBoundINTERVAL_BOUNDParserRuleCall_2_1_0_0; }
		
		//'minInt'
		public Keyword getMinIntKeyword_2_1_1() { return cMinIntKeyword_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//(upperBound=INTERVAL_BOUND | 'maxInt')
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }
		
		//upperBound=INTERVAL_BOUND
		public Assignment getUpperBoundAssignment_2_3_0() { return cUpperBoundAssignment_2_3_0; }
		
		//INTERVAL_BOUND
		public RuleCall getUpperBoundINTERVAL_BOUNDParserRuleCall_2_3_0_0() { return cUpperBoundINTERVAL_BOUNDParserRuleCall_2_3_0_0; }
		
		//'maxInt'
		public Keyword getMaxIntKeyword_2_3_1() { return cMaxIntKeyword_2_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}
	public class INTERVAL_BOUNDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.INTERVAL_BOUND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//INTERVAL_BOUND ecore::EBigInteger:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFArrayTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFStructTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFUnionTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFMapTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFTypeDefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FType:
		//	FArrayType | FStructType | FUnionType | FMapType | FTypeDef;
		@Override public ParserRule getRule() { return rule; }
		
		//FArrayType | FStructType | FUnionType | FMapType | FTypeDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FArrayType
		public RuleCall getFArrayTypeParserRuleCall_0() { return cFArrayTypeParserRuleCall_0; }
		
		////FEnumerationType |
		//FStructType
		public RuleCall getFStructTypeParserRuleCall_1() { return cFStructTypeParserRuleCall_1; }
		
		//FUnionType
		public RuleCall getFUnionTypeParserRuleCall_2() { return cFUnionTypeParserRuleCall_2; }
		
		//FMapType
		public RuleCall getFMapTypeParserRuleCall_3() { return cFMapTypeParserRuleCall_3; }
		
		//FTypeDef
		public RuleCall getFTypeDefParserRuleCall_4() { return cFTypeDefParserRuleCall_4; }
	}
	public class FArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cPublicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPublicPublicKeyword_2_0 = (Keyword)cPublicAssignment_2.eContents().get(0);
		private final Keyword cArrayKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cOfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementTypeFTypeRefParserRuleCall_6_0 = (RuleCall)cElementTypeAssignment_6.eContents().get(0);
		
		//FArrayType:
		//	{FArrayType} comment=AnnotationBlock?
		//	public?='public'? 'array' name=ID 'of' elementType=FTypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//{FArrayType} comment=AnnotationBlock? public?='public'? 'array' name=ID 'of' elementType=FTypeRef
		public Group getGroup() { return cGroup; }
		
		//{FArrayType}
		public Action getFArrayTypeAction_0() { return cFArrayTypeAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//public?='public'?
		public Assignment getPublicAssignment_2() { return cPublicAssignment_2; }
		
		//'public'
		public Keyword getPublicPublicKeyword_2_0() { return cPublicPublicKeyword_2_0; }
		
		//'array'
		public Keyword getArrayKeyword_3() { return cArrayKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'of'
		public Keyword getOfKeyword_5() { return cOfKeyword_5; }
		
		//elementType=FTypeRef
		public Assignment getElementTypeAssignment_6() { return cElementTypeAssignment_6; }
		
		//FTypeRef
		public RuleCall getElementTypeFTypeRefParserRuleCall_6_0() { return cElementTypeFTypeRefParserRuleCall_6_0; }
	}
	public class FTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFTypeDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cPublicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPublicPublicKeyword_2_0 = (Keyword)cPublicAssignment_2.eContents().get(0);
		private final Keyword cTypedefKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cIsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActualTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActualTypeFTypeRefParserRuleCall_6_0 = (RuleCall)cActualTypeAssignment_6.eContents().get(0);
		
		//FTypeDef:
		//	{FTypeDef} comment=AnnotationBlock?
		//	public?='public'? 'typedef' name=ID 'is' actualType=FTypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//{FTypeDef} comment=AnnotationBlock? public?='public'? 'typedef' name=ID 'is' actualType=FTypeRef
		public Group getGroup() { return cGroup; }
		
		//{FTypeDef}
		public Action getFTypeDefAction_0() { return cFTypeDefAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//public?='public'?
		public Assignment getPublicAssignment_2() { return cPublicAssignment_2; }
		
		//'public'
		public Keyword getPublicPublicKeyword_2_0() { return cPublicPublicKeyword_2_0; }
		
		//'typedef'
		public Keyword getTypedefKeyword_3() { return cTypedefKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'is'
		public Keyword getIsKeyword_5() { return cIsKeyword_5; }
		
		//actualType=FTypeRef
		public Assignment getActualTypeAssignment_6() { return cActualTypeAssignment_6; }
		
		//FTypeRef
		public RuleCall getActualTypeFTypeRefParserRuleCall_6_0() { return cActualTypeFTypeRefParserRuleCall_6_0; }
	}
	public class FStructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FStructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFStructTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cPublicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPublicPublicKeyword_2_0 = (Keyword)cPublicAssignment_2.eContents().get(0);
		private final Keyword cStructKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cExtendsKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cBaseAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final CrossReference cBaseFStructTypeCrossReference_5_0_1_0 = (CrossReference)cBaseAssignment_5_0_1.eContents().get(0);
		private final RuleCall cBaseFStructTypeFQNParserRuleCall_5_0_1_0_1 = (RuleCall)cBaseFStructTypeCrossReference_5_0_1_0.eContents().get(1);
		private final Assignment cPolymorphicAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cPolymorphicPolymorphicKeyword_5_1_0 = (Keyword)cPolymorphicAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsFFieldParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FStructType:
		//	{FStructType} comment=AnnotationBlock?
		//	public?='public'? 'struct' name=ID ('extends' base=[FStructType|FQN] | polymorphic?='polymorphic')?
		//	'{'
		//	elements+=FField*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FStructType} comment=AnnotationBlock? public?='public'? 'struct' name=ID ('extends' base=[FStructType|FQN] |
		//polymorphic?='polymorphic')? '{' elements+=FField* '}'
		public Group getGroup() { return cGroup; }
		
		//{FStructType}
		public Action getFStructTypeAction_0() { return cFStructTypeAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//public?='public'?
		public Assignment getPublicAssignment_2() { return cPublicAssignment_2; }
		
		//'public'
		public Keyword getPublicPublicKeyword_2_0() { return cPublicPublicKeyword_2_0; }
		
		//'struct'
		public Keyword getStructKeyword_3() { return cStructKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//('extends' base=[FStructType|FQN] | polymorphic?='polymorphic')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'extends' base=[FStructType|FQN]
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'extends'
		public Keyword getExtendsKeyword_5_0_0() { return cExtendsKeyword_5_0_0; }
		
		//base=[FStructType|FQN]
		public Assignment getBaseAssignment_5_0_1() { return cBaseAssignment_5_0_1; }
		
		//[FStructType|FQN]
		public CrossReference getBaseFStructTypeCrossReference_5_0_1_0() { return cBaseFStructTypeCrossReference_5_0_1_0; }
		
		//FQN
		public RuleCall getBaseFStructTypeFQNParserRuleCall_5_0_1_0_1() { return cBaseFStructTypeFQNParserRuleCall_5_0_1_0_1; }
		
		//polymorphic?='polymorphic'
		public Assignment getPolymorphicAssignment_5_1() { return cPolymorphicAssignment_5_1; }
		
		//'polymorphic'
		public Keyword getPolymorphicPolymorphicKeyword_5_1_0() { return cPolymorphicPolymorphicKeyword_5_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//elements+=FField*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//FField
		public RuleCall getElementsFFieldParserRuleCall_7_0() { return cElementsFFieldParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FUnionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FUnionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFUnionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cPublicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPublicPublicKeyword_2_0 = (Keyword)cPublicAssignment_2.eContents().get(0);
		private final Keyword cUnionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBaseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cBaseFUnionTypeCrossReference_5_1_0 = (CrossReference)cBaseAssignment_5_1.eContents().get(0);
		private final RuleCall cBaseFUnionTypeFQNParserRuleCall_5_1_0_1 = (RuleCall)cBaseFUnionTypeCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsFFieldParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FUnionType:
		//	{FUnionType} comment=AnnotationBlock?
		//	public?='public'? 'union' name=ID ('extends' base=[FUnionType|FQN])?
		//	'{'
		//	elements+=FField*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FUnionType} comment=AnnotationBlock? public?='public'? 'union' name=ID ('extends' base=[FUnionType|FQN])? '{'
		//elements+=FField* '}'
		public Group getGroup() { return cGroup; }
		
		//{FUnionType}
		public Action getFUnionTypeAction_0() { return cFUnionTypeAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//public?='public'?
		public Assignment getPublicAssignment_2() { return cPublicAssignment_2; }
		
		//'public'
		public Keyword getPublicPublicKeyword_2_0() { return cPublicPublicKeyword_2_0; }
		
		//'union'
		public Keyword getUnionKeyword_3() { return cUnionKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//('extends' base=[FUnionType|FQN])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'extends'
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }
		
		//base=[FUnionType|FQN]
		public Assignment getBaseAssignment_5_1() { return cBaseAssignment_5_1; }
		
		//[FUnionType|FQN]
		public CrossReference getBaseFUnionTypeCrossReference_5_1_0() { return cBaseFUnionTypeCrossReference_5_1_0; }
		
		//FQN
		public RuleCall getBaseFUnionTypeFQNParserRuleCall_5_1_0_1() { return cBaseFUnionTypeFQNParserRuleCall_5_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//elements+=FField*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//FField
		public RuleCall getElementsFFieldParserRuleCall_7_0() { return cElementsFFieldParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorOrEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression FExpression:
		//	LogicalAndExpression ({FBinaryOperation.left=current} op=OperatorOr right=LogicalAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression ({FBinaryOperation.left=current} op=OperatorOr right=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({FBinaryOperation.left=current} op=OperatorOr right=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FBinaryOperation.left=current}
		public Action getFBinaryOperationLeftAction_1_0() { return cFBinaryOperationLeftAction_1_0; }
		
		//op=OperatorOr
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OperatorOr
		public RuleCall getOpOperatorOrEnumRuleCall_1_1_0() { return cOpOperatorOrEnumRuleCall_1_1_0; }
		
		//right=LogicalAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalAndExpression
		public RuleCall getRightLogicalAndExpressionParserRuleCall_1_2_0() { return cRightLogicalAndExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorAndEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression FExpression:
		//	EqualityExpression ({FBinaryOperation.left=current} op=OperatorAnd right=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({FBinaryOperation.left=current} op=OperatorAnd right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({FBinaryOperation.left=current} op=OperatorAnd right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FBinaryOperation.left=current}
		public Action getFBinaryOperationLeftAction_1_0() { return cFBinaryOperationLeftAction_1_0; }
		
		//op=OperatorAnd
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OperatorAnd
		public RuleCall getOpOperatorAndEnumRuleCall_1_1_0() { return cOpOperatorAndEnumRuleCall_1_1_0; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorEqualityEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression FExpression:
		//	RelationalExpression ({FBinaryOperation.left=current} op=OperatorEquality right=RelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({FBinaryOperation.left=current} op=OperatorEquality right=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({FBinaryOperation.left=current} op=OperatorEquality right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FBinaryOperation.left=current}
		public Action getFBinaryOperationLeftAction_1_0() { return cFBinaryOperationLeftAction_1_0; }
		
		//op=OperatorEquality
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OperatorEquality
		public RuleCall getOpOperatorEqualityEnumRuleCall_1_1_0() { return cOpOperatorEqualityEnumRuleCall_1_1_0; }
		
		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorRelationalEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpression FExpression:
		//	AdditiveExpression ({FBinaryOperation.left=current} op=OperatorRelational right=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({FBinaryOperation.left=current} op=OperatorRelational right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({FBinaryOperation.left=current} op=OperatorRelational right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FBinaryOperation.left=current}
		public Action getFBinaryOperationLeftAction_1_0() { return cFBinaryOperationLeftAction_1_0; }
		
		//op=OperatorRelational
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OperatorRelational
		public RuleCall getOpOperatorRelationalEnumRuleCall_1_1_0() { return cOpOperatorRelationalEnumRuleCall_1_1_0; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorAdditiveEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression FExpression:
		//	MultiplicativeExpression ({FBinaryOperation.left=current} op=OperatorAdditive right=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({FBinaryOperation.left=current} op=OperatorAdditive right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({FBinaryOperation.left=current} op=OperatorAdditive right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FBinaryOperation.left=current}
		public Action getFBinaryOperationLeftAction_1_0() { return cFBinaryOperationLeftAction_1_0; }
		
		//op=OperatorAdditive
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OperatorAdditive
		public RuleCall getOpOperatorAdditiveEnumRuleCall_1_1_0() { return cOpOperatorAdditiveEnumRuleCall_1_1_0; }
		
		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorMultiplicativeEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression FExpression:
		//	PrimaryExpression ({FBinaryOperation.left=current} op=OperatorMultiplicative right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({FBinaryOperation.left=current} op=OperatorMultiplicative right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({FBinaryOperation.left=current} op=OperatorMultiplicative right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FBinaryOperation.left=current}
		public Action getFBinaryOperationLeftAction_1_0() { return cFBinaryOperationLeftAction_1_0; }
		
		//op=OperatorMultiplicative
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OperatorMultiplicative
		public RuleCall getOpOperatorMultiplicativeEnumRuleCall_1_1_0() { return cOpOperatorMultiplicativeEnumRuleCall_1_1_0; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFUnaryOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimplePrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpression FExpression:
		//	FUnaryOperation | SimplePrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//FUnaryOperation | SimplePrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FUnaryOperation
		public RuleCall getFUnaryOperationParserRuleCall_0() { return cFUnaryOperationParserRuleCall_0; }
		
		//SimplePrimaryExpression
		public RuleCall getSimplePrimaryExpressionParserRuleCall_1() { return cSimplePrimaryExpressionParserRuleCall_1; }
	}
	public class SimplePrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.SimplePrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFQualifiedElementRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLogicalOrExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//SimplePrimaryExpression FExpression:
		//	FQualifiedElementRef | FConstant |
		//	'(' LogicalOrExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//FQualifiedElementRef | FConstant | '(' LogicalOrExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FQualifiedElementRef
		public RuleCall getFQualifiedElementRefParserRuleCall_0() { return cFQualifiedElementRefParserRuleCall_0; }
		
		////FCurrentError |
		////FMethodErrorEnumRef |
		//FConstant
		public RuleCall getFConstantParserRuleCall_1() { return cFConstantParserRuleCall_1; }
		
		//'(' LogicalOrExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_2_1() { return cLogicalOrExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class FUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FUnaryOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFUnaryOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperatorUnaryEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandSimplePrimaryExpressionParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		
		//FUnaryOperation FExpression:
		//	{FUnaryOperation} op=OperatorUnary operand=SimplePrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{FUnaryOperation} op=OperatorUnary operand=SimplePrimaryExpression
		public Group getGroup() { return cGroup; }
		
		//{FUnaryOperation}
		public Action getFUnaryOperationAction_0() { return cFUnaryOperationAction_0; }
		
		//op=OperatorUnary
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//OperatorUnary
		public RuleCall getOpOperatorUnaryEnumRuleCall_1_0() { return cOpOperatorUnaryEnumRuleCall_1_0; }
		
		//operand=SimplePrimaryExpression
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//SimplePrimaryExpression
		public RuleCall getOperandSimplePrimaryExpressionParserRuleCall_2_0() { return cOperandSimplePrimaryExpressionParserRuleCall_2_0; }
	}
	public class FQualifiedElementRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FQualifiedElementRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFQualifiedElementRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementFQNParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cFQualifiedElementRefQualifierAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFieldAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cFieldFFieldCrossReference_2_2_0 = (CrossReference)cFieldAssignment_2_2.eContents().get(0);
		private final RuleCall cFieldFFieldIDTerminalRuleCall_2_2_0_1 = (RuleCall)cFieldFFieldCrossReference_2_2_0.eContents().get(1);
		
		//FQualifiedElementRef:
		//	{FQualifiedElementRef} element=FQN ({FQualifiedElementRef.qualifier=current} '-->' field=[FField])*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FQualifiedElementRef} element=FQN ({FQualifiedElementRef.qualifier=current} '-->' field=[FField])*
		public Group getGroup() { return cGroup; }
		
		//{FQualifiedElementRef}
		public Action getFQualifiedElementRefAction_0() { return cFQualifiedElementRefAction_0; }
		
		//element=FQN
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//FQN
		public RuleCall getElementFQNParserRuleCall_1_0() { return cElementFQNParserRuleCall_1_0; }
		
		//({FQualifiedElementRef.qualifier=current} '-->' field=[FField])*
		public Group getGroup_2() { return cGroup_2; }
		
		//{FQualifiedElementRef.qualifier=current}
		public Action getFQualifiedElementRefQualifierAction_2_0() { return cFQualifiedElementRefQualifierAction_2_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//field=[FField]
		public Assignment getFieldAssignment_2_2() { return cFieldAssignment_2_2; }
		
		//[FField]
		public CrossReference getFieldFFieldCrossReference_2_2_0() { return cFieldFFieldCrossReference_2_2_0; }
		
		//ID
		public RuleCall getFieldFFieldIDTerminalRuleCall_2_2_0_1() { return cFieldFFieldIDTerminalRuleCall_2_2_0_1; }
	}
	public class FConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFFloatConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFDoubleConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFIntegerConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFBooleanConstantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFStringConstantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FConstant FExpression:
		//	FFloatConstant | FDoubleConstant | FIntegerConstant | FBooleanConstant | FStringConstant;
		@Override public ParserRule getRule() { return rule; }
		
		//FFloatConstant | FDoubleConstant | FIntegerConstant | FBooleanConstant | FStringConstant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FFloatConstant
		public RuleCall getFFloatConstantParserRuleCall_0() { return cFFloatConstantParserRuleCall_0; }
		
		//FDoubleConstant
		public RuleCall getFDoubleConstantParserRuleCall_1() { return cFDoubleConstantParserRuleCall_1; }
		
		//FIntegerConstant
		public RuleCall getFIntegerConstantParserRuleCall_2() { return cFIntegerConstantParserRuleCall_2; }
		
		//FBooleanConstant
		public RuleCall getFBooleanConstantParserRuleCall_3() { return cFBooleanConstantParserRuleCall_3; }
		
		//FStringConstant
		public RuleCall getFStringConstantParserRuleCall_4() { return cFStringConstantParserRuleCall_4; }
	}
	public class FDoubleConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FDoubleConstant");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValE_DOUBLE_OBJECTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//FDoubleConstant:
		//	val=E_DOUBLE_OBJECT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=E_DOUBLE_OBJECT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//E_DOUBLE_OBJECT
		public RuleCall getValE_DOUBLE_OBJECTTerminalRuleCall_0() { return cValE_DOUBLE_OBJECTTerminalRuleCall_0; }
	}
	public class FFloatConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FFloatConstant");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValE_FLOAT_OBJECTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//FFloatConstant:
		//	val=E_FLOAT_OBJECT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=E_FLOAT_OBJECT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//E_FLOAT_OBJECT
		public RuleCall getValE_FLOAT_OBJECTTerminalRuleCall_0() { return cValE_FLOAT_OBJECTTerminalRuleCall_0; }
	}
	public class FIntegerConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FIntegerConstant");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValE_BigIntegerParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//FIntegerConstant:
		//	val=E_BigInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//val=E_BigInteger
		public Assignment getValAssignment() { return cValAssignment; }
		
		//E_BigInteger
		public RuleCall getValE_BigIntegerParserRuleCall_0() { return cValE_BigIntegerParserRuleCall_0; }
	}
	public class FBooleanConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FBooleanConstant");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValEBooleanParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//FBooleanConstant:
		//	val=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//val=EBoolean
		public Assignment getValAssignment() { return cValAssignment; }
		
		//EBoolean
		public RuleCall getValEBooleanParserRuleCall_0() { return cValEBooleanParserRuleCall_0; }
	}
	public class FStringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FStringConstant");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//FStringConstant:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}
	public class FMapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FMapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFMapTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cPublicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPublicPublicKeyword_2_0 = (Keyword)cPublicAssignment_2.eContents().get(0);
		private final Keyword cMapKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cKeyTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cKeyTypeFTypeRefParserRuleCall_6_0 = (RuleCall)cKeyTypeAssignment_6.eContents().get(0);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueTypeFTypeRefParserRuleCall_8_0 = (RuleCall)cValueTypeAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////FEnumerationType returns FEnumerationType:
		////	{FEnumerationType}
		////	(comment=AnnotationBlock)?
		////	(public?='public')? 'enumeration' name=ID
		////	('extends' base=[FEnumerationType|FQN])?
		////	'{'
		////		(enumerators+=FEnumerator (','? enumerators+=FEnumerator)*)?
		////    '}';
		////
		////FEnumerationTypeBody returns FEnumerationType:
		////	{FEnumerationType}
		////	('extends' base=[FEnumerationType|FQN])?
		////	'{'
		////		(enumerators+=FEnumerator (','? enumerators+=FEnumerator)*)?
		////    '}';
		////
		////FEnumerator returns FEnumerator:
		////	{FEnumerator}
		////	(comment=AnnotationBlock)?
		////	name=ID ('=' value=AdditiveExpression)?
		////    ;
		//FMapType:
		//	{FMapType} comment=AnnotationBlock?
		//	public?='public'? 'map' name=ID '{'
		//	keyType=FTypeRef 'to' valueType=FTypeRef
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FMapType} comment=AnnotationBlock? public?='public'? 'map' name=ID '{' keyType=FTypeRef 'to' valueType=FTypeRef '}'
		public Group getGroup() { return cGroup; }
		
		//{FMapType}
		public Action getFMapTypeAction_0() { return cFMapTypeAction_0; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_1_0() { return cCommentAnnotationBlockParserRuleCall_1_0; }
		
		//public?='public'?
		public Assignment getPublicAssignment_2() { return cPublicAssignment_2; }
		
		//'public'
		public Keyword getPublicPublicKeyword_2_0() { return cPublicPublicKeyword_2_0; }
		
		//'map'
		public Keyword getMapKeyword_3() { return cMapKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//keyType=FTypeRef
		public Assignment getKeyTypeAssignment_6() { return cKeyTypeAssignment_6; }
		
		//FTypeRef
		public RuleCall getKeyTypeFTypeRefParserRuleCall_6_0() { return cKeyTypeFTypeRefParserRuleCall_6_0; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//valueType=FTypeRef
		public Assignment getValueTypeAssignment_8() { return cValueTypeAssignment_8; }
		
		//FTypeRef
		public RuleCall getValueTypeFTypeRefParserRuleCall_8_0() { return cValueTypeFTypeRefParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class FFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeFTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArrayAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_2_0_0 = (Keyword)cArrayAssignment_2_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//FField:
		//	comment=AnnotationBlock?
		//	type=FTypeRef (array?='[' ']')? name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=AnnotationBlock? type=FTypeRef (array?='[' ']')? name=ID
		public Group getGroup() { return cGroup; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_0_0() { return cCommentAnnotationBlockParserRuleCall_0_0; }
		
		//type=FTypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//FTypeRef
		public RuleCall getTypeFTypeRefParserRuleCall_1_0() { return cTypeFTypeRefParserRuleCall_1_0; }
		
		//(array?='[' ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//array?='['
		public Assignment getArrayAssignment_2_0() { return cArrayAssignment_2_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_2_0_0() { return cArrayLeftSquareBracketKeyword_2_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class FDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeFTypeRefParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_1_0_0 = (Keyword)cArrayAssignment_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRhsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRhsFInitializerExpressionParserRuleCall_3_1_0 = (RuleCall)cRhsAssignment_3_1.eContents().get(0);
		
		//FDeclaration:
		//	type=FTypeRef (array?='[' ']')? name=ID ('=' rhs=FInitializerExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=FTypeRef (array?='[' ']')? name=ID ('=' rhs=FInitializerExpression)?
		public Group getGroup() { return cGroup; }
		
		//type=FTypeRef
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//FTypeRef
		public RuleCall getTypeFTypeRefParserRuleCall_0_0() { return cTypeFTypeRefParserRuleCall_0_0; }
		
		//(array?='[' ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//array?='['
		public Assignment getArrayAssignment_1_0() { return cArrayAssignment_1_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_1_0_0() { return cArrayLeftSquareBracketKeyword_1_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('=' rhs=FInitializerExpression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//rhs=FInitializerExpression
		public Assignment getRhsAssignment_3_1() { return cRhsAssignment_3_1; }
		
		//FInitializerExpression
		public RuleCall getRhsFInitializerExpressionParserRuleCall_3_1_0() { return cRhsFInitializerExpressionParserRuleCall_3_1_0; }
	}
	public class FTypedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FTypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFConstantDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FTypedElement:
		//	FField | FArgument | FDeclaration | FConstantDef;
		@Override public ParserRule getRule() { return rule; }
		
		//FField | FArgument | FDeclaration | FConstantDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FField
		public RuleCall getFFieldParserRuleCall_0() { return cFFieldParserRuleCall_0; }
		
		////FAttribute |
		//FArgument
		public RuleCall getFArgumentParserRuleCall_1() { return cFArgumentParserRuleCall_1; }
		
		//FDeclaration
		public RuleCall getFDeclarationParserRuleCall_2() { return cFDeclarationParserRuleCall_2; }
		
		//FConstantDef
		public RuleCall getFConstantDefParserRuleCall_3() { return cFConstantDefParserRuleCall_3; }
	}
	public class FArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeFTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArrayAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_2_0_0 = (Keyword)cArrayAssignment_2_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//FArgument:
		//	comment=AnnotationBlock?
		//	type=FTypeRef (array?='[' ']')? name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=AnnotationBlock? type=FTypeRef (array?='[' ']')? name=ID
		public Group getGroup() { return cGroup; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_0_0() { return cCommentAnnotationBlockParserRuleCall_0_0; }
		
		//type=FTypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//FTypeRef
		public RuleCall getTypeFTypeRefParserRuleCall_1_0() { return cTypeFTypeRefParserRuleCall_1_0; }
		
		//(array?='[' ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//array?='['
		public Assignment getArrayAssignment_2_0() { return cArrayAssignment_2_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_2_0_0() { return cArrayLeftSquareBracketKeyword_2_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class FConstantDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FConstantDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentAnnotationBlockParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeFTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_3_0_0 = (Keyword)cArrayAssignment_3_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRhsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRhsFInitializerExpressionParserRuleCall_6_0 = (RuleCall)cRhsAssignment_6.eContents().get(0);
		
		//FConstantDef:
		//	comment=AnnotationBlock?
		//	'const' type=FTypeRef (array?='[' ']')? name=ID '='
		//	rhs=FInitializerExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=AnnotationBlock? 'const' type=FTypeRef (array?='[' ']')? name=ID '=' rhs=FInitializerExpression
		public Group getGroup() { return cGroup; }
		
		//comment=AnnotationBlock?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//AnnotationBlock
		public RuleCall getCommentAnnotationBlockParserRuleCall_0_0() { return cCommentAnnotationBlockParserRuleCall_0_0; }
		
		//'const'
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }
		
		//type=FTypeRef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//FTypeRef
		public RuleCall getTypeFTypeRefParserRuleCall_2_0() { return cTypeFTypeRefParserRuleCall_2_0; }
		
		//(array?='[' ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//array?='['
		public Assignment getArrayAssignment_3_0() { return cArrayAssignment_3_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_3_0_0() { return cArrayLeftSquareBracketKeyword_3_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1() { return cRightSquareBracketKeyword_3_1; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//rhs=FInitializerExpression
		public Assignment getRhsAssignment_6() { return cRhsAssignment_6; }
		
		//FInitializerExpression
		public RuleCall getRhsFInitializerExpressionParserRuleCall_6_0() { return cRhsFInitializerExpressionParserRuleCall_6_0; }
	}
	public class FInitializerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FInitializerExpression");
		private final RuleCall cFInitializerParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FInitializerExpression:
		//	FInitializer;
		@Override public ParserRule getRule() { return rule; }
		
		////LogicalOrExpression |
		//FInitializer
		public RuleCall getFInitializerParserRuleCall() { return cFInitializerParserRuleCall; }
	}
	public class FInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFCompoundInitializerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFBracketInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FInitializer:
		//	FCompoundInitializer | FBracketInitializer;
		@Override public ParserRule getRule() { return rule; }
		
		//FCompoundInitializer | FBracketInitializer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FCompoundInitializer
		public RuleCall getFCompoundInitializerParserRuleCall_0() { return cFCompoundInitializerParserRuleCall_0; }
		
		//FBracketInitializer
		public RuleCall getFBracketInitializerParserRuleCall_1() { return cFBracketInitializerParserRuleCall_1; }
	}
	public class FCompoundInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FCompoundInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFCompoundInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsFFieldInitializerParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsFFieldInitializerParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// this is used for struct and union types
		//FCompoundInitializer:
		//	{FCompoundInitializer}
		//	'{' (elements+=FFieldInitializer (',' elements+=FFieldInitializer)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FCompoundInitializer} '{' (elements+=FFieldInitializer (',' elements+=FFieldInitializer)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{FCompoundInitializer}
		public Action getFCompoundInitializerAction_0() { return cFCompoundInitializerAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(elements+=FFieldInitializer (',' elements+=FFieldInitializer)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=FFieldInitializer
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//FFieldInitializer
		public RuleCall getElementsFFieldInitializerParserRuleCall_2_0_0() { return cElementsFFieldInitializerParserRuleCall_2_0_0; }
		
		//(',' elements+=FFieldInitializer)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=FFieldInitializer
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//FFieldInitializer
		public RuleCall getElementsFFieldInitializerParserRuleCall_2_1_1_0() { return cElementsFFieldInitializerParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FFieldInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FFieldInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cElementFFieldCrossReference_0_0 = (CrossReference)cElementAssignment_0.eContents().get(0);
		private final RuleCall cElementFFieldIDTerminalRuleCall_0_0_1 = (RuleCall)cElementFFieldCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueFInitializerExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FFieldInitializer:
		//	element=[FField] ':' value=FInitializerExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//element=[FField] ':' value=FInitializerExpression
		public Group getGroup() { return cGroup; }
		
		//element=[FField]
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//[FField]
		public CrossReference getElementFFieldCrossReference_0_0() { return cElementFFieldCrossReference_0_0; }
		
		//ID
		public RuleCall getElementFFieldIDTerminalRuleCall_0_0_1() { return cElementFFieldIDTerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=FInitializerExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//FInitializerExpression
		public RuleCall getValueFInitializerExpressionParserRuleCall_2_0() { return cValueFInitializerExpressionParserRuleCall_2_0; }
	}
	public class FBracketInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FBracketInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFBracketInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsFElementInitializerParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsFElementInitializerParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// this is used for array and map types
		//FBracketInitializer:
		//	{FBracketInitializer}
		//	'[' (elements+=FElementInitializer (',' elements+=FElementInitializer)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{FBracketInitializer} '[' (elements+=FElementInitializer (',' elements+=FElementInitializer)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{FBracketInitializer}
		public Action getFBracketInitializerAction_0() { return cFBracketInitializerAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(elements+=FElementInitializer (',' elements+=FElementInitializer)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=FElementInitializer
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//FElementInitializer
		public RuleCall getElementsFElementInitializerParserRuleCall_2_0_0() { return cElementsFElementInitializerParserRuleCall_2_0_0; }
		
		//(',' elements+=FElementInitializer)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=FElementInitializer
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//FElementInitializer
		public RuleCall getElementsFElementInitializerParserRuleCall_2_1_1_0() { return cElementsFElementInitializerParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class FElementInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FElementInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFElementInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstFInitializerExpressionParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSecondAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSecondFInitializerExpressionParserRuleCall_2_1_0 = (RuleCall)cSecondAssignment_2_1.eContents().get(0);
		
		//// for array type initializers, the second element is omitted
		//FElementInitializer:
		//	{FElementInitializer} first=FInitializerExpression ('=>' second=FInitializerExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FElementInitializer} first=FInitializerExpression ('=>' second=FInitializerExpression)?
		public Group getGroup() { return cGroup; }
		
		//{FElementInitializer}
		public Action getFElementInitializerAction_0() { return cFElementInitializerAction_0; }
		
		//first=FInitializerExpression
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }
		
		//FInitializerExpression
		public RuleCall getFirstFInitializerExpressionParserRuleCall_1_0() { return cFirstFInitializerExpressionParserRuleCall_1_0; }
		
		//('=>' second=FInitializerExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2_0() { return cEqualsSignGreaterThanSignKeyword_2_0; }
		
		//second=FInitializerExpression
		public Assignment getSecondAssignment_2_1() { return cSecondAssignment_2_1; }
		
		//FInitializerExpression
		public RuleCall getSecondFInitializerExpressionParserRuleCall_2_1_0() { return cSecondFInitializerExpressionParserRuleCall_2_1_0; }
	}
	public class DetailCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.DetailCode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDetailCodeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLinesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLinesCC_STRINGTerminalRuleCall_0_1_0 = (RuleCall)cLinesAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUsedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cUsedLeftCurlyBracketKeyword_1_0_0 = (Keyword)cUsedAssignment_1_0.eContents().get(0);
		private final Assignment cLinesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinesSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cLinesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////StateGraphNode: State | ChoicePoint | TrPoint;
		////StateGraphItem: StateGraphNode | TransitionBase;
		////
		////StateGraph:
		////	{StateGraph}
		////	'{'
		////		(
		////			states+=State |
		////			trPoints+=TrPoint |
		////			chPoints+=ChoicePoint |
		////			transitions+=Transition |
		////			refinedTransitions+=RefinedTransition
		////		)*
		////	'}';
		////	
		////
		////StateMachine returns StateGraph:
		////	{StateGraph}
		////	'StateMachine' '{'
		////		(
		////			states+=State |
		////			trPoints+=TrPoint |
		////			chPoints+=ChoicePoint |
		////			transitions+=Transition |
		////			refinedTransitions+=RefinedTransition
		////		)*
		////	'}';
		////	
		////State: SimpleState | RefinedState;
		////SimpleState:
		////	'State' name=ID (docu=Documentation)? ('{'
		////		annotations+=Annotation*
		////		('entry' entryCode=DetailCode)?
		////		('exit' exitCode=DetailCode)?
		////		('do' doCode=DetailCode)?
		////		('subgraph' subgraph=StateGraph)?
		////	'}')?;
		////RefinedState:
		////	'RefinedState' target=[State|FQN] (docu=Documentation)? '{'
		////		annotations+=Annotation*
		////		('entry' entryCode=DetailCode)?
		////		('exit' exitCode=DetailCode)?
		////		('do' doCode=DetailCode)?
		////		('subgraph' subgraph=StateGraph)?
		////	'}';
		//// the detail level (or target language) code
		//// the used flag might be used when overriding in derived grammars
		//DetailCode:
		//	{DetailCode} lines+=CC_STRING? | used?='{' lines+=STRING* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DetailCode} lines+=CC_STRING? | used?='{' lines+=STRING* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DetailCode} lines+=CC_STRING?
		public Group getGroup_0() { return cGroup_0; }
		
		//{DetailCode}
		public Action getDetailCodeAction_0_0() { return cDetailCodeAction_0_0; }
		
		//lines+=CC_STRING?
		public Assignment getLinesAssignment_0_1() { return cLinesAssignment_0_1; }
		
		//CC_STRING
		public RuleCall getLinesCC_STRINGTerminalRuleCall_0_1_0() { return cLinesCC_STRINGTerminalRuleCall_0_1_0; }
		
		//used?='{' lines+=STRING* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//used?='{'
		public Assignment getUsedAssignment_1_0() { return cUsedAssignment_1_0; }
		
		//'{'
		public Keyword getUsedLeftCurlyBracketKeyword_1_0_0() { return cUsedLeftCurlyBracketKeyword_1_0_0; }
		
		//lines+=STRING*
		public Assignment getLinesAssignment_1_1() { return cLinesAssignment_1_1; }
		
		//STRING
		public RuleCall getLinesSTRINGTerminalRuleCall_1_1_0() { return cLinesSTRINGTerminalRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class AnnotationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.AnnotationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAnnotationParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Keyword cAsteriskSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AnnotationBlock:
		//	'/*' elements+=Annotation+ '*/';
		@Override public ParserRule getRule() { return rule; }
		
		//'/*' elements+=Annotation+ '*/'
		public Group getGroup() { return cGroup; }
		
		//'/*'
		public Keyword getSolidusAsteriskKeyword_0() { return cSolidusAsteriskKeyword_0; }
		
		//elements+=Annotation+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Annotation
		public RuleCall getElementsAnnotationParserRuleCall_1_0() { return cElementsAnnotationParserRuleCall_1_0; }
		
		//'*/'
		public Keyword getAsteriskSolidusKeyword_2() { return cAsteriskSolidusKeyword_2; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Annotation");
		private final Assignment cRawTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRawTextANNOTATION_STRINGTerminalRuleCall_0 = (RuleCall)cRawTextAssignment.eContents().get(0);
		
		//Annotation:
		//	rawText=ANNOTATION_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//rawText=ANNOTATION_STRING
		public Assignment getRawTextAssignment() { return cRawTextAssignment; }
		
		//ANNOTATION_STRING
		public RuleCall getRawTextANNOTATION_STRINGTerminalRuleCall_0() { return cRawTextANNOTATION_STRINGTerminalRuleCall_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cImportedNamespaceImportedFQNParserRuleCall_1_0_0_0 = (RuleCall)cImportedNamespaceAssignment_1_0_0.eContents().get(0);
		private final Keyword cFromKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cModelKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Import:
		//	'import' (importedNamespace=ImportedFQN 'from' | 'model') importURI=STRING ('as' alias=ID)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (importedNamespace=ImportedFQN 'from' | 'model') importURI=STRING ('as' alias=ID)? ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(importedNamespace=ImportedFQN 'from' | 'model')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//importedNamespace=ImportedFQN 'from'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//importedNamespace=ImportedFQN
		public Assignment getImportedNamespaceAssignment_1_0_0() { return cImportedNamespaceAssignment_1_0_0; }
		
		//ImportedFQN
		public RuleCall getImportedNamespaceImportedFQNParserRuleCall_1_0_0_0() { return cImportedNamespaceImportedFQNParserRuleCall_1_0_0_0; }
		
		//'from'
		public Keyword getFromKeyword_1_0_1() { return cFromKeyword_1_0_1; }
		
		//'model'
		public Keyword getModelKeyword_1_1() { return cModelKeyword_1_1; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }
		
		//('as' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ImportedFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.ImportedFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ImportedFQN:
		//	FQN ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//FQN ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ID_WITH_SELECTORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.ID_WITH_SELECTOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// this is used for overloaded FMethod and FBroadcast
		//ID_WITH_SELECTOR:
		//	ID (':' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (':' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(':' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFalseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'false' | 'true';
		@Override public ParserRule getRule() { return rule; }
		
		//'false' | 'true'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'false'
		public Keyword getFalseKeyword_0() { return cFalseKeyword_0; }
		
		//'true'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}
	public class E_BigIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.E_BigInteger");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//E_BigInteger ecore::EBigInteger:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	public class FBasicTypeIdElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.FBasicTypeId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUndefinedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUndefinedUndefinedKeyword_0_0 = (Keyword)cUndefinedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInt8EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInt8Int8Keyword_1_0 = (Keyword)cInt8EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUInt8EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUInt8UInt8Keyword_2_0 = (Keyword)cUInt8EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInt16EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInt16Int16Keyword_3_0 = (Keyword)cInt16EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cUInt16EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cUInt16UInt16Keyword_4_0 = (Keyword)cUInt16EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cInt32EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cInt32Int32Keyword_5_0 = (Keyword)cInt32EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cUInt32EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cUInt32UInt32Keyword_6_0 = (Keyword)cUInt32EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cInt64EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cInt64Int64Keyword_7_0 = (Keyword)cInt64EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUInt64EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUInt64UInt64Keyword_8_0 = (Keyword)cUInt64EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBooleanBooleanKeyword_9_0 = (Keyword)cBooleanEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cStringStringKeyword_10_0 = (Keyword)cStringEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cFloatFloatKeyword_11_0 = (Keyword)cFloatEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cDoubleDoubleKeyword_12_0 = (Keyword)cDoubleEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cByteBufferEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cByteBufferByteBufferKeyword_13_0 = (Keyword)cByteBufferEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum FBasicTypeId:
		//	undefined |
		//	Int8 |
		//	UInt8 |
		//	Int16 |
		//	UInt16 |
		//	Int32 |
		//	UInt32 |
		//	Int64 |
		//	UInt64 |
		//	Boolean |
		//	String |
		//	Float |
		//	Double |
		//	ByteBuffer;
		public EnumRule getRule() { return rule; }
		
		//undefined | Int8 | UInt8 | Int16 | UInt16 | Int32 | UInt32 | Int64 | UInt64 | Boolean | String | Float | Double |
		//ByteBuffer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//undefined
		public EnumLiteralDeclaration getUndefinedEnumLiteralDeclaration_0() { return cUndefinedEnumLiteralDeclaration_0; }
		
		//'undefined'
		public Keyword getUndefinedUndefinedKeyword_0_0() { return cUndefinedUndefinedKeyword_0_0; }
		
		//Int8
		public EnumLiteralDeclaration getInt8EnumLiteralDeclaration_1() { return cInt8EnumLiteralDeclaration_1; }
		
		//'Int8'
		public Keyword getInt8Int8Keyword_1_0() { return cInt8Int8Keyword_1_0; }
		
		//UInt8
		public EnumLiteralDeclaration getUInt8EnumLiteralDeclaration_2() { return cUInt8EnumLiteralDeclaration_2; }
		
		//'UInt8'
		public Keyword getUInt8UInt8Keyword_2_0() { return cUInt8UInt8Keyword_2_0; }
		
		//Int16
		public EnumLiteralDeclaration getInt16EnumLiteralDeclaration_3() { return cInt16EnumLiteralDeclaration_3; }
		
		//'Int16'
		public Keyword getInt16Int16Keyword_3_0() { return cInt16Int16Keyword_3_0; }
		
		//UInt16
		public EnumLiteralDeclaration getUInt16EnumLiteralDeclaration_4() { return cUInt16EnumLiteralDeclaration_4; }
		
		//'UInt16'
		public Keyword getUInt16UInt16Keyword_4_0() { return cUInt16UInt16Keyword_4_0; }
		
		//Int32
		public EnumLiteralDeclaration getInt32EnumLiteralDeclaration_5() { return cInt32EnumLiteralDeclaration_5; }
		
		//'Int32'
		public Keyword getInt32Int32Keyword_5_0() { return cInt32Int32Keyword_5_0; }
		
		//UInt32
		public EnumLiteralDeclaration getUInt32EnumLiteralDeclaration_6() { return cUInt32EnumLiteralDeclaration_6; }
		
		//'UInt32'
		public Keyword getUInt32UInt32Keyword_6_0() { return cUInt32UInt32Keyword_6_0; }
		
		//Int64
		public EnumLiteralDeclaration getInt64EnumLiteralDeclaration_7() { return cInt64EnumLiteralDeclaration_7; }
		
		//'Int64'
		public Keyword getInt64Int64Keyword_7_0() { return cInt64Int64Keyword_7_0; }
		
		//UInt64
		public EnumLiteralDeclaration getUInt64EnumLiteralDeclaration_8() { return cUInt64EnumLiteralDeclaration_8; }
		
		//'UInt64'
		public Keyword getUInt64UInt64Keyword_8_0() { return cUInt64UInt64Keyword_8_0; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_9() { return cBooleanEnumLiteralDeclaration_9; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_9_0() { return cBooleanBooleanKeyword_9_0; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_10() { return cStringEnumLiteralDeclaration_10; }
		
		//'String'
		public Keyword getStringStringKeyword_10_0() { return cStringStringKeyword_10_0; }
		
		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_11() { return cFloatEnumLiteralDeclaration_11; }
		
		//'Float'
		public Keyword getFloatFloatKeyword_11_0() { return cFloatFloatKeyword_11_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_12() { return cDoubleEnumLiteralDeclaration_12; }
		
		//'Double'
		public Keyword getDoubleDoubleKeyword_12_0() { return cDoubleDoubleKeyword_12_0; }
		
		//ByteBuffer
		public EnumLiteralDeclaration getByteBufferEnumLiteralDeclaration_13() { return cByteBufferEnumLiteralDeclaration_13; }
		
		//'ByteBuffer'
		public Keyword getByteBufferByteBufferKeyword_13_0() { return cByteBufferByteBufferKeyword_13_0; }
	}
	public class OperatorOrElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.OperatorOr");
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOrVerticalLineVerticalLineKeyword_0 = (Keyword)cOrEnumLiteralDeclaration.eContents().get(0);
		
		//enum OperatorOr returns FOperator:
		//	Or="||";
		public EnumRule getRule() { return rule; }
		
		//Or="||"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration() { return cOrEnumLiteralDeclaration; }
		
		//"||"
		public Keyword getOrVerticalLineVerticalLineKeyword_0() { return cOrVerticalLineVerticalLineKeyword_0; }
	}
	public class OperatorAndElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.OperatorAnd");
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAndAmpersandAmpersandKeyword_0 = (Keyword)cAndEnumLiteralDeclaration.eContents().get(0);
		
		//enum OperatorAnd returns FOperator:
		//	And="&&";
		public EnumRule getRule() { return rule; }
		
		//And="&&"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration() { return cAndEnumLiteralDeclaration; }
		
		//"&&"
		public Keyword getAndAmpersandAmpersandKeyword_0() { return cAndAmpersandAmpersandKeyword_0; }
	}
	public class OperatorEqualityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.OperatorEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUnequalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUnequalExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cUnequalEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OperatorEquality returns FOperator:
		//	Equal="==" | Unequal="!=";
		public EnumRule getRule() { return rule; }
		
		//Equal="==" | Unequal="!="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Equal="=="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//"=="
		public Keyword getEqualEqualsSignEqualsSignKeyword_0_0() { return cEqualEqualsSignEqualsSignKeyword_0_0; }
		
		//Unequal="!="
		public EnumLiteralDeclaration getUnequalEnumLiteralDeclaration_1() { return cUnequalEnumLiteralDeclaration_1; }
		
		//"!="
		public Keyword getUnequalExclamationMarkEqualsSignKeyword_1_0() { return cUnequalExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class OperatorRelationalElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.OperatorRelational");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSmallerLessThanSignKeyword_0_0 = (Keyword)cSmallerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerOrEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSmallerOrEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cSmallerOrEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterOrEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterOrEqualGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGreaterOrEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterThanSignKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OperatorRelational returns FOperator:
		//	Smaller="<" | SmallerOrEqual="<=" | GreaterOrEqual=">=" | Greater=">";
		public EnumRule getRule() { return rule; }
		
		//Smaller="<" | SmallerOrEqual="<=" | GreaterOrEqual=">=" | Greater=">"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Smaller="<"
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_0() { return cSmallerEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getSmallerLessThanSignKeyword_0_0() { return cSmallerLessThanSignKeyword_0_0; }
		
		//SmallerOrEqual="<="
		public EnumLiteralDeclaration getSmallerOrEqualEnumLiteralDeclaration_1() { return cSmallerOrEqualEnumLiteralDeclaration_1; }
		
		//"<="
		public Keyword getSmallerOrEqualLessThanSignEqualsSignKeyword_1_0() { return cSmallerOrEqualLessThanSignEqualsSignKeyword_1_0; }
		
		//GreaterOrEqual=">="
		public EnumLiteralDeclaration getGreaterOrEqualEnumLiteralDeclaration_2() { return cGreaterOrEqualEnumLiteralDeclaration_2; }
		
		//">="
		public Keyword getGreaterOrEqualGreaterThanSignEqualsSignKeyword_2_0() { return cGreaterOrEqualGreaterThanSignEqualsSignKeyword_2_0; }
		
		//Greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }
		
		//">"
		public Keyword getGreaterGreaterThanSignKeyword_3_0() { return cGreaterGreaterThanSignKeyword_3_0; }
	}
	public class OperatorAdditiveElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.OperatorAdditive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAdditionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAdditionPlusSignKeyword_0_0 = (Keyword)cAdditionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractionHyphenMinusKeyword_1_0 = (Keyword)cSubtractionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OperatorAdditive returns FOperator:
		//	addition="+" | subtraction="-";
		public EnumRule getRule() { return rule; }
		
		//addition="+" | subtraction="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//addition="+"
		public EnumLiteralDeclaration getAdditionEnumLiteralDeclaration_0() { return cAdditionEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getAdditionPlusSignKeyword_0_0() { return cAdditionPlusSignKeyword_0_0; }
		
		//subtraction="-"
		public EnumLiteralDeclaration getSubtractionEnumLiteralDeclaration_1() { return cSubtractionEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getSubtractionHyphenMinusKeyword_1_0() { return cSubtractionHyphenMinusKeyword_1_0; }
	}
	public class OperatorMultiplicativeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.OperatorMultiplicative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultiplicationAsteriskKeyword_0_0 = (Keyword)cMultiplicationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivisionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivisionSolidusKeyword_1_0 = (Keyword)cDivisionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OperatorMultiplicative returns FOperator:
		//	multiplication="*" | division="/";
		public EnumRule getRule() { return rule; }
		
		//multiplication="*" | division="/"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//multiplication="*"
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration_0() { return cMultiplicationEnumLiteralDeclaration_0; }
		
		//"*"
		public Keyword getMultiplicationAsteriskKeyword_0_0() { return cMultiplicationAsteriskKeyword_0_0; }
		
		//division="/"
		public EnumLiteralDeclaration getDivisionEnumLiteralDeclaration_1() { return cDivisionEnumLiteralDeclaration_1; }
		
		//"/"
		public Keyword getDivisionSolidusKeyword_1_0() { return cDivisionSolidusKeyword_1_0; }
	}
	public class OperatorUnaryElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.OperatorUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNegationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNegationExclamationMarkKeyword_0_0 = (Keyword)cNegationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractionHyphenMinusKeyword_1_0 = (Keyword)cSubtractionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OperatorUnary returns FOperator:
		//	negation="!" | subtraction="-";
		public EnumRule getRule() { return rule; }
		
		//negation="!" | subtraction="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//negation="!"
		public EnumLiteralDeclaration getNegationEnumLiteralDeclaration_0() { return cNegationEnumLiteralDeclaration_0; }
		
		//"!"
		public Keyword getNegationExclamationMarkKeyword_0_0() { return cNegationExclamationMarkKeyword_0_0; }
		
		//subtraction="-"
		public EnumLiteralDeclaration getSubtractionEnumLiteralDeclaration_1() { return cSubtractionEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getSubtractionHyphenMinusKeyword_1_0() { return cSubtractionHyphenMinusKeyword_1_0; }
	}
	
	private final BehaviorModelElements pBehaviorModel;
	private final BehaviorElements pBehavior;
	private final SignalElements pSignal;
	private final SignalSignatureElements pSignalSignature;
	private final EventBindingElements pEventBinding;
	private final EventTriggerElements pEventTrigger;
	private final EventOnIfElements pEventOnIf;
	private final MethodSignatureElements pMethodSignature;
	private final EventElements pEvent;
	private final OperationElements pOperation;
	private final StandardOperationElements pStandardOperation;
	private final VarDeclElements pVarDecl;
	private final RefableTypeElements pRefableType;
	private final SpecificationBlockElements pSpecificationBlock;
	private final ContractPairElements pContractPair;
	private final RequiresElements pRequires;
	private final EnsuresElements pEnsures;
	private final ContractExpressionElements pContractExpression;
	private final FStateGraphElements pFStateGraph;
	private final FStateElements pFState;
	private final FTransitionElements pFTransition;
	private final FTriggerElements pFTrigger;
	private final FEventOnIfElements pFEventOnIf;
	private final BroadcastElements pBroadcast;
	private final FGuardElements pFGuard;
	private final FTypeRefElements pFTypeRef;
	private final FBasicTypeIdElements eFBasicTypeId;
	private final FIntegerIntervalElements pFIntegerInterval;
	private final INTERVAL_BOUNDElements pINTERVAL_BOUND;
	private final FTypeElements pFType;
	private final FArrayTypeElements pFArrayType;
	private final FTypeDefElements pFTypeDef;
	private final FStructTypeElements pFStructType;
	private final FUnionTypeElements pFUnionType;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final SimplePrimaryExpressionElements pSimplePrimaryExpression;
	private final FUnaryOperationElements pFUnaryOperation;
	private final OperatorOrElements eOperatorOr;
	private final OperatorAndElements eOperatorAnd;
	private final OperatorEqualityElements eOperatorEquality;
	private final OperatorRelationalElements eOperatorRelational;
	private final OperatorAdditiveElements eOperatorAdditive;
	private final OperatorMultiplicativeElements eOperatorMultiplicative;
	private final OperatorUnaryElements eOperatorUnary;
	private final FQualifiedElementRefElements pFQualifiedElementRef;
	private final FConstantElements pFConstant;
	private final FDoubleConstantElements pFDoubleConstant;
	private final FFloatConstantElements pFFloatConstant;
	private final FIntegerConstantElements pFIntegerConstant;
	private final FBooleanConstantElements pFBooleanConstant;
	private final FStringConstantElements pFStringConstant;
	private final FMapTypeElements pFMapType;
	private final FFieldElements pFField;
	private final FDeclarationElements pFDeclaration;
	private final FTypedElementElements pFTypedElement;
	private final FArgumentElements pFArgument;
	private final FConstantDefElements pFConstantDef;
	private final FInitializerExpressionElements pFInitializerExpression;
	private final FInitializerElements pFInitializer;
	private final FCompoundInitializerElements pFCompoundInitializer;
	private final FFieldInitializerElements pFFieldInitializer;
	private final FBracketInitializerElements pFBracketInitializer;
	private final FElementInitializerElements pFElementInitializer;
	private final DetailCodeElements pDetailCode;
	private final AnnotationBlockElements pAnnotationBlock;
	private final AnnotationElements pAnnotation;
	private final TerminalRule tANNOTATION_STRING;
	private final ImportElements pImport;
	private final ImportedFQNElements pImportedFQN;
	private final FQNElements pFQN;
	private final ID_WITH_SELECTORElements pID_WITH_SELECTOR;
	private final TerminalRule tCC_STRING;
	private final EBooleanElements pEBoolean;
	private final E_BigIntegerElements pE_BigInteger;
	private final TerminalRule tE_DOUBLE_OBJECT;
	private final TerminalRule tE_FLOAT_OBJECT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BehaviorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBehaviorModel = new BehaviorModelElements();
		this.pBehavior = new BehaviorElements();
		this.pSignal = new SignalElements();
		this.pSignalSignature = new SignalSignatureElements();
		this.pEventBinding = new EventBindingElements();
		this.pEventTrigger = new EventTriggerElements();
		this.pEventOnIf = new EventOnIfElements();
		this.pMethodSignature = new MethodSignatureElements();
		this.pEvent = new EventElements();
		this.pOperation = new OperationElements();
		this.pStandardOperation = new StandardOperationElements();
		this.pVarDecl = new VarDeclElements();
		this.pRefableType = new RefableTypeElements();
		this.pSpecificationBlock = new SpecificationBlockElements();
		this.pContractPair = new ContractPairElements();
		this.pRequires = new RequiresElements();
		this.pEnsures = new EnsuresElements();
		this.pContractExpression = new ContractExpressionElements();
		this.pFStateGraph = new FStateGraphElements();
		this.pFState = new FStateElements();
		this.pFTransition = new FTransitionElements();
		this.pFTrigger = new FTriggerElements();
		this.pFEventOnIf = new FEventOnIfElements();
		this.pBroadcast = new BroadcastElements();
		this.pFGuard = new FGuardElements();
		this.pFTypeRef = new FTypeRefElements();
		this.eFBasicTypeId = new FBasicTypeIdElements();
		this.pFIntegerInterval = new FIntegerIntervalElements();
		this.pINTERVAL_BOUND = new INTERVAL_BOUNDElements();
		this.pFType = new FTypeElements();
		this.pFArrayType = new FArrayTypeElements();
		this.pFTypeDef = new FTypeDefElements();
		this.pFStructType = new FStructTypeElements();
		this.pFUnionType = new FUnionTypeElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pSimplePrimaryExpression = new SimplePrimaryExpressionElements();
		this.pFUnaryOperation = new FUnaryOperationElements();
		this.eOperatorOr = new OperatorOrElements();
		this.eOperatorAnd = new OperatorAndElements();
		this.eOperatorEquality = new OperatorEqualityElements();
		this.eOperatorRelational = new OperatorRelationalElements();
		this.eOperatorAdditive = new OperatorAdditiveElements();
		this.eOperatorMultiplicative = new OperatorMultiplicativeElements();
		this.eOperatorUnary = new OperatorUnaryElements();
		this.pFQualifiedElementRef = new FQualifiedElementRefElements();
		this.pFConstant = new FConstantElements();
		this.pFDoubleConstant = new FDoubleConstantElements();
		this.pFFloatConstant = new FFloatConstantElements();
		this.pFIntegerConstant = new FIntegerConstantElements();
		this.pFBooleanConstant = new FBooleanConstantElements();
		this.pFStringConstant = new FStringConstantElements();
		this.pFMapType = new FMapTypeElements();
		this.pFField = new FFieldElements();
		this.pFDeclaration = new FDeclarationElements();
		this.pFTypedElement = new FTypedElementElements();
		this.pFArgument = new FArgumentElements();
		this.pFConstantDef = new FConstantDefElements();
		this.pFInitializerExpression = new FInitializerExpressionElements();
		this.pFInitializer = new FInitializerElements();
		this.pFCompoundInitializer = new FCompoundInitializerElements();
		this.pFFieldInitializer = new FFieldInitializerElements();
		this.pFBracketInitializer = new FBracketInitializerElements();
		this.pFElementInitializer = new FElementInitializerElements();
		this.pDetailCode = new DetailCodeElements();
		this.pAnnotationBlock = new AnnotationBlockElements();
		this.pAnnotation = new AnnotationElements();
		this.tANNOTATION_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.ANNOTATION_STRING");
		this.pImport = new ImportElements();
		this.pImportedFQN = new ImportedFQNElements();
		this.pFQN = new FQNElements();
		this.pID_WITH_SELECTOR = new ID_WITH_SELECTORElements();
		this.tCC_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.CC_STRING");
		this.pEBoolean = new EBooleanElements();
		this.pE_BigInteger = new E_BigIntegerElements();
		this.tE_DOUBLE_OBJECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.E_DOUBLE_OBJECT");
		this.tE_FLOAT_OBJECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.ccc.contracting.Behavior.E_FLOAT_OBJECT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tu_bs.ccc.contracting.Behavior".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BehaviorModel:
	//	{BehaviorModel}
	//	'package' name=FQN
	//	imports+=Import*
	//	behaviors+=Behavior*;
	public BehaviorModelElements getBehaviorModelAccess() {
		return pBehaviorModel;
	}
	
	public ParserRule getBehaviorModelRule() {
		return getBehaviorModelAccess().getRule();
	}
	
	//Behavior:
	//	{Behavior} comment=AnnotationBlock?
	//	'Behavior' name=ID? ('implements' componentName=ID)?
	//	'{' ('vars' '{' (variables+=FDeclaration ';'?)* '}')? ('events' '{' (events+=EventBinding ';'?)* '}')? ('signals' '{'
	//	(signals+=Signal ';'?)* '}')?
	//	operations+=StandardOperation*
	//	'FSM' name=ID? stateGraphs+=FStateGraph*
	//	'}';
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//Signal:
	//	{Signal} comment=AnnotationBlock?
	//	signal=SignalSignature;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//SignalSignature:
	//	name=ID ('(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')')?;
	public SignalSignatureElements getSignalSignatureAccess() {
		return pSignalSignature;
	}
	
	public ParserRule getSignalSignatureRule() {
		return getSignalSignatureAccess().getRule();
	}
	
	//EventBinding:
	//	{EventBinding} comment=AnnotationBlock?
	//	'on' trigger=EventTrigger
	//	'->' to=Event;
	public EventBindingElements getEventBindingAccess() {
		return pEventBinding;
	}
	
	public ParserRule getEventBindingRule() {
		return getEventBindingAccess().getRule();
	}
	
	//EventTrigger:
	//	event=EventOnIf;
	public EventTriggerElements getEventTriggerAccess() {
		return pEventTrigger;
	}
	
	public ParserRule getEventTriggerRule() {
		return getEventTriggerAccess().getRule();
	}
	
	//EventOnIf:
	//	'time' freq=INT | 'condition' condition=LogicalOrExpression | 'call' call=MethodSignature | 'event' event=FQN |
	//	'signal' signal=ID;
	public EventOnIfElements getEventOnIfAccess() {
		return pEventOnIf;
	}
	
	public ParserRule getEventOnIfRule() {
		return getEventOnIfAccess().getRule();
	}
	
	//MethodSignature:
	//	name=FQN '(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')' (':' ('void' | returnType=RefableType))?;
	public MethodSignatureElements getMethodSignatureAccess() {
		return pMethodSignature;
	}
	
	public ParserRule getMethodSignatureRule() {
		return getMethodSignatureAccess().getRule();
	}
	
	//Event:
	//	name=ID ('(' arguments+=ID (',' arguments+=ID)* ')')?;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Operation:
	//	StandardOperation;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	////| PortOperation;
	//StandardOperation:
	//	comment=AnnotationBlock?
	//	override?='override'? 'Operation' name=ID '(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')' (':' ('void' |
	//	returnType=FTypeRef (array?='[' ']')?))?
	//	'{' contract=SpecificationBlock detailCode=DetailCode '}';
	public StandardOperationElements getStandardOperationAccess() {
		return pStandardOperation;
	}
	
	public ParserRule getStandardOperationRule() {
		return getStandardOperationAccess().getRule();
	}
	
	//VarDecl:
	//	name=ID ':' refType=FTypeRef (array?='[' ']')? varargs?='varargs'?;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//RefableType:
	//	type=[FTypeRef|FQN] ref?='ref'?;
	public RefableTypeElements getRefableTypeAccess() {
		return pRefableType;
	}
	
	public ParserRule getRefableTypeRule() {
		return getRefableTypeAccess().getRule();
	}
	
	//// specifications
	//SpecificationBlock:
	//	{SpecificationBlock} comment=AnnotationBlock?
	//	'contract' '{'
	//	contracts+=ContractPair ('also'
	//	contracts+=ContractPair)*
	//	'}';
	public SpecificationBlockElements getSpecificationBlockAccess() {
		return pSpecificationBlock;
	}
	
	public ParserRule getSpecificationBlockRule() {
		return getSpecificationBlockAccess().getRule();
	}
	
	//ContractPair:
	//	{ContractPair} req+=Requires*
	//	ens+=Ensures*;
	public ContractPairElements getContractPairAccess() {
		return pContractPair;
	}
	
	public ParserRule getContractPairRule() {
		return getContractPairAccess().getRule();
	}
	
	//Requires:
	//	'requires' ':' expr=ContractExpression ';';
	public RequiresElements getRequiresAccess() {
		return pRequires;
	}
	
	public ParserRule getRequiresRule() {
		return getRequiresAccess().getRule();
	}
	
	//Ensures:
	//	'ensures' ':' expr=ContractExpression ';';
	public EnsuresElements getEnsuresAccess() {
		return pEnsures;
	}
	
	public ParserRule getEnsuresRule() {
		return getEnsuresAccess().getRule();
	}
	
	//ContractExpression:
	//	STRING;
	public ContractExpressionElements getContractExpressionAccess() {
		return pContractExpression;
	}
	
	public ParserRule getContractExpressionRule() {
		return getContractExpressionAccess().getRule();
	}
	
	////PortOperation:
	////    'Operation' name=ID '(' (arguments+=VarDecl (',' arguments+=VarDecl)*)? ')' ( (':' ('void' | (returnType=RefableType))) | ('sends' sendsMsg=[Message|ID]) )?
	////            detailCode=DetailCode
	////;
	//FStateGraph:
	//	{FStateGraph} '{'
	//	'initial' initial=[FState] states+=FState*
	//	'}';
	public FStateGraphElements getFStateGraphAccess() {
		return pFStateGraph;
	}
	
	public ParserRule getFStateGraphRule() {
		return getFStateGraphAccess().getRule();
	}
	
	//FState:
	//	{FState} comment=AnnotationBlock?
	//	'state' name=ID '{' ('entry' '{' entryAction=CC_STRING broadcastEntry=Broadcast? '}')? ('exit' '{'
	//	exitAction=CC_STRING broadcastExit=Broadcast? '}')? ('do' '{' doAction=CC_STRING boradcastDo=Broadcast? '}')?
	//	transitions+=FTransition*
	//	'}';
	public FStateElements getFStateAccess() {
		return pFState;
	}
	
	public ParserRule getFStateRule() {
		return getFStateAccess().getRule();
	}
	
	//FTransition:
	//	'on' trigger=FTrigger
	//	guard=FGuard?
	//	'->' to=[FState] ('{' action=CC_STRING broadcast=Broadcast? '}')?;
	public FTransitionElements getFTransitionAccess() {
		return pFTransition;
	}
	
	public ParserRule getFTransitionRule() {
		return getFTransitionAccess().getRule();
	}
	
	//FTrigger:
	//	event=FEventOnIf;
	public FTriggerElements getFTriggerAccess() {
		return pFTrigger;
	}
	
	public ParserRule getFTriggerRule() {
		return getFTriggerAccess().getRule();
	}
	
	//FEventOnIf:
	//	{FEventOnIf} 'tick' | 'event' name=Event;
	public FEventOnIfElements getFEventOnIfAccess() {
		return pFEventOnIf;
	}
	
	public ParserRule getFEventOnIfRule() {
		return getFEventOnIfAccess().getRule();
	}
	
	//Broadcast:
	//	'emit' signal=ID ('(' arguments+=ID (',' arguments+=ID)* ')')?;
	public BroadcastElements getBroadcastAccess() {
		return pBroadcast;
	}
	
	public ParserRule getBroadcastRule() {
		return getBroadcastAccess().getRule();
	}
	
	//FGuard:
	//	'[' condition=LogicalOrExpression ']';
	public FGuardElements getFGuardAccess() {
		return pFGuard;
	}
	
	public ParserRule getFGuardRule() {
		return getFGuardAccess().getRule();
	}
	
	//FTypeRef:
	//	predefined=FBasicTypeId | derived=[FType|FQN] | interval=FIntegerInterval;
	public FTypeRefElements getFTypeRefAccess() {
		return pFTypeRef;
	}
	
	public ParserRule getFTypeRefRule() {
		return getFTypeRefAccess().getRule();
	}
	
	//enum FBasicTypeId:
	//	undefined |
	//	Int8 |
	//	UInt8 |
	//	Int16 |
	//	UInt16 |
	//	Int32 |
	//	UInt32 |
	//	Int64 |
	//	UInt64 |
	//	Boolean |
	//	String |
	//	Float |
	//	Double |
	//	ByteBuffer;
	public FBasicTypeIdElements getFBasicTypeIdAccess() {
		return eFBasicTypeId;
	}
	
	public EnumRule getFBasicTypeIdRule() {
		return getFBasicTypeIdAccess().getRule();
	}
	
	//FIntegerInterval:
	//	{FIntegerInterval}
	//	'Integer' ('(' (lowerBound=INTERVAL_BOUND | 'minInt') ',' (upperBound=INTERVAL_BOUND | 'maxInt') ')')?;
	public FIntegerIntervalElements getFIntegerIntervalAccess() {
		return pFIntegerInterval;
	}
	
	public ParserRule getFIntegerIntervalRule() {
		return getFIntegerIntervalAccess().getRule();
	}
	
	//INTERVAL_BOUND ecore::EBigInteger:
	//	'-'? INT;
	public INTERVAL_BOUNDElements getINTERVAL_BOUNDAccess() {
		return pINTERVAL_BOUND;
	}
	
	public ParserRule getINTERVAL_BOUNDRule() {
		return getINTERVAL_BOUNDAccess().getRule();
	}
	
	//FType:
	//	FArrayType | FStructType | FUnionType | FMapType | FTypeDef;
	public FTypeElements getFTypeAccess() {
		return pFType;
	}
	
	public ParserRule getFTypeRule() {
		return getFTypeAccess().getRule();
	}
	
	//FArrayType:
	//	{FArrayType} comment=AnnotationBlock?
	//	public?='public'? 'array' name=ID 'of' elementType=FTypeRef;
	public FArrayTypeElements getFArrayTypeAccess() {
		return pFArrayType;
	}
	
	public ParserRule getFArrayTypeRule() {
		return getFArrayTypeAccess().getRule();
	}
	
	//FTypeDef:
	//	{FTypeDef} comment=AnnotationBlock?
	//	public?='public'? 'typedef' name=ID 'is' actualType=FTypeRef;
	public FTypeDefElements getFTypeDefAccess() {
		return pFTypeDef;
	}
	
	public ParserRule getFTypeDefRule() {
		return getFTypeDefAccess().getRule();
	}
	
	//FStructType:
	//	{FStructType} comment=AnnotationBlock?
	//	public?='public'? 'struct' name=ID ('extends' base=[FStructType|FQN] | polymorphic?='polymorphic')?
	//	'{'
	//	elements+=FField*
	//	'}';
	public FStructTypeElements getFStructTypeAccess() {
		return pFStructType;
	}
	
	public ParserRule getFStructTypeRule() {
		return getFStructTypeAccess().getRule();
	}
	
	//FUnionType:
	//	{FUnionType} comment=AnnotationBlock?
	//	public?='public'? 'union' name=ID ('extends' base=[FUnionType|FQN])?
	//	'{'
	//	elements+=FField*
	//	'}';
	public FUnionTypeElements getFUnionTypeAccess() {
		return pFUnionType;
	}
	
	public ParserRule getFUnionTypeRule() {
		return getFUnionTypeAccess().getRule();
	}
	
	//LogicalOrExpression FExpression:
	//	LogicalAndExpression ({FBinaryOperation.left=current} op=OperatorOr right=LogicalAndExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression FExpression:
	//	EqualityExpression ({FBinaryOperation.left=current} op=OperatorAnd right=EqualityExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//EqualityExpression FExpression:
	//	RelationalExpression ({FBinaryOperation.left=current} op=OperatorEquality right=RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression FExpression:
	//	AdditiveExpression ({FBinaryOperation.left=current} op=OperatorRelational right=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//AdditiveExpression FExpression:
	//	MultiplicativeExpression ({FBinaryOperation.left=current} op=OperatorAdditive right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression FExpression:
	//	PrimaryExpression ({FBinaryOperation.left=current} op=OperatorMultiplicative right=PrimaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//PrimaryExpression FExpression:
	//	FUnaryOperation | SimplePrimaryExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//SimplePrimaryExpression FExpression:
	//	FQualifiedElementRef | FConstant |
	//	'(' LogicalOrExpression ')';
	public SimplePrimaryExpressionElements getSimplePrimaryExpressionAccess() {
		return pSimplePrimaryExpression;
	}
	
	public ParserRule getSimplePrimaryExpressionRule() {
		return getSimplePrimaryExpressionAccess().getRule();
	}
	
	//FUnaryOperation FExpression:
	//	{FUnaryOperation} op=OperatorUnary operand=SimplePrimaryExpression;
	public FUnaryOperationElements getFUnaryOperationAccess() {
		return pFUnaryOperation;
	}
	
	public ParserRule getFUnaryOperationRule() {
		return getFUnaryOperationAccess().getRule();
	}
	
	//enum OperatorOr returns FOperator:
	//	Or="||";
	public OperatorOrElements getOperatorOrAccess() {
		return eOperatorOr;
	}
	
	public EnumRule getOperatorOrRule() {
		return getOperatorOrAccess().getRule();
	}
	
	//enum OperatorAnd returns FOperator:
	//	And="&&";
	public OperatorAndElements getOperatorAndAccess() {
		return eOperatorAnd;
	}
	
	public EnumRule getOperatorAndRule() {
		return getOperatorAndAccess().getRule();
	}
	
	//enum OperatorEquality returns FOperator:
	//	Equal="==" | Unequal="!=";
	public OperatorEqualityElements getOperatorEqualityAccess() {
		return eOperatorEquality;
	}
	
	public EnumRule getOperatorEqualityRule() {
		return getOperatorEqualityAccess().getRule();
	}
	
	//enum OperatorRelational returns FOperator:
	//	Smaller="<" | SmallerOrEqual="<=" | GreaterOrEqual=">=" | Greater=">";
	public OperatorRelationalElements getOperatorRelationalAccess() {
		return eOperatorRelational;
	}
	
	public EnumRule getOperatorRelationalRule() {
		return getOperatorRelationalAccess().getRule();
	}
	
	//enum OperatorAdditive returns FOperator:
	//	addition="+" | subtraction="-";
	public OperatorAdditiveElements getOperatorAdditiveAccess() {
		return eOperatorAdditive;
	}
	
	public EnumRule getOperatorAdditiveRule() {
		return getOperatorAdditiveAccess().getRule();
	}
	
	//enum OperatorMultiplicative returns FOperator:
	//	multiplication="*" | division="/";
	public OperatorMultiplicativeElements getOperatorMultiplicativeAccess() {
		return eOperatorMultiplicative;
	}
	
	public EnumRule getOperatorMultiplicativeRule() {
		return getOperatorMultiplicativeAccess().getRule();
	}
	
	//enum OperatorUnary returns FOperator:
	//	negation="!" | subtraction="-";
	public OperatorUnaryElements getOperatorUnaryAccess() {
		return eOperatorUnary;
	}
	
	public EnumRule getOperatorUnaryRule() {
		return getOperatorUnaryAccess().getRule();
	}
	
	//FQualifiedElementRef:
	//	{FQualifiedElementRef} element=FQN ({FQualifiedElementRef.qualifier=current} '-->' field=[FField])*;
	public FQualifiedElementRefElements getFQualifiedElementRefAccess() {
		return pFQualifiedElementRef;
	}
	
	public ParserRule getFQualifiedElementRefRule() {
		return getFQualifiedElementRefAccess().getRule();
	}
	
	//FConstant FExpression:
	//	FFloatConstant | FDoubleConstant | FIntegerConstant | FBooleanConstant | FStringConstant;
	public FConstantElements getFConstantAccess() {
		return pFConstant;
	}
	
	public ParserRule getFConstantRule() {
		return getFConstantAccess().getRule();
	}
	
	//FDoubleConstant:
	//	val=E_DOUBLE_OBJECT;
	public FDoubleConstantElements getFDoubleConstantAccess() {
		return pFDoubleConstant;
	}
	
	public ParserRule getFDoubleConstantRule() {
		return getFDoubleConstantAccess().getRule();
	}
	
	//FFloatConstant:
	//	val=E_FLOAT_OBJECT;
	public FFloatConstantElements getFFloatConstantAccess() {
		return pFFloatConstant;
	}
	
	public ParserRule getFFloatConstantRule() {
		return getFFloatConstantAccess().getRule();
	}
	
	//FIntegerConstant:
	//	val=E_BigInteger;
	public FIntegerConstantElements getFIntegerConstantAccess() {
		return pFIntegerConstant;
	}
	
	public ParserRule getFIntegerConstantRule() {
		return getFIntegerConstantAccess().getRule();
	}
	
	//FBooleanConstant:
	//	val=EBoolean;
	public FBooleanConstantElements getFBooleanConstantAccess() {
		return pFBooleanConstant;
	}
	
	public ParserRule getFBooleanConstantRule() {
		return getFBooleanConstantAccess().getRule();
	}
	
	//FStringConstant:
	//	val=STRING;
	public FStringConstantElements getFStringConstantAccess() {
		return pFStringConstant;
	}
	
	public ParserRule getFStringConstantRule() {
		return getFStringConstantAccess().getRule();
	}
	
	////FEnumerationType returns FEnumerationType:
	////	{FEnumerationType}
	////	(comment=AnnotationBlock)?
	////	(public?='public')? 'enumeration' name=ID
	////	('extends' base=[FEnumerationType|FQN])?
	////	'{'
	////		(enumerators+=FEnumerator (','? enumerators+=FEnumerator)*)?
	////    '}';
	////
	////FEnumerationTypeBody returns FEnumerationType:
	////	{FEnumerationType}
	////	('extends' base=[FEnumerationType|FQN])?
	////	'{'
	////		(enumerators+=FEnumerator (','? enumerators+=FEnumerator)*)?
	////    '}';
	////
	////FEnumerator returns FEnumerator:
	////	{FEnumerator}
	////	(comment=AnnotationBlock)?
	////	name=ID ('=' value=AdditiveExpression)?
	////    ;
	//FMapType:
	//	{FMapType} comment=AnnotationBlock?
	//	public?='public'? 'map' name=ID '{'
	//	keyType=FTypeRef 'to' valueType=FTypeRef
	//	'}';
	public FMapTypeElements getFMapTypeAccess() {
		return pFMapType;
	}
	
	public ParserRule getFMapTypeRule() {
		return getFMapTypeAccess().getRule();
	}
	
	//FField:
	//	comment=AnnotationBlock?
	//	type=FTypeRef (array?='[' ']')? name=ID;
	public FFieldElements getFFieldAccess() {
		return pFField;
	}
	
	public ParserRule getFFieldRule() {
		return getFFieldAccess().getRule();
	}
	
	//FDeclaration:
	//	type=FTypeRef (array?='[' ']')? name=ID ('=' rhs=FInitializerExpression)?;
	public FDeclarationElements getFDeclarationAccess() {
		return pFDeclaration;
	}
	
	public ParserRule getFDeclarationRule() {
		return getFDeclarationAccess().getRule();
	}
	
	//FTypedElement:
	//	FField | FArgument | FDeclaration | FConstantDef;
	public FTypedElementElements getFTypedElementAccess() {
		return pFTypedElement;
	}
	
	public ParserRule getFTypedElementRule() {
		return getFTypedElementAccess().getRule();
	}
	
	//FArgument:
	//	comment=AnnotationBlock?
	//	type=FTypeRef (array?='[' ']')? name=ID;
	public FArgumentElements getFArgumentAccess() {
		return pFArgument;
	}
	
	public ParserRule getFArgumentRule() {
		return getFArgumentAccess().getRule();
	}
	
	//FConstantDef:
	//	comment=AnnotationBlock?
	//	'const' type=FTypeRef (array?='[' ']')? name=ID '='
	//	rhs=FInitializerExpression;
	public FConstantDefElements getFConstantDefAccess() {
		return pFConstantDef;
	}
	
	public ParserRule getFConstantDefRule() {
		return getFConstantDefAccess().getRule();
	}
	
	//FInitializerExpression:
	//	FInitializer;
	public FInitializerExpressionElements getFInitializerExpressionAccess() {
		return pFInitializerExpression;
	}
	
	public ParserRule getFInitializerExpressionRule() {
		return getFInitializerExpressionAccess().getRule();
	}
	
	//FInitializer:
	//	FCompoundInitializer | FBracketInitializer;
	public FInitializerElements getFInitializerAccess() {
		return pFInitializer;
	}
	
	public ParserRule getFInitializerRule() {
		return getFInitializerAccess().getRule();
	}
	
	//// this is used for struct and union types
	//FCompoundInitializer:
	//	{FCompoundInitializer}
	//	'{' (elements+=FFieldInitializer (',' elements+=FFieldInitializer)*)? '}';
	public FCompoundInitializerElements getFCompoundInitializerAccess() {
		return pFCompoundInitializer;
	}
	
	public ParserRule getFCompoundInitializerRule() {
		return getFCompoundInitializerAccess().getRule();
	}
	
	//FFieldInitializer:
	//	element=[FField] ':' value=FInitializerExpression;
	public FFieldInitializerElements getFFieldInitializerAccess() {
		return pFFieldInitializer;
	}
	
	public ParserRule getFFieldInitializerRule() {
		return getFFieldInitializerAccess().getRule();
	}
	
	//// this is used for array and map types
	//FBracketInitializer:
	//	{FBracketInitializer}
	//	'[' (elements+=FElementInitializer (',' elements+=FElementInitializer)*)? ']';
	public FBracketInitializerElements getFBracketInitializerAccess() {
		return pFBracketInitializer;
	}
	
	public ParserRule getFBracketInitializerRule() {
		return getFBracketInitializerAccess().getRule();
	}
	
	//// for array type initializers, the second element is omitted
	//FElementInitializer:
	//	{FElementInitializer} first=FInitializerExpression ('=>' second=FInitializerExpression)?;
	public FElementInitializerElements getFElementInitializerAccess() {
		return pFElementInitializer;
	}
	
	public ParserRule getFElementInitializerRule() {
		return getFElementInitializerAccess().getRule();
	}
	
	////StateGraphNode: State | ChoicePoint | TrPoint;
	////StateGraphItem: StateGraphNode | TransitionBase;
	////
	////StateGraph:
	////	{StateGraph}
	////	'{'
	////		(
	////			states+=State |
	////			trPoints+=TrPoint |
	////			chPoints+=ChoicePoint |
	////			transitions+=Transition |
	////			refinedTransitions+=RefinedTransition
	////		)*
	////	'}';
	////	
	////
	////StateMachine returns StateGraph:
	////	{StateGraph}
	////	'StateMachine' '{'
	////		(
	////			states+=State |
	////			trPoints+=TrPoint |
	////			chPoints+=ChoicePoint |
	////			transitions+=Transition |
	////			refinedTransitions+=RefinedTransition
	////		)*
	////	'}';
	////	
	////State: SimpleState | RefinedState;
	////SimpleState:
	////	'State' name=ID (docu=Documentation)? ('{'
	////		annotations+=Annotation*
	////		('entry' entryCode=DetailCode)?
	////		('exit' exitCode=DetailCode)?
	////		('do' doCode=DetailCode)?
	////		('subgraph' subgraph=StateGraph)?
	////	'}')?;
	////RefinedState:
	////	'RefinedState' target=[State|FQN] (docu=Documentation)? '{'
	////		annotations+=Annotation*
	////		('entry' entryCode=DetailCode)?
	////		('exit' exitCode=DetailCode)?
	////		('do' doCode=DetailCode)?
	////		('subgraph' subgraph=StateGraph)?
	////	'}';
	//// the detail level (or target language) code
	//// the used flag might be used when overriding in derived grammars
	//DetailCode:
	//	{DetailCode} lines+=CC_STRING? | used?='{' lines+=STRING* '}';
	public DetailCodeElements getDetailCodeAccess() {
		return pDetailCode;
	}
	
	public ParserRule getDetailCodeRule() {
		return getDetailCodeAccess().getRule();
	}
	
	//AnnotationBlock:
	//	'/*' elements+=Annotation+ '*/';
	public AnnotationBlockElements getAnnotationBlockAccess() {
		return pAnnotationBlock;
	}
	
	public ParserRule getAnnotationBlockRule() {
		return getAnnotationBlockAccess().getRule();
	}
	
	//Annotation:
	//	rawText=ANNOTATION_STRING;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//terminal ANNOTATION_STRING:
	//	'@' ('a'..'z' | '-')+ (' ' | '\t')* ':' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | ('\\*' |
	//	'\\@') | !('\\' | '*' | '@'))*;
	public TerminalRule getANNOTATION_STRINGRule() {
		return tANNOTATION_STRING;
	}
	
	//Import:
	//	'import' (importedNamespace=ImportedFQN 'from' | 'model') importURI=STRING ('as' alias=ID)? ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportedFQN:
	//	FQN ('.' '*')?;
	public ImportedFQNElements getImportedFQNAccess() {
		return pImportedFQN;
	}
	
	public ParserRule getImportedFQNRule() {
		return getImportedFQNAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//// this is used for overloaded FMethod and FBroadcast
	//ID_WITH_SELECTOR:
	//	ID (':' ID)?;
	public ID_WITH_SELECTORElements getID_WITH_SELECTORAccess() {
		return pID_WITH_SELECTOR;
	}
	
	public ParserRule getID_WITH_SELECTORRule() {
		return getID_WITH_SELECTORAccess().getRule();
	}
	
	//terminal CC_STRING:
	//	"'''"->"'''";
	public TerminalRule getCC_STRINGRule() {
		return tCC_STRING;
	}
	
	//EBoolean ecore::EBoolean:
	//	'false' | 'true';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//E_BigInteger ecore::EBigInteger:
	//	INT;
	public E_BigIntegerElements getE_BigIntegerAccess() {
		return pE_BigInteger;
	}
	
	public ParserRule getE_BigIntegerRule() {
		return getE_BigIntegerAccess().getRule();
	}
	
	//terminal E_DOUBLE_OBJECT returns ecore::EDoubleObject:
	//	INT '.' INT ('e' '-'? INT)? 'd';
	public TerminalRule getE_DOUBLE_OBJECTRule() {
		return tE_DOUBLE_OBJECT;
	}
	
	//terminal E_FLOAT_OBJECT returns ecore::EFloatObject:
	//	INT '.' INT ('e' '-'? INT)? 'f';
	public TerminalRule getE_FLOAT_OBJECTRule() {
		return tE_FLOAT_OBJECT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
